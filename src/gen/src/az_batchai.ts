import { CommandBuilder } from '../base';

/** Commands to work with files generated by node setup task. */
export class az_batchai_cluster_file {
    /**
     * List files generated by the cluster's node setup task.
     *
     * Syntax:
     * ```
     * az batchai cluster file list --cluster
     *                              --resource-group
     *                              --workspace
     *                              [--expiry]
     *                              [--path]
     *                              [--query-examples]
     *                              [--subscription]
     * ```
     *
     * @param {string} cluster Name of cluster.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(cluster: string, resourceGroup: string, workspace: string): az_batchai_cluster_file_list_command_builder {
        return new az_batchai_cluster_file_list_command_builder("az batchai cluster file list", cluster, resourceGroup, workspace);
    }
}

/** Commands to work with cluster nodes. */
export class az_batchai_cluster_node {
    /**
     * Executes a command line on a cluster's node with optional ports forwarding.
     *
     * Syntax:
     * ```
     * az batchai cluster node exec --cluster
     *                              --resource-group
     *                              --workspace
     *                              [--address]
     *                              [--exec]
     *                              [--node-id]
     *                              [--password]
     *                              [--ssh-private-key]
     *                              [--subscription]
     * ```
     *
     * @param {string} cluster Name of cluster.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static exec(cluster: string, resourceGroup: string, workspace: string): az_batchai_cluster_node_exec_command_builder {
        return new az_batchai_cluster_node_exec_command_builder("az batchai cluster node exec", cluster, resourceGroup, workspace);
    }

    /**
     * List remote login information for cluster's nodes.
     *
     * Syntax:
     * ```
     * az batchai cluster node list --cluster
     *                              --resource-group
     *                              --workspace
     *                              [--query-examples]
     *                              [--subscription]
     * ```
     *
     * @param {string} cluster Name of cluster.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(cluster: string, resourceGroup: string, workspace: string): az_batchai_cluster_node_list_command_builder {
        return new az_batchai_cluster_node_list_command_builder("az batchai cluster node list", cluster, resourceGroup, workspace);
    }
}

/** Commands to manage clusters. */
export class az_batchai_cluster {
    /**
     * Set auto-scale parameters for a cluster.
     *
     * Syntax:
     * ```
     * az batchai cluster auto-scale --max
     *                               --min
     *                               [--ids]
     *                               [--name]
     *                               [--resource-group]
     *                               [--subscription]
     *                               [--workspace]
     * ```
     *
     * @param {string} max Maximum number of nodes.
     * @param {string} min Minimum number of nodes.
     */
    static auto_scale(max: string, min: string): az_batchai_cluster_auto_scale_command_builder {
        return new az_batchai_cluster_auto_scale_command_builder("az batchai cluster auto-scale", max, min);
    }

    /**
     * Create a cluster.
     *
     * Syntax:
     * ```
     * az batchai cluster create --name
     *                           --resource-group
     *                           --workspace
     *                           [--afs-mount-path]
     *                           [--afs-name]
     *                           [--bfs-mount-path]
     *                           [--bfs-name]
     *                           [--config-file]
     *                           [--custom-image]
     *                           [--generate-ssh-keys]
     *                           [--image]
     *                           [--max]
     *                           [--min]
     *                           [--nfs]
     *                           [--nfs-mount-path]
     *                           [--password]
     *                           [--setup-task]
     *                           [--setup-task-output]
     *                           [--ssh-key]
     *                           [--storage-account-key]
     *                           [--storage-account-name]
     *                           [--subnet]
     *                           [--subscription]
     *                           [--target]
     *                           [--use-auto-storage]
     *                           [--user-name]
     *                           [--vm-priority {dedicated, lowpriority}]
     *                           [--vm-size]
     * ```
     *
     * @param {string} name Name of cluster.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static create(name: string, resourceGroup: string, workspace: string): az_batchai_cluster_create_command_builder {
        return new az_batchai_cluster_create_command_builder("az batchai cluster create", name, resourceGroup, workspace);
    }

    /**
     * Delete a cluster.
     *
     * Syntax:
     * ```
     * az batchai cluster delete [--ids]
     *                           [--name]
     *                           [--no-wait]
     *                           [--resource-group]
     *                           [--subscription]
     *                           [--workspace]
     *                           [--yes]
     * ```
     */
    static delete(): az_batchai_cluster_delete_command_builder {
        return new az_batchai_cluster_delete_command_builder("az batchai cluster delete");
    }

    /**
     * List clusters.
     *
     * Syntax:
     * ```
     * az batchai cluster list --resource-group
     *                         --workspace
     *                         [--query-examples]
     *                         [--subscription]
     * ```
     *
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(resourceGroup: string, workspace: string): az_batchai_cluster_list_command_builder {
        return new az_batchai_cluster_list_command_builder("az batchai cluster list", resourceGroup, workspace);
    }

    /**
     * Resize a cluster.
     *
     * Syntax:
     * ```
     * az batchai cluster resize --target
     *                           [--ids]
     *                           [--name]
     *                           [--resource-group]
     *                           [--subscription]
     *                           [--workspace]
     * ```
     *
     * @param {string} target Target number of compute nodes.
     */
    static resize(target: string): az_batchai_cluster_resize_command_builder {
        return new az_batchai_cluster_resize_command_builder("az batchai cluster resize", target);
    }

    /**
     * Show information about a cluster.
     *
     * Syntax:
     * ```
     * az batchai cluster show [--ids]
     *                         [--name]
     *                         [--query-examples]
     *                         [--resource-group]
     *                         [--subscription]
     *                         [--workspace]
     * ```
     */
    static show(): az_batchai_cluster_show_command_builder {
        return new az_batchai_cluster_show_command_builder("az batchai cluster show");
    }
}

/** Commands to manage experiments. */
export class az_batchai_experiment {
    /**
     * Create an experiment.
     *
     * Syntax:
     * ```
     * az batchai experiment create --name
     *                              --resource-group
     *                              --workspace
     *                              [--subscription]
     * ```
     *
     * @param {string} name Name of experiment.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static create(name: string, resourceGroup: string, workspace: string): az_batchai_experiment_create_command_builder {
        return new az_batchai_experiment_create_command_builder("az batchai experiment create", name, resourceGroup, workspace);
    }

    /**
     * Delete an experiment.
     *
     * Syntax:
     * ```
     * az batchai experiment delete [--ids]
     *                              [--name]
     *                              [--no-wait]
     *                              [--resource-group]
     *                              [--subscription]
     *                              [--workspace]
     *                              [--yes]
     * ```
     */
    static delete(): az_batchai_experiment_delete_command_builder {
        return new az_batchai_experiment_delete_command_builder("az batchai experiment delete");
    }

    /**
     * List experiments.
     *
     * Syntax:
     * ```
     * az batchai experiment list --resource-group
     *                            --workspace
     *                            [--query-examples]
     *                            [--subscription]
     * ```
     *
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(resourceGroup: string, workspace: string): az_batchai_experiment_list_command_builder {
        return new az_batchai_experiment_list_command_builder("az batchai experiment list", resourceGroup, workspace);
    }

    /**
     * Show information about an experiment.
     *
     * Syntax:
     * ```
     * az batchai experiment show [--ids]
     *                            [--name]
     *                            [--query-examples]
     *                            [--resource-group]
     *                            [--subscription]
     *                            [--workspace]
     * ```
     */
    static show(): az_batchai_experiment_show_command_builder {
        return new az_batchai_experiment_show_command_builder("az batchai experiment show");
    }
}

/** Commands to manage file servers. */
export class az_batchai_file_server {
    /**
     * Create a file server.
     *
     * Syntax:
     * ```
     * az batchai file-server create --name
     *                               --resource-group
     *                               --workspace
     *                               [--caching-type {none, readonly, readwrite}]
     *                               [--config-file]
     *                               [--disk-count]
     *                               [--disk-size]
     *                               [--generate-ssh-keys]
     *                               [--no-wait]
     *                               [--password]
     *                               [--ssh-key]
     *                               [--storage-sku {Premium_LRS, Standard_LRS}]
     *                               [--subnet]
     *                               [--subscription]
     *                               [--user-name]
     *                               [--vm-size]
     * ```
     *
     * @param {string} name Name of file server.
     * @param {string} resourceGroup Name of resource group. You can configure a default value by setting up default workspace using `az batchai workspace set-default`.
     * @param {string} workspace Name or ARM ID of the workspace. You can configure default workspace using `az batchai workspace set-default`.
     */
    static create(name: string, resourceGroup: string, workspace: string): az_batchai_file_server_create_command_builder {
        return new az_batchai_file_server_create_command_builder("az batchai file-server create", name, resourceGroup, workspace);
    }

    /**
     * Delete a file server.
     *
     * Syntax:
     * ```
     * az batchai file-server delete [--ids]
     *                               [--name]
     *                               [--no-wait]
     *                               [--resource-group]
     *                               [--subscription]
     *                               [--workspace]
     *                               [--yes]
     * ```
     */
    static delete(): az_batchai_file_server_delete_command_builder {
        return new az_batchai_file_server_delete_command_builder("az batchai file-server delete");
    }

    /**
     * List file servers.
     *
     * Syntax:
     * ```
     * az batchai file-server list --resource-group
     *                             --workspace
     *                             [--query-examples]
     *                             [--subscription]
     * ```
     *
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(resourceGroup: string, workspace: string): az_batchai_file_server_list_command_builder {
        return new az_batchai_file_server_list_command_builder("az batchai file-server list", resourceGroup, workspace);
    }

    /**
     * Show information about a file server.
     *
     * Syntax:
     * ```
     * az batchai file-server show [--ids]
     *                             [--name]
     *                             [--query-examples]
     *                             [--resource-group]
     *                             [--subscription]
     *                             [--workspace]
     * ```
     */
    static show(): az_batchai_file_server_show_command_builder {
        return new az_batchai_file_server_show_command_builder("az batchai file-server show");
    }
}

/** Commands to list and stream files in job's output directories. */
export class az_batchai_job_file {
    /**
     * List job's output files in a directory with given id.
     *
     * Syntax:
     * ```
     * az batchai job file list --experiment
     *                          --job
     *                          --resource-group
     *                          --workspace
     *                          [--expiry]
     *                          [--output-directory-id]
     *                          [--path]
     *                          [--query-examples]
     *                          [--subscription]
     * ```
     *
     * @param {string} experiment Name of experiment.
     * @param {string} job Name of job.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(experiment: string, job: string, resourceGroup: string, workspace: string): az_batchai_job_file_list_command_builder {
        return new az_batchai_job_file_list_command_builder("az batchai job file list", experiment, job, resourceGroup, workspace);
    }

    /**
     * Stream the content of a file (similar to 'tail -f').
     *
     * Syntax:
     * ```
     * az batchai job file stream --experiment
     *                            --file-name
     *                            --job
     *                            --resource-group
     *                            --workspace
     *                            [--output-directory-id]
     *                            [--path]
     *                            [--subscription]
     * ```
     *
     * @param {string} experiment Name of experiment.
     * @param {string} fileName The name of the file to stream.
     * @param {string} job Name of job.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static stream(experiment: string, fileName: string, job: string, resourceGroup: string, workspace: string): az_batchai_job_file_stream_command_builder {
        return new az_batchai_job_file_stream_command_builder("az batchai job file stream", experiment, fileName, job, resourceGroup, workspace);
    }
}

/** Commands to work with nodes which executed a job. */
export class az_batchai_job_node {
    /**
     * Executes a command line on a cluster's node used to execute the job with optional ports forwarding.
     *
     * Syntax:
     * ```
     * az batchai job node exec --experiment
     *                          --job
     *                          --resource-group
     *                          --workspace
     *                          [--address]
     *                          [--exec]
     *                          [--node-id]
     *                          [--password]
     *                          [--ssh-private-key]
     *                          [--subscription]
     * ```
     *
     * @param {string} experiment Name of experiment.
     * @param {string} job Name of job.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static exec(experiment: string, job: string, resourceGroup: string, workspace: string): az_batchai_job_node_exec_command_builder {
        return new az_batchai_job_node_exec_command_builder("az batchai job node exec", experiment, job, resourceGroup, workspace);
    }

    /**
     * List remote login information for nodes which executed the job.
     *
     * Syntax:
     * ```
     * az batchai job node list --experiment
     *                          --job
     *                          --resource-group
     *                          --workspace
     *                          [--query-examples]
     *                          [--subscription]
     * ```
     *
     * @param {string} experiment Name of experiment.
     * @param {string} job Name of job.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(experiment: string, job: string, resourceGroup: string, workspace: string): az_batchai_job_node_list_command_builder {
        return new az_batchai_job_node_list_command_builder("az batchai job node list", experiment, job, resourceGroup, workspace);
    }
}

/** Commands to manage jobs. */
export class az_batchai_job {
    /**
     * Create a job.
     *
     * Syntax:
     * ```
     * az batchai job create --cluster
     *                       --config-file
     *                       --experiment
     *                       --name
     *                       --resource-group
     *                       --workspace
     *                       [--afs-mount-path]
     *                       [--afs-name]
     *                       [--bfs-mount-path]
     *                       [--bfs-name]
     *                       [--nfs]
     *                       [--nfs-mount-path]
     *                       [--storage-account-key]
     *                       [--storage-account-name]
     *                       [--subscription]
     * ```
     *
     * @param {string} cluster Name or ARM ID of the cluster to run the job. You need to provide ARM ID if the cluster belongs to a different workspace.
     * @param {string} configFile A path to a json file containing job create parameters (json representation of azure.mgmt.batchai.models.JobCreateParameters).
     * @param {string} experiment Name of experiment.
     * @param {string} name Name of job.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static create(cluster: string, configFile: string, experiment: string, name: string, resourceGroup: string, workspace: string): az_batchai_job_create_command_builder {
        return new az_batchai_job_create_command_builder("az batchai job create", cluster, configFile, experiment, name, resourceGroup, workspace);
    }

    /**
     * Delete a job.
     *
     * Syntax:
     * ```
     * az batchai job delete [--experiment]
     *                       [--ids]
     *                       [--name]
     *                       [--no-wait]
     *                       [--resource-group]
     *                       [--subscription]
     *                       [--workspace]
     *                       [--yes]
     * ```
     */
    static delete(): az_batchai_job_delete_command_builder {
        return new az_batchai_job_delete_command_builder("az batchai job delete");
    }

    /**
     * List jobs.
     *
     * Syntax:
     * ```
     * az batchai job list --experiment
     *                     --resource-group
     *                     --workspace
     *                     [--query-examples]
     *                     [--subscription]
     * ```
     *
     * @param {string} experiment Name of experiment.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static list(experiment: string, resourceGroup: string, workspace: string): az_batchai_job_list_command_builder {
        return new az_batchai_job_list_command_builder("az batchai job list", experiment, resourceGroup, workspace);
    }

    /**
     * Show information about a job.
     *
     * Syntax:
     * ```
     * az batchai job show [--experiment]
     *                     [--ids]
     *                     [--name]
     *                     [--query-examples]
     *                     [--resource-group]
     *                     [--subscription]
     *                     [--workspace]
     * ```
     */
    static show(): az_batchai_job_show_command_builder {
        return new az_batchai_job_show_command_builder("az batchai job show");
    }

    /**
     * Terminate a job.
     *
     * Syntax:
     * ```
     * az batchai job terminate [--experiment]
     *                          [--ids]
     *                          [--name]
     *                          [--no-wait]
     *                          [--resource-group]
     *                          [--subscription]
     *                          [--workspace]
     *                          [--yes]
     * ```
     */
    static terminate(): az_batchai_job_terminate_command_builder {
        return new az_batchai_job_terminate_command_builder("az batchai job terminate");
    }

    /**
     * Waits for specified job completion and setups the exit code to the job's exit code.
     *
     * Syntax:
     * ```
     * az batchai job wait [--experiment]
     *                     [--ids]
     *                     [--interval]
     *                     [--name]
     *                     [--resource-group]
     *                     [--subscription]
     *                     [--workspace]
     * ```
     */
    static wait(): az_batchai_job_wait_command_builder {
        return new az_batchai_job_wait_command_builder("az batchai job wait");
    }
}

/** Commands to manage workspaces. */
export class az_batchai_workspace {
    /**
     * Create a workspace.
     *
     * Syntax:
     * ```
     * az batchai workspace create --resource-group
     *                             --workspace
     *                             [--location]
     *                             [--subscription]
     * ```
     *
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     * @param {string} workspace Name of workspace.
     */
    static create(resourceGroup: string, workspace: string): az_batchai_workspace_create_command_builder {
        return new az_batchai_workspace_create_command_builder("az batchai workspace create", resourceGroup, workspace);
    }

    /**
     * Delete a workspace.
     *
     * Syntax:
     * ```
     * az batchai workspace delete [--ids]
     *                             [--no-wait]
     *                             [--resource-group]
     *                             [--subscription]
     *                             [--workspace]
     *                             [--yes]
     * ```
     */
    static delete(): az_batchai_workspace_delete_command_builder {
        return new az_batchai_workspace_delete_command_builder("az batchai workspace delete");
    }

    /**
     * List workspaces.
     *
     * Syntax:
     * ```
     * az batchai workspace list [--query-examples]
     *                           [--resource-group]
     *                           [--subscription]
     * ```
     */
    static list(): az_batchai_workspace_list_command_builder {
        return new az_batchai_workspace_list_command_builder("az batchai workspace list");
    }

    /**
     * Show information about a workspace.
     *
     * Syntax:
     * ```
     * az batchai workspace show [--ids]
     *                           [--query-examples]
     *                           [--resource-group]
     *                           [--subscription]
     *                           [--workspace]
     * ```
     */
    static show(): az_batchai_workspace_show_command_builder {
        return new az_batchai_workspace_show_command_builder("az batchai workspace show");
    }
}

/** Manage Batch AI resources. */
export class az_batchai {
    /**
     * Gets the current usage information as well as limits for Batch AI resources for given location.
     *
     * Syntax:
     * ```
     * az batchai list-usages --location
     *                        [--subscription]
     * ```
     *
     * @param {string} location Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`.
     */
    static list_usages(location: string): az_batchai_list_usages_command_builder {
        return new az_batchai_list_usages_command_builder("az batchai list-usages", location);
    }
}

/**
 * List files generated by the cluster's node setup task.
 *
 * Syntax:
 * ```
 * az batchai cluster file list --cluster
 *                              --resource-group
 *                              --workspace
 *                              [--expiry]
 *                              [--path]
 *                              [--query-examples]
 *                              [--subscription]
 * ```
 *
 * @param {string} cluster Name of cluster.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_cluster_file_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, cluster: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.cluster(cluster)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of cluster. */
    cluster(value: string): az_batchai_cluster_file_list_command_builder {
        this.setFlag("--cluster", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_file_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_file_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Time in minutes for how long generated download URLs should remain valid. */
    expiry(value: string): az_batchai_cluster_file_list_command_builder {
        this.setFlag("--expiry", value);
        return this;
    }

    /** Relative path of a subfolder inside of the node setup task output directory. */
    path(value: string): az_batchai_cluster_file_list_command_builder {
        this.setFlag("--path", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_cluster_file_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_file_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Executes a command line on a cluster's node with optional ports forwarding.
 *
 * Syntax:
 * ```
 * az batchai cluster node exec --cluster
 *                              --resource-group
 *                              --workspace
 *                              [--address]
 *                              [--exec]
 *                              [--node-id]
 *                              [--password]
 *                              [--ssh-private-key]
 *                              [--subscription]
 * ```
 *
 * @param {string} cluster Name of cluster.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_cluster_node_exec_command_builder extends CommandBuilder {
    constructor(commandPath: string, cluster: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.cluster(cluster)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of cluster. */
    cluster(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--cluster", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side. e.g. -L 8080:localhost:8080. */
    address(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--address", value);
        return this;
    }

    /** Optional command line to be executed on the node. If not provided, the command will perform ports forwarding only. */
    exec(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--exec", value);
        return this;
    }

    /** ID of the node to forward the ports to. If not provided, the command will be executed on the first available node. */
    nodeId(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--node-id", value);
        return this;
    }

    /** Optional password to establish SSH connection. */
    password(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--password", value);
        return this;
    }

    /** Optional SSH private key path to establish SSH connection. If omitted, the default SSH private key will be used. */
    sshPrivateKey(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--ssh-private-key", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_node_exec_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * List remote login information for cluster's nodes.
 *
 * Syntax:
 * ```
 * az batchai cluster node list --cluster
 *                              --resource-group
 *                              --workspace
 *                              [--query-examples]
 *                              [--subscription]
 * ```
 *
 * @param {string} cluster Name of cluster.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_cluster_node_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, cluster: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.cluster(cluster)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of cluster. */
    cluster(value: string): az_batchai_cluster_node_list_command_builder {
        this.setFlag("--cluster", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_node_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_node_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_cluster_node_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_node_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Set auto-scale parameters for a cluster.
 *
 * Syntax:
 * ```
 * az batchai cluster auto-scale --max
 *                               --min
 *                               [--ids]
 *                               [--name]
 *                               [--resource-group]
 *                               [--subscription]
 *                               [--workspace]
 * ```
 *
 * @param {string} max Maximum number of nodes.
 * @param {string} min Minimum number of nodes.
 */
class az_batchai_cluster_auto_scale_command_builder extends CommandBuilder {
    constructor(commandPath: string, max: string, min: string) {
        super(commandPath);
        this.max(max)
        this.min(min)
    }

    /** Maximum number of nodes. */
    max(value: string): az_batchai_cluster_auto_scale_command_builder {
        this.setFlag("--max", value);
        return this;
    }

    /** Minimum number of nodes. */
    min(value: string): az_batchai_cluster_auto_scale_command_builder {
        this.setFlag("--min", value);
        return this;
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_cluster_auto_scale_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of cluster. */
    name(value: string): az_batchai_cluster_auto_scale_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_auto_scale_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_auto_scale_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_auto_scale_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * Create a cluster.
 *
 * Syntax:
 * ```
 * az batchai cluster create --name
 *                           --resource-group
 *                           --workspace
 *                           [--afs-mount-path]
 *                           [--afs-name]
 *                           [--bfs-mount-path]
 *                           [--bfs-name]
 *                           [--config-file]
 *                           [--custom-image]
 *                           [--generate-ssh-keys]
 *                           [--image]
 *                           [--max]
 *                           [--min]
 *                           [--nfs]
 *                           [--nfs-mount-path]
 *                           [--password]
 *                           [--setup-task]
 *                           [--setup-task-output]
 *                           [--ssh-key]
 *                           [--storage-account-key]
 *                           [--storage-account-name]
 *                           [--subnet]
 *                           [--subscription]
 *                           [--target]
 *                           [--use-auto-storage]
 *                           [--user-name]
 *                           [--vm-priority {dedicated, lowpriority}]
 *                           [--vm-size]
 * ```
 *
 * @param {string} name Name of cluster.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_cluster_create_command_builder extends CommandBuilder {
    constructor(commandPath: string, name: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.name(name)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of cluster. */
    name(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Relative mount path for Azure File share. The file share will be available at $AZ_BATCHAI_MOUNT_ROOT/<relative_mount_path> folder. */
    afsMountPath(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--afs-mount-path", value);
        return this;
    }

    /** Name of Azure File Share to be mounted on each cluster node. Must be used in conjunction with --storage-account-name. Multiple shares can be mounted using configuration file (see --config-file option). */
    afsName(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--afs-name", value);
        return this;
    }

    /** Relative mount path for Azure Storage container. The container will be available at $AZ_BATCHAI_MOUNT_ROOT/<relative_mount_path> folder. */
    bfsMountPath(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--bfs-mount-path", value);
        return this;
    }

    /** Name of Azure Storage container to be mounted on each cluster node. Must be used in conjunction with --storage-account-name. Multiple containers can be mounted using configuration file (see --config-file option). */
    bfsName(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--bfs-name", value);
        return this;
    }

    /** A path to a json file containing cluster create parameters (json representation of azure.mgmt.batchai.models.ClusterCreateParameters). */
    configFile(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--config-file", value);
        return this;
    }

    /** ARM ID of a virtual machine image to be used for nodes creation. Note, you need to provide --image containing information about the base image used for this image creation. */
    customImage(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--custom-image", value);
        return this;
    }

    /** Generate SSH public and private key files in ~/.ssh directory (if missing). */
    generateSshKeys(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--generate-ssh-keys", value);
        return this;
    }

    /** Operation system image for cluster nodes. The value may contain an alias (UbuntuLTS, UbuntuDSVM) or specify image details in the form "publisher:offer:sku:version". If image configuration is not provided via command line or configuration file, Batch AI will choose default OS image. */
    image(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--image", value);
        return this;
    }

    /** Max nodes count for the auto-scale cluster. */
    max(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--max", value);
        return this;
    }

    /** Min nodes count for the auto-scale cluster. */
    min(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--min", value);
        return this;
    }

    /** Name or ARM ID of a file server to be mounted on each cluster node. You need to provide full ARM ID if the file server belongs to a different workspace. Multiple NFS can be mounted using configuration file (see --config-file option). */
    nfs(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--nfs", value);
        return this;
    }

    /** Relative mount path for NFS. The NFS will be available at $AZ_BATCHAI_MOUNT_ROOT/<relative_mount_path> folder. */
    nfsMountPath(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--nfs-mount-path", value);
        return this;
    }

    /** Optional password for the admin user account to be created on each compute node. */
    password(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--password", value);
        return this;
    }

    /** A command line which should be executed on each compute node when it's got allocated or rebooted. The task is executed in a bash subshell under root account. */
    setupTask(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--setup-task", value);
        return this;
    }

    /** Directory path to store where setup-task's logs. Note, Batch AI will create several helper directories under this path. The created directories are reported as stdOutErrPathSuffix by 'az cluster show' command. */
    setupTaskOutput(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--setup-task-output", value);
        return this;
    }

    /** Optional SSH public key value or path. If ommited and no password specified, default SSH key (~/.ssh/id_rsa.pub) will be used. */
    sshKey(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--ssh-key", value);
        return this;
    }

    /** Storage account key. Required if the storage account belongs to a different subscription. Can be specified using AZURE_BATCHAI_STORAGE_KEY environment variable. */
    storageAccountKey(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--storage-account-key", value);
        return this;
    }

    /** Storage account name for Azure File Shares and/or Azure Storage Containers to be mounted on each cluster node. Can be specified using AZURE_BATCHAI_STORAGE_ACCOUNT environment variable. */
    storageAccountName(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--storage-account-name", value);
        return this;
    }

    /** ARM ID of a virtual network subnet to put the cluster in. */
    subnet(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--subnet", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Number of nodes which should be allocated immediately after cluster creation. If the cluster is in auto-scale mode, BatchAI can change the number of nodes later based on number of running and queued jobs. */
    target(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--target", value);
        return this;
    }

    /** If provided, the command will create a storage account in a new or existing resource group named "batchaiautostorage". It will also create Azure File Share with name "batchaishare", Azure Blob Container with name "batchaicontainer". The File Share and Blob Container will be mounted on each cluster node at $AZ_BATCHAI_MOUNT_ROOT/autoafs and $AZ_BATCHAI_MOUNT_ROOT/autobfs. If the resource group already exists and contains an approapriate storage account belonging to the same region as cluster, this command will reuse existing storage account. */
    useAutoStorage(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--use-auto-storage", value);
        return this;
    }

    /** Name of admin user account to be created on each compute node. If the value is not provided and no user configuration is provided in the config file, current user's name will be used. */
    userName(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--user-name", value);
        return this;
    }

    /** VM priority. */
    vmPriority(value: 'dedicated' | 'lowpriority'): az_batchai_cluster_create_command_builder {
        this.setFlag("--vm-priority", value);
        return this;
    }

    /** VM size for cluster nodes (e.g. Standard_NC6 for 1 GPU node). */
    vmSize(value: string): az_batchai_cluster_create_command_builder {
        this.setFlag("--vm-size", value);
        return this;
    }
}

/**
 * Delete a cluster.
 *
 * Syntax:
 * ```
 * az batchai cluster delete [--ids]
 *                           [--name]
 *                           [--no-wait]
 *                           [--resource-group]
 *                           [--subscription]
 *                           [--workspace]
 *                           [--yes]
 * ```
 */
class az_batchai_cluster_delete_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_cluster_delete_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of cluster. */
    name(value: string): az_batchai_cluster_delete_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Do not wait for the long-running operation to finish. */
    noWait(value: string): az_batchai_cluster_delete_command_builder {
        this.setFlag("--no-wait", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_delete_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_delete_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_delete_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Do not prompt for confirmation. */
    yes(value: string): az_batchai_cluster_delete_command_builder {
        this.setFlag("--yes", value);
        return this;
    }
}

/**
 * List clusters.
 *
 * Syntax:
 * ```
 * az batchai cluster list --resource-group
 *                         --workspace
 *                         [--query-examples]
 *                         [--subscription]
 * ```
 *
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_cluster_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_cluster_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Resize a cluster.
 *
 * Syntax:
 * ```
 * az batchai cluster resize --target
 *                           [--ids]
 *                           [--name]
 *                           [--resource-group]
 *                           [--subscription]
 *                           [--workspace]
 * ```
 *
 * @param {string} target Target number of compute nodes.
 */
class az_batchai_cluster_resize_command_builder extends CommandBuilder {
    constructor(commandPath: string, target: string) {
        super(commandPath);
        this.target(target)
    }

    /** Target number of compute nodes. */
    target(value: string): az_batchai_cluster_resize_command_builder {
        this.setFlag("--target", value);
        return this;
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_cluster_resize_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of cluster. */
    name(value: string): az_batchai_cluster_resize_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_resize_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_resize_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_resize_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * Show information about a cluster.
 *
 * Syntax:
 * ```
 * az batchai cluster show [--ids]
 *                         [--name]
 *                         [--query-examples]
 *                         [--resource-group]
 *                         [--subscription]
 *                         [--workspace]
 * ```
 */
class az_batchai_cluster_show_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_cluster_show_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of cluster. */
    name(value: string): az_batchai_cluster_show_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_cluster_show_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_cluster_show_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_cluster_show_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_cluster_show_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * Create an experiment.
 *
 * Syntax:
 * ```
 * az batchai experiment create --name
 *                              --resource-group
 *                              --workspace
 *                              [--subscription]
 * ```
 *
 * @param {string} name Name of experiment.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_experiment_create_command_builder extends CommandBuilder {
    constructor(commandPath: string, name: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.name(name)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of experiment. */
    name(value: string): az_batchai_experiment_create_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_experiment_create_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_experiment_create_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_experiment_create_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Delete an experiment.
 *
 * Syntax:
 * ```
 * az batchai experiment delete [--ids]
 *                              [--name]
 *                              [--no-wait]
 *                              [--resource-group]
 *                              [--subscription]
 *                              [--workspace]
 *                              [--yes]
 * ```
 */
class az_batchai_experiment_delete_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_experiment_delete_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of experiment. */
    name(value: string): az_batchai_experiment_delete_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Do not wait for the long-running operation to finish. */
    noWait(value: string): az_batchai_experiment_delete_command_builder {
        this.setFlag("--no-wait", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_experiment_delete_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_experiment_delete_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_experiment_delete_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Do not prompt for confirmation. */
    yes(value: string): az_batchai_experiment_delete_command_builder {
        this.setFlag("--yes", value);
        return this;
    }
}

/**
 * List experiments.
 *
 * Syntax:
 * ```
 * az batchai experiment list --resource-group
 *                            --workspace
 *                            [--query-examples]
 *                            [--subscription]
 * ```
 *
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_experiment_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_experiment_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_experiment_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_experiment_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_experiment_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Show information about an experiment.
 *
 * Syntax:
 * ```
 * az batchai experiment show [--ids]
 *                            [--name]
 *                            [--query-examples]
 *                            [--resource-group]
 *                            [--subscription]
 *                            [--workspace]
 * ```
 */
class az_batchai_experiment_show_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_experiment_show_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of experiment. */
    name(value: string): az_batchai_experiment_show_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_experiment_show_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_experiment_show_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_experiment_show_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_experiment_show_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * Create a file server.
 *
 * Syntax:
 * ```
 * az batchai file-server create --name
 *                               --resource-group
 *                               --workspace
 *                               [--caching-type {none, readonly, readwrite}]
 *                               [--config-file]
 *                               [--disk-count]
 *                               [--disk-size]
 *                               [--generate-ssh-keys]
 *                               [--no-wait]
 *                               [--password]
 *                               [--ssh-key]
 *                               [--storage-sku {Premium_LRS, Standard_LRS}]
 *                               [--subnet]
 *                               [--subscription]
 *                               [--user-name]
 *                               [--vm-size]
 * ```
 *
 * @param {string} name Name of file server.
 * @param {string} resourceGroup Name of resource group. You can configure a default value by setting up default workspace using `az batchai workspace set-default`.
 * @param {string} workspace Name or ARM ID of the workspace. You can configure default workspace using `az batchai workspace set-default`.
 */
class az_batchai_file_server_create_command_builder extends CommandBuilder {
    constructor(commandPath: string, name: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.name(name)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of file server. */
    name(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Name of resource group. You can configure a default value by setting up default workspace using `az batchai workspace set-default`. */
    resourceGroup(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ARM ID of the workspace. You can configure default workspace using `az batchai workspace set-default`. */
    workspace(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Caching type for premium disks. If not provided via command line or in configuration file, no caching will be used. */
    cachingType(value: 'none' | 'readonly' | 'readwrite'): az_batchai_file_server_create_command_builder {
        this.setFlag("--caching-type", value);
        return this;
    }

    /** A path to a json file containing file server create parameters (json representation of azure.mgmt.batchai.models.FileServerCreateParameters). Note, parameters given via command line will overwrite parameters specified in the configuration file. */
    configFile(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--config-file", value);
        return this;
    }

    /** Number of disks. */
    diskCount(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--disk-count", value);
        return this;
    }

    /** Disk size in Gb. */
    diskSize(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--disk-size", value);
        return this;
    }

    /** Generate SSH public and private key files in ~/.ssh directory (if missing). */
    generateSshKeys(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--generate-ssh-keys", value);
        return this;
    }

    /** Do not wait for the long-running operation to finish. */
    noWait(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--no-wait", value);
        return this;
    }

    /** Optional password for the admin user created on the NFS node. */
    password(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--password", value);
        return this;
    }

    /** Optional SSH public key value or path. If ommited and no password specified, default SSH key (~/.ssh/id_rsa.pub) will be used. */
    sshKey(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--ssh-key", value);
        return this;
    }

    /** The sku of storage account to persist VM. */
    storageSku(value: 'Premium_LRS' | 'Standard_LRS'): az_batchai_file_server_create_command_builder {
        this.setFlag("--storage-sku", value);
        return this;
    }

    /** ARM ID of a virtual network subnet to put the file server in. If not provided via command line or in the configuration file, Batch AI will create a new virtual network and subnet under your subscription. */
    subnet(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--subnet", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of admin user account to be created on NFS node. If the value is not provided and no user configuration is provided in the config file, current user's name will be used. */
    userName(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--user-name", value);
        return this;
    }

    /** VM size. */
    vmSize(value: string): az_batchai_file_server_create_command_builder {
        this.setFlag("--vm-size", value);
        return this;
    }
}

/**
 * Delete a file server.
 *
 * Syntax:
 * ```
 * az batchai file-server delete [--ids]
 *                               [--name]
 *                               [--no-wait]
 *                               [--resource-group]
 *                               [--subscription]
 *                               [--workspace]
 *                               [--yes]
 * ```
 */
class az_batchai_file_server_delete_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_file_server_delete_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of file server. */
    name(value: string): az_batchai_file_server_delete_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Do not wait for the long-running operation to finish. */
    noWait(value: string): az_batchai_file_server_delete_command_builder {
        this.setFlag("--no-wait", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_file_server_delete_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_file_server_delete_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_file_server_delete_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Do not prompt for confirmation. */
    yes(value: string): az_batchai_file_server_delete_command_builder {
        this.setFlag("--yes", value);
        return this;
    }
}

/**
 * List file servers.
 *
 * Syntax:
 * ```
 * az batchai file-server list --resource-group
 *                             --workspace
 *                             [--query-examples]
 *                             [--subscription]
 * ```
 *
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_file_server_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_file_server_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_file_server_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_file_server_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_file_server_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Show information about a file server.
 *
 * Syntax:
 * ```
 * az batchai file-server show [--ids]
 *                             [--name]
 *                             [--query-examples]
 *                             [--resource-group]
 *                             [--subscription]
 *                             [--workspace]
 * ```
 */
class az_batchai_file_server_show_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_file_server_show_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of file server. */
    name(value: string): az_batchai_file_server_show_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_file_server_show_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_file_server_show_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_file_server_show_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_file_server_show_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * List job's output files in a directory with given id.
 *
 * Syntax:
 * ```
 * az batchai job file list --experiment
 *                          --job
 *                          --resource-group
 *                          --workspace
 *                          [--expiry]
 *                          [--output-directory-id]
 *                          [--path]
 *                          [--query-examples]
 *                          [--subscription]
 * ```
 *
 * @param {string} experiment Name of experiment.
 * @param {string} job Name of job.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_job_file_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, experiment: string, job: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.experiment(experiment)
        this.job(job)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** Name of job. */
    job(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--job", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Time in minutes for how long generated download URL should remain valid. */
    expiry(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--expiry", value);
        return this;
    }

    /** The Id of the job's output directory (as specified by "id" element in outputDirectories collection in the job create parameters). */
    outputDirectoryId(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--output-directory-id", value);
        return this;
    }

    /** Relative path in the given output directory. */
    path(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--path", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_file_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Stream the content of a file (similar to 'tail -f').
 *
 * Syntax:
 * ```
 * az batchai job file stream --experiment
 *                            --file-name
 *                            --job
 *                            --resource-group
 *                            --workspace
 *                            [--output-directory-id]
 *                            [--path]
 *                            [--subscription]
 * ```
 *
 * @param {string} experiment Name of experiment.
 * @param {string} fileName The name of the file to stream.
 * @param {string} job Name of job.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_job_file_stream_command_builder extends CommandBuilder {
    constructor(commandPath: string, experiment: string, fileName: string, job: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.experiment(experiment)
        this.fileName(fileName)
        this.job(job)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** The name of the file to stream. */
    fileName(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--file-name", value);
        return this;
    }

    /** Name of job. */
    job(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--job", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** The Id of the job's output directory (as specified by "id" element in outputDirectories collection in the job create parameters). */
    outputDirectoryId(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--output-directory-id", value);
        return this;
    }

    /** Relative path in the given output directory. */
    path(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--path", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_file_stream_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Executes a command line on a cluster's node used to execute the job with optional ports forwarding.
 *
 * Syntax:
 * ```
 * az batchai job node exec --experiment
 *                          --job
 *                          --resource-group
 *                          --workspace
 *                          [--address]
 *                          [--exec]
 *                          [--node-id]
 *                          [--password]
 *                          [--ssh-private-key]
 *                          [--subscription]
 * ```
 *
 * @param {string} experiment Name of experiment.
 * @param {string} job Name of job.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_job_node_exec_command_builder extends CommandBuilder {
    constructor(commandPath: string, experiment: string, job: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.experiment(experiment)
        this.job(job)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** Name of job. */
    job(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--job", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side. e.g. -L 8080:localhost:8080. */
    address(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--address", value);
        return this;
    }

    /** Optional command line to be executed on the node. If not provided, the command will perform ports forwarding only. */
    exec(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--exec", value);
        return this;
    }

    /** ID of the node to forward the ports to. If not provided, the command will be executed on the first available node. */
    nodeId(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--node-id", value);
        return this;
    }

    /** Optional password to establish SSH connection. */
    password(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--password", value);
        return this;
    }

    /** Optional SSH private key path to establish SSH connection. If omitted, the default SSH private key will be used. */
    sshPrivateKey(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--ssh-private-key", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_node_exec_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * List remote login information for nodes which executed the job.
 *
 * Syntax:
 * ```
 * az batchai job node list --experiment
 *                          --job
 *                          --resource-group
 *                          --workspace
 *                          [--query-examples]
 *                          [--subscription]
 * ```
 *
 * @param {string} experiment Name of experiment.
 * @param {string} job Name of job.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_job_node_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, experiment: string, job: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.experiment(experiment)
        this.job(job)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_node_list_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** Name of job. */
    job(value: string): az_batchai_job_node_list_command_builder {
        this.setFlag("--job", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_node_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_node_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_job_node_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_node_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Create a job.
 *
 * Syntax:
 * ```
 * az batchai job create --cluster
 *                       --config-file
 *                       --experiment
 *                       --name
 *                       --resource-group
 *                       --workspace
 *                       [--afs-mount-path]
 *                       [--afs-name]
 *                       [--bfs-mount-path]
 *                       [--bfs-name]
 *                       [--nfs]
 *                       [--nfs-mount-path]
 *                       [--storage-account-key]
 *                       [--storage-account-name]
 *                       [--subscription]
 * ```
 *
 * @param {string} cluster Name or ARM ID of the cluster to run the job. You need to provide ARM ID if the cluster belongs to a different workspace.
 * @param {string} configFile A path to a json file containing job create parameters (json representation of azure.mgmt.batchai.models.JobCreateParameters).
 * @param {string} experiment Name of experiment.
 * @param {string} name Name of job.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_job_create_command_builder extends CommandBuilder {
    constructor(commandPath: string, cluster: string, configFile: string, experiment: string, name: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.cluster(cluster)
        this.configFile(configFile)
        this.experiment(experiment)
        this.name(name)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name or ARM ID of the cluster to run the job. You need to provide ARM ID if the cluster belongs to a different workspace. */
    cluster(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--cluster", value);
        return this;
    }

    /** A path to a json file containing job create parameters (json representation of azure.mgmt.batchai.models.JobCreateParameters). */
    configFile(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--config-file", value);
        return this;
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** Name of job. */
    name(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Relative mount path for Azure File Share. The File Share will be available at $AZ_BATCHAI_JOB_MOUNT_ROOT/<relative_mount_path> folder. */
    afsMountPath(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--afs-mount-path", value);
        return this;
    }

    /** Name of Azure File Share to mount during the job execution. The File Share will be mounted only on the nodes which are executing the job. Must be used in conjunction with --storage-account-name.  Multiple shares can be mounted using configuration file (see --config-file option). */
    afsName(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--afs-name", value);
        return this;
    }

    /** Relative mount path for Azure Storage Blob Container. The container will be available at $AZ_BATCHAI_JOB_MOUNT_ROOT/<relative_mount_path> folder. */
    bfsMountPath(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--bfs-mount-path", value);
        return this;
    }

    /** Name of Azure Storage Blob Container to mount during the job execution. The container will be mounted only on the nodes which are executing the job. Must be used in conjunction with --storage-account-name. Multiple containers can be mounted using configuration file (see --config-file option). */
    bfsName(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--bfs-name", value);
        return this;
    }

    /** Name or ARM ID of the file server to be mounted during the job execution. You need to provide ARM ID if the file server belongs to a different workspace. You can configure multiple file servers using job's  configuration file. */
    nfs(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--nfs", value);
        return this;
    }

    /** Relative mount path for NFS. The NFS will be available at $AZ_BATCHAI_JOB_MOUNT_ROOT/<relative_mount_path> folder. */
    nfsMountPath(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--nfs-mount-path", value);
        return this;
    }

    /** Storage account key. Required if the storage account belongs to a different subscription. Can be specified using AZURE_BATCHAI_STORAGE_KEY environment variable. */
    storageAccountKey(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--storage-account-key", value);
        return this;
    }

    /** Storage account name for Azure File Shares and/or Azure Storage Containers to be mounted on each cluster node. Can be specified using AZURE_BATCHAI_STORAGE_ACCOUNT environment variable. */
    storageAccountName(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--storage-account-name", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_create_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Delete a job.
 *
 * Syntax:
 * ```
 * az batchai job delete [--experiment]
 *                       [--ids]
 *                       [--name]
 *                       [--no-wait]
 *                       [--resource-group]
 *                       [--subscription]
 *                       [--workspace]
 *                       [--yes]
 * ```
 */
class az_batchai_job_delete_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of job. */
    name(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Do not wait for the long-running operation to finish. */
    noWait(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--no-wait", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Do not prompt for confirmation. */
    yes(value: string): az_batchai_job_delete_command_builder {
        this.setFlag("--yes", value);
        return this;
    }
}

/**
 * List jobs.
 *
 * Syntax:
 * ```
 * az batchai job list --experiment
 *                     --resource-group
 *                     --workspace
 *                     [--query-examples]
 *                     [--subscription]
 * ```
 *
 * @param {string} experiment Name of experiment.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_job_list_command_builder extends CommandBuilder {
    constructor(commandPath: string, experiment: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.experiment(experiment)
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_list_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_list_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_job_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Show information about a job.
 *
 * Syntax:
 * ```
 * az batchai job show [--experiment]
 *                     [--ids]
 *                     [--name]
 *                     [--query-examples]
 *                     [--resource-group]
 *                     [--subscription]
 *                     [--workspace]
 * ```
 */
class az_batchai_job_show_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_show_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_job_show_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of job. */
    name(value: string): az_batchai_job_show_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_job_show_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_show_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_show_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_show_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * Terminate a job.
 *
 * Syntax:
 * ```
 * az batchai job terminate [--experiment]
 *                          [--ids]
 *                          [--name]
 *                          [--no-wait]
 *                          [--resource-group]
 *                          [--subscription]
 *                          [--workspace]
 *                          [--yes]
 * ```
 */
class az_batchai_job_terminate_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Name of job. */
    name(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Do not wait for the long-running operation to finish. */
    noWait(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--no-wait", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Do not prompt for confirmation. */
    yes(value: string): az_batchai_job_terminate_command_builder {
        this.setFlag("--yes", value);
        return this;
    }
}

/**
 * Waits for specified job completion and setups the exit code to the job's exit code.
 *
 * Syntax:
 * ```
 * az batchai job wait [--experiment]
 *                     [--ids]
 *                     [--interval]
 *                     [--name]
 *                     [--resource-group]
 *                     [--subscription]
 *                     [--workspace]
 * ```
 */
class az_batchai_job_wait_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** Name of experiment. */
    experiment(value: string): az_batchai_job_wait_command_builder {
        this.setFlag("--experiment", value);
        return this;
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_job_wait_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Polling interval in sec. */
    interval(value: string): az_batchai_job_wait_command_builder {
        this.setFlag("--interval", value);
        return this;
    }

    /** Name of job. */
    name(value: string): az_batchai_job_wait_command_builder {
        this.setFlag("--name", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_job_wait_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_job_wait_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_job_wait_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * Create a workspace.
 *
 * Syntax:
 * ```
 * az batchai workspace create --resource-group
 *                             --workspace
 *                             [--location]
 *                             [--subscription]
 * ```
 *
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 * @param {string} workspace Name of workspace.
 */
class az_batchai_workspace_create_command_builder extends CommandBuilder {
    constructor(commandPath: string, resourceGroup: string, workspace: string) {
        super(commandPath);
        this.resourceGroup(resourceGroup)
        this.workspace(workspace)
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_workspace_create_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_workspace_create_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Location of the workspace. If omitted, the location of the resource group will be used. */
    location(value: string): az_batchai_workspace_create_command_builder {
        this.setFlag("--location", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_workspace_create_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Delete a workspace.
 *
 * Syntax:
 * ```
 * az batchai workspace delete [--ids]
 *                             [--no-wait]
 *                             [--resource-group]
 *                             [--subscription]
 *                             [--workspace]
 *                             [--yes]
 * ```
 */
class az_batchai_workspace_delete_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_workspace_delete_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Do not wait for the long-running operation to finish. */
    noWait(value: string): az_batchai_workspace_delete_command_builder {
        this.setFlag("--no-wait", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_workspace_delete_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_workspace_delete_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_workspace_delete_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }

    /** Do not prompt for confirmation. */
    yes(value: string): az_batchai_workspace_delete_command_builder {
        this.setFlag("--yes", value);
        return this;
    }
}

/**
 * List workspaces.
 *
 * Syntax:
 * ```
 * az batchai workspace list [--query-examples]
 *                           [--resource-group]
 *                           [--subscription]
 * ```
 */
class az_batchai_workspace_list_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_workspace_list_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_workspace_list_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_workspace_list_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}

/**
 * Show information about a workspace.
 *
 * Syntax:
 * ```
 * az batchai workspace show [--ids]
 *                           [--query-examples]
 *                           [--resource-group]
 *                           [--subscription]
 *                           [--workspace]
 * ```
 */
class az_batchai_workspace_show_command_builder extends CommandBuilder {
    constructor(commandPath: string) {
        super(commandPath);
    }

    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    ids(value: string): az_batchai_workspace_show_command_builder {
        this.setFlag("--ids", value);
        return this;
    }

    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    queryExamples(value: string): az_batchai_workspace_show_command_builder {
        this.setFlag("--query-examples", value);
        return this;
    }

    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    resourceGroup(value: string): az_batchai_workspace_show_command_builder {
        this.setFlag("--resource-group", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_workspace_show_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }

    /** Name of workspace. */
    workspace(value: string): az_batchai_workspace_show_command_builder {
        this.setFlag("--workspace", value);
        return this;
    }
}

/**
 * Gets the current usage information as well as limits for Batch AI resources for given location.
 *
 * Syntax:
 * ```
 * az batchai list-usages --location
 *                        [--subscription]
 * ```
 *
 * @param {string} location Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`.
 */
class az_batchai_list_usages_command_builder extends CommandBuilder {
    constructor(commandPath: string, location: string) {
        super(commandPath);
        this.location(location)
    }

    /** Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`. */
    location(value: string): az_batchai_list_usages_command_builder {
        this.setFlag("--location", value);
        return this;
    }

    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    subscription(value: string): az_batchai_list_usages_command_builder {
        this.setFlag("--subscription", value);
        return this;
    }
}
