"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var base_1 = require("../base");
/** Manage the properties of a storage account's blob service. */
var az_storage_account_blob_service_properties = /** @class */ (function () {
    function az_storage_account_blob_service_properties() {
    }
    /**
     * Show the properties of a storage account's blob service.
     *
     * Syntax:
     * ```
     * az storage account blob-service-properties show --account-name
     *                                                 [--query-examples]
     *                                                 [--resource-group]
     *                                                 [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_blob_service_properties.show = function (accountName) {
        return new az_storage_account_blob_service_properties_show_command_builder("az storage account blob-service-properties show", 'az_storage_account_blob_service_properties_show_command_result', accountName);
    };
    /**
     * Update the properties of a storage account's blob service.
     *
     * Syntax:
     * ```
     * az storage account blob-service-properties update --account-name
     *                                                   [--add]
     *                                                   [--container-days]
     *                                                   [--container-retention {false, true}]
     *                                                   [--delete-retention-days]
     *                                                   [--enable-change-feed {false, true}]
     *                                                   [--enable-delete-retention {false, true}]
     *                                                   [--enable-restore-policy {false, true}]
     *                                                   [--enable-versioning {false, true}]
     *                                                   [--force-string]
     *                                                   [--remove]
     *                                                   [--resource-group]
     *                                                   [--restore-days]
     *                                                   [--set]
     *                                                   [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_blob_service_properties.update = function (accountName) {
        return new az_storage_account_blob_service_properties_update_command_builder("az storage account blob-service-properties update", 'az_storage_account_blob_service_properties_update_command_result', accountName);
    };
    return az_storage_account_blob_service_properties;
}());
exports.az_storage_account_blob_service_properties = az_storage_account_blob_service_properties;
/** Manage encryption scope for a storage account. */
var az_storage_account_encryption_scope = /** @class */ (function () {
    function az_storage_account_encryption_scope() {
    }
    /**
     * Create an encryption scope within storage account.
     *
     * Syntax:
     * ```
     * az storage account encryption-scope create --account-name
     *                                            --name
     *                                            [--key-source {Microsoft.KeyVault, Microsoft.Storage}]
     *                                            [--key-uri]
     *                                            [--resource-group]
     *                                            [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} name The name of the encryption scope within the specified storage account.
     */
    az_storage_account_encryption_scope.create = function (accountName, name) {
        return new az_storage_account_encryption_scope_create_command_builder("az storage account encryption-scope create", 'az_storage_account_encryption_scope_create_command_result', accountName, name);
    };
    /**
     * List encryption scopes within storage account.
     *
     * Syntax:
     * ```
     * az storage account encryption-scope list --account-name
     *                                          [--query-examples]
     *                                          [--resource-group]
     *                                          [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_encryption_scope.list = function (accountName) {
        return new az_storage_account_encryption_scope_list_command_builder("az storage account encryption-scope list", 'az_storage_account_encryption_scope_list_command_result', accountName);
    };
    /**
     * Show properties for specified encryption scope within storage account.
     *
     * Syntax:
     * ```
     * az storage account encryption-scope show --account-name
     *                                          --name
     *                                          [--query-examples]
     *                                          [--resource-group]
     *                                          [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} name The name of the encryption scope within the specified storage account.
     */
    az_storage_account_encryption_scope.show = function (accountName, name) {
        return new az_storage_account_encryption_scope_show_command_builder("az storage account encryption-scope show", 'az_storage_account_encryption_scope_show_command_result', accountName, name);
    };
    /**
     * Update properties for specified encryption scope within storage account.
     *
     * Syntax:
     * ```
     * az storage account encryption-scope update --account-name
     *                                            --name
     *                                            [--key-source {Microsoft.KeyVault, Microsoft.Storage}]
     *                                            [--key-uri]
     *                                            [--resource-group]
     *                                            [--state {Disabled, Enabled}]
     *                                            [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} name The name of the encryption scope within the specified storage account.
     */
    az_storage_account_encryption_scope.update = function (accountName, name) {
        return new az_storage_account_encryption_scope_update_command_builder("az storage account encryption-scope update", 'az_storage_account_encryption_scope_update_command_result', accountName, name);
    };
    return az_storage_account_encryption_scope;
}());
exports.az_storage_account_encryption_scope = az_storage_account_encryption_scope;
/** Manage the properties of file service in storage account. */
var az_storage_account_file_service_properties = /** @class */ (function () {
    function az_storage_account_file_service_properties() {
    }
    /**
     * Show the properties of file service in storage account.
     *
     * Syntax:
     * ```
     * az storage account file-service-properties show --account-name
     *                                                 [--query-examples]
     *                                                 [--resource-group]
     *                                                 [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_file_service_properties.show = function (accountName) {
        return new az_storage_account_file_service_properties_show_command_builder("az storage account file-service-properties show", 'az_storage_account_file_service_properties_show_command_result', accountName);
    };
    /**
     * Update the properties of file service in storage account.
     *
     * Syntax:
     * ```
     * az storage account file-service-properties update --account-name
     *                                                   [--delete-retention-days]
     *                                                   [--enable-delete-retention {false, true}]
     *                                                   [--resource-group]
     *                                                   [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_file_service_properties.update = function (accountName) {
        return new az_storage_account_file_service_properties_update_command_builder("az storage account file-service-properties update", 'az_storage_account_file_service_properties_update_command_result', accountName);
    };
    return az_storage_account_file_service_properties;
}());
exports.az_storage_account_file_service_properties = az_storage_account_file_service_properties;
/** Manage storage account keys. */
var az_storage_account_keys = /** @class */ (function () {
    function az_storage_account_keys() {
    }
    /**
     * List the access keys or Kerberos keys (if active directory enabled) for a storage account.
     *
     * Syntax:
     * ```
     * az storage account keys list --account-name
     *                              [--expand-key-type {kerb}]
     *                              [--query-examples]
     *                              [--resource-group]
     *                              [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_keys.list = function (accountName) {
        return new az_storage_account_keys_list_command_builder("az storage account keys list", 'az_storage_account_keys_list_command_result', accountName);
    };
    /**
     * Regenerate one of the access keys or Kerberos keys (if active directory enabled) for a storage account.
     *
     * Syntax:
     * ```
     * az storage account keys renew --account-name
     *                               --key {primary, secondary}
     *                               [--key-type {kerb}]
     *                               [--resource-group]
     *                               [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {'primary' | 'secondary'} key The key options to regenerate.
     */
    az_storage_account_keys.renew = function (accountName, key) {
        return new az_storage_account_keys_renew_command_builder("az storage account keys renew", 'az_storage_account_keys_renew_command_result', accountName, key);
    };
    return az_storage_account_keys;
}());
exports.az_storage_account_keys = az_storage_account_keys;
/** Manage storage account management policies. */
var az_storage_account_management_policy = /** @class */ (function () {
    function az_storage_account_management_policy() {
    }
    /**
     * Creates the data policy rules associated with the specified storage account.
     *
     * Syntax:
     * ```
     * az storage account management-policy create --account-name
     *                                             --policy
     *                                             --resource-group
     *                                             [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group.
     * @param {string} policy The Storage Account ManagementPolicies Rules, in JSON format. See more details in: <a href="https://docs.microsoft.com/azure/storage/common/storage-lifecycle-managment-concepts">https://docs.microsoft.com/azure/storage/common/storage-lifecycle-managment-concepts</a>.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     */
    az_storage_account_management_policy.create = function (accountName, policy, resourceGroup) {
        return new az_storage_account_management_policy_create_command_builder("az storage account management-policy create", 'az_storage_account_management_policy_create_command_result', accountName, policy, resourceGroup);
    };
    /**
     * Deletes the managementpolicy associated with the specified storage account.
     *
     * Syntax:
     * ```
     * az storage account management-policy delete --account-name
     *                                             --resource-group
     *                                             [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     */
    az_storage_account_management_policy["delete"] = function (accountName, resourceGroup) {
        return new az_storage_account_management_policy_delete_command_builder("az storage account management-policy delete", 'az_storage_account_management_policy_delete_command_result', accountName, resourceGroup);
    };
    /**
     * Gets the managementpolicy associated with the specified storage account.
     *
     * Syntax:
     * ```
     * az storage account management-policy show --account-name
     *                                           --resource-group
     *                                           [--query-examples]
     *                                           [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     */
    az_storage_account_management_policy.show = function (accountName, resourceGroup) {
        return new az_storage_account_management_policy_show_command_builder("az storage account management-policy show", 'az_storage_account_management_policy_show_command_result', accountName, resourceGroup);
    };
    /**
     * Updates the data policy rules associated with the specified storage account.
     *
     * Syntax:
     * ```
     * az storage account management-policy update --account-name
     *                                             --resource-group
     *                                             [--add]
     *                                             [--force-string]
     *                                             [--remove]
     *                                             [--set]
     *                                             [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     */
    az_storage_account_management_policy.update = function (accountName, resourceGroup) {
        return new az_storage_account_management_policy_update_command_builder("az storage account management-policy update", 'az_storage_account_management_policy_update_command_result', accountName, resourceGroup);
    };
    return az_storage_account_management_policy;
}());
exports.az_storage_account_management_policy = az_storage_account_management_policy;
/** Manage network rules. */
var az_storage_account_network_rule = /** @class */ (function () {
    function az_storage_account_network_rule() {
    }
    /**
     * Add a network rule.
     *
     * Syntax:
     * ```
     * az storage account network-rule add --account-name
     *                                     [--action]
     *                                     [--ip-address]
     *                                     [--resource-group]
     *                                     [--subnet]
     *                                     [--subscription]
     *                                     [--vnet-name]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_network_rule.add = function (accountName) {
        return new az_storage_account_network_rule_add_command_builder("az storage account network-rule add", 'az_storage_account_network_rule_add_command_result', accountName);
    };
    /**
     * List network rules.
     *
     * Syntax:
     * ```
     * az storage account network-rule list --account-name
     *                                      [--query-examples]
     *                                      [--resource-group]
     *                                      [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_network_rule.list = function (accountName) {
        return new az_storage_account_network_rule_list_command_builder("az storage account network-rule list", 'az_storage_account_network_rule_list_command_result', accountName);
    };
    /**
     * Remove a network rule.
     *
     * Syntax:
     * ```
     * az storage account network-rule remove --account-name
     *                                        [--ip-address]
     *                                        [--resource-group]
     *                                        [--subnet]
     *                                        [--subscription]
     *                                        [--vnet-name]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_network_rule.remove = function (accountName) {
        return new az_storage_account_network_rule_remove_command_builder("az storage account network-rule remove", 'az_storage_account_network_rule_remove_command_result', accountName);
    };
    return az_storage_account_network_rule;
}());
exports.az_storage_account_network_rule = az_storage_account_network_rule;
/** Manage Object Replication Service Policy Rules. */
var az_storage_account_or_policy_rule = /** @class */ (function () {
    function az_storage_account_or_policy_rule() {
    }
    /**
     * Add rule to the specified Object Replication Service Policy.
     *
     * Syntax:
     * ```
     * az storage account or-policy rule add --account-name
     *                                       --destination-container
     *                                       --policy-id
     *                                       --source-container
     *                                       [--min-creation-time]
     *                                       [--prefix]
     *                                       [--resource-group]
     *                                       [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} destinationContainer The destination storage container name.
     * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
     * @param {string} sourceContainer The source storage container name.
     */
    az_storage_account_or_policy_rule.add = function (accountName, destinationContainer, policyId, sourceContainer) {
        return new az_storage_account_or_policy_rule_add_command_builder("az storage account or-policy rule add", 'az_storage_account_or_policy_rule_add_command_result', accountName, destinationContainer, policyId, sourceContainer);
    };
    /**
     * List all the rules in the specified Object Replication Service Policy.
     *
     * Syntax:
     * ```
     * az storage account or-policy rule list --account-name
     *                                        --policy-id
     *                                        [--query-examples]
     *                                        [--resource-group]
     *                                        [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
     */
    az_storage_account_or_policy_rule.list = function (accountName, policyId) {
        return new az_storage_account_or_policy_rule_list_command_builder("az storage account or-policy rule list", 'az_storage_account_or_policy_rule_list_command_result', accountName, policyId);
    };
    /**
     * Remove the specified rule from the specified Object Replication Service Policy.
     *
     * Syntax:
     * ```
     * az storage account or-policy rule remove --account-name
     *                                          --policy-id
     *                                          --rule-id
     *                                          [--resource-group]
     *                                          [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
     * @param {string} ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
     */
    az_storage_account_or_policy_rule.remove = function (accountName, policyId, ruleId) {
        return new az_storage_account_or_policy_rule_remove_command_builder("az storage account or-policy rule remove", 'az_storage_account_or_policy_rule_remove_command_result', accountName, policyId, ruleId);
    };
    /**
     * Show the properties of specified rule in Object Replication Service Policy.
     *
     * Syntax:
     * ```
     * az storage account or-policy rule show --account-name
     *                                        --policy-id
     *                                        --rule-id
     *                                        [--query-examples]
     *                                        [--resource-group]
     *                                        [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
     * @param {string} ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
     */
    az_storage_account_or_policy_rule.show = function (accountName, policyId, ruleId) {
        return new az_storage_account_or_policy_rule_show_command_builder("az storage account or-policy rule show", 'az_storage_account_or_policy_rule_show_command_result', accountName, policyId, ruleId);
    };
    /**
     * Update rule properties to Object Replication Service Policy.
     *
     * Syntax:
     * ```
     * az storage account or-policy rule update --account-name
     *                                          --policy-id
     *                                          --rule-id
     *                                          [--destination-container]
     *                                          [--min-creation-time]
     *                                          [--prefix]
     *                                          [--resource-group]
     *                                          [--source-container]
     *                                          [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
     * @param {string} ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
     */
    az_storage_account_or_policy_rule.update = function (accountName, policyId, ruleId) {
        return new az_storage_account_or_policy_rule_update_command_builder("az storage account or-policy rule update", 'az_storage_account_or_policy_rule_update_command_result', accountName, policyId, ruleId);
    };
    return az_storage_account_or_policy_rule;
}());
exports.az_storage_account_or_policy_rule = az_storage_account_or_policy_rule;
/** Manage storage account Object Replication Policy. */
var az_storage_account_or_policy = /** @class */ (function () {
    function az_storage_account_or_policy() {
    }
    /**
     * Create Object Replication Service Policy for storage account.
     *
     * Syntax:
     * ```
     * az storage account or-policy create --account-name
     *                                     [--dcont]
     *                                     [--destination-account]
     *                                     [--min-creation-time]
     *                                     [--policy]
     *                                     [--policy-id]
     *                                     [--prefix]
     *                                     [--resource-group]
     *                                     [--rule-id]
     *                                     [--scont]
     *                                     [--source-account]
     *                                     [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_or_policy.create = function (accountName) {
        return new az_storage_account_or_policy_create_command_builder("az storage account or-policy create", 'az_storage_account_or_policy_create_command_result', accountName);
    };
    /**
     * Delete specified Object Replication Service Policy associated with the specified storage account.
     *
     * Syntax:
     * ```
     * az storage account or-policy delete --account-name
     *                                     --policy-id
     *                                     [--resource-group]
     *                                     [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
     */
    az_storage_account_or_policy["delete"] = function (accountName, policyId) {
        return new az_storage_account_or_policy_delete_command_builder("az storage account or-policy delete", 'az_storage_account_or_policy_delete_command_result', accountName, policyId);
    };
    /**
     * List Object Replication Service Policies associated with the specified storage account.
     *
     * Syntax:
     * ```
     * az storage account or-policy list --account-name
     *                                   [--query-examples]
     *                                   [--resource-group]
     *                                   [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_or_policy.list = function (accountName) {
        return new az_storage_account_or_policy_list_command_builder("az storage account or-policy list", 'az_storage_account_or_policy_list_command_result', accountName);
    };
    /**
     * Show the properties of specified Object Replication Service Policy for storage account.
     *
     * Syntax:
     * ```
     * az storage account or-policy show --account-name
     *                                   --policy-id
     *                                   [--query-examples]
     *                                   [--resource-group]
     *                                   [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
     */
    az_storage_account_or_policy.show = function (accountName, policyId) {
        return new az_storage_account_or_policy_show_command_builder("az storage account or-policy show", 'az_storage_account_or_policy_show_command_result', accountName, policyId);
    };
    /**
     * Update Object Replication Service Policy properties for storage account.
     *
     * Syntax:
     * ```
     * az storage account or-policy update --account-name
     *                                     [--add]
     *                                     [--destination-account]
     *                                     [--force-string]
     *                                     [--policy]
     *                                     [--policy-id]
     *                                     [--remove]
     *                                     [--resource-group]
     *                                     [--set]
     *                                     [--source-account]
     *                                     [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     */
    az_storage_account_or_policy.update = function (accountName) {
        return new az_storage_account_or_policy_update_command_builder("az storage account or-policy update", 'az_storage_account_or_policy_update_command_result', accountName);
    };
    return az_storage_account_or_policy;
}());
exports.az_storage_account_or_policy = az_storage_account_or_policy;
/** Manage storage account private endpoint connection. */
var az_storage_account_private_endpoint_connection = /** @class */ (function () {
    function az_storage_account_private_endpoint_connection() {
    }
    /**
     * Approve a private endpoint connection request for storage account.
     *
     * Syntax:
     * ```
     * az storage account private-endpoint-connection approve [--account-name]
     *                                                        [--description]
     *                                                        [--id]
     *                                                        [--name]
     *                                                        [--resource-group]
     *                                                        [--subscription]
     * ```
     */
    az_storage_account_private_endpoint_connection.approve = function () {
        return new az_storage_account_private_endpoint_connection_approve_command_builder("az storage account private-endpoint-connection approve", 'az_storage_account_private_endpoint_connection_approve_command_result');
    };
    /**
     * Delete a private endpoint connection request for storage account.
     *
     * Syntax:
     * ```
     * az storage account private-endpoint-connection delete [--account-name]
     *                                                       [--id]
     *                                                       [--name]
     *                                                       [--resource-group]
     *                                                       [--subscription]
     *                                                       [--yes]
     * ```
     */
    az_storage_account_private_endpoint_connection["delete"] = function () {
        return new az_storage_account_private_endpoint_connection_delete_command_builder("az storage account private-endpoint-connection delete", 'az_storage_account_private_endpoint_connection_delete_command_result');
    };
    /**
     * Reject a private endpoint connection request for storage account.
     *
     * Syntax:
     * ```
     * az storage account private-endpoint-connection reject [--account-name]
     *                                                       [--description]
     *                                                       [--id]
     *                                                       [--name]
     *                                                       [--resource-group]
     *                                                       [--subscription]
     * ```
     */
    az_storage_account_private_endpoint_connection.reject = function () {
        return new az_storage_account_private_endpoint_connection_reject_command_builder("az storage account private-endpoint-connection reject", 'az_storage_account_private_endpoint_connection_reject_command_result');
    };
    /**
     * Show details of a private endpoint connection request for storage account.
     *
     * Syntax:
     * ```
     * az storage account private-endpoint-connection show [--account-name]
     *                                                     [--id]
     *                                                     [--name]
     *                                                     [--query-examples]
     *                                                     [--resource-group]
     *                                                     [--subscription]
     * ```
     */
    az_storage_account_private_endpoint_connection.show = function () {
        return new az_storage_account_private_endpoint_connection_show_command_builder("az storage account private-endpoint-connection show", 'az_storage_account_private_endpoint_connection_show_command_result');
    };
    return az_storage_account_private_endpoint_connection;
}());
exports.az_storage_account_private_endpoint_connection = az_storage_account_private_endpoint_connection;
/** Manage storage account private link resources. */
var az_storage_account_private_link_resource = /** @class */ (function () {
    function az_storage_account_private_link_resource() {
    }
    /**
     * Get the private link resources that need to be created for a storage account.
     *
     * Syntax:
     * ```
     * az storage account private-link-resource list --account-name
     *                                               --resource-group
     *                                               [--query-examples]
     *                                               [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     */
    az_storage_account_private_link_resource.list = function (accountName, resourceGroup) {
        return new az_storage_account_private_link_resource_list_command_builder("az storage account private-link-resource list", 'az_storage_account_private_link_resource_list_command_result', accountName, resourceGroup);
    };
    return az_storage_account_private_link_resource;
}());
exports.az_storage_account_private_link_resource = az_storage_account_private_link_resource;
/** Manage storage accounts. */
var az_storage_account = /** @class */ (function () {
    function az_storage_account() {
    }
    /**
     * Checks that the storage account name is valid and is not already in use.
     *
     * Syntax:
     * ```
     * az storage account check-name --name
     *                               [--subscription]
     * ```
     *
     * @param {string} name The storage account name.
     */
    az_storage_account.check_name = function (name) {
        return new az_storage_account_check_name_command_builder("az storage account check-name", 'az_storage_account_check_name_command_result', name);
    };
    /**
     * Create a storage account.
     *
     * Syntax:
     * ```
     * az storage account create --name
     *                           --resource-group
     *                           [--access-tier {Cool, Hot}]
     *                           [--allow-blob-public-access {false, true}]
     *                           [--assign-identity]
     *                           [--azure-storage-sid]
     *                           [--bypass {AzureServices, Logging, Metrics, None}]
     *                           [--custom-domain]
     *                           [--default-action {Allow, Deny}]
     *                           [--domain-guid]
     *                           [--domain-name]
     *                           [--domain-sid]
     *                           [--enable-files-aadds {false, true}]
     *                           [--enable-files-adds {false, true}]
     *                           [--enable-hierarchical-namespace {false, true}]
     *                           [--enable-large-file-share]
     *                           [--encryption-key-type-for-queue {Account, Service}]
     *                           [--encryption-key-type-for-table {Account, Service}]
     *                           [--encryption-services {blob, file, queue, table}]
     *                           [--forest-name]
     *                           [--https-only {false, true}]
     *                           [--kind {BlobStorage, BlockBlobStorage, FileStorage, Storage, StorageV2}]
     *                           [--location]
     *                           [--min-tls-version {TLS1_0, TLS1_1, TLS1_2}]
     *                           [--net-bios-domain-name]
     *                           [--publish-internet-endpoints {false, true}]
     *                           [--publish-microsoft-endpoints {false, true}]
     *                           [--require-infrastructure-encryption {false, true}]
     *                           [--routing-choice {InternetRouting, MicrosoftRouting}]
     *                           [--sku {Premium_LRS, Premium_ZRS, Standard_GRS, Standard_GZRS, Standard_LRS, Standard_RAGRS, Standard_RAGZRS, Standard_ZRS}]
     *                           [--subscription]
     *                           [--tags]
     * ```
     *
     * @param {string} name The storage account name.
     * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
     */
    az_storage_account.create = function (name, resourceGroup) {
        return new az_storage_account_create_command_builder("az storage account create", 'az_storage_account_create_command_result', name, resourceGroup);
    };
    /**
     * Delete a storage account.
     *
     * Syntax:
     * ```
     * az storage account delete [--ids]
     *                           [--name]
     *                           [--resource-group]
     *                           [--subscription]
     *                           [--yes]
     * ```
     */
    az_storage_account["delete"] = function () {
        return new az_storage_account_delete_command_builder("az storage account delete", 'az_storage_account_delete_command_result');
    };
    /**
     * Failover request can be triggered for a storage account in case of availability issues.
     *
     * Syntax:
     * ```
     * az storage account failover [--ids]
     *                             [--name]
     *                             [--no-wait]
     *                             [--resource-group]
     *                             [--subscription]
     *                             [--yes]
     * ```
     */
    az_storage_account.failover = function () {
        return new az_storage_account_failover_command_builder("az storage account failover", 'az_storage_account_failover_command_result');
    };
    /**
     * Generates a shared access signature for the account.
     *
     * Syntax:
     * ```
     * az storage account generate-sas --expiry
     *                                 --permissions
     *                                 --resource-types
     *                                 --services
     *                                 [--account-key]
     *                                 [--account-name]
     *                                 [--connection-string]
     *                                 [--https-only]
     *                                 [--ids]
     *                                 [--ip]
     *                                 [--start]
     *                                 [--subscription]
     * ```
     *
     * @param {string} expiry Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid.
     * @param {string} permissions The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (l)ist (p)rocess (r)ead (u)pdate (w)rite. Can be combined.
     * @param {string} resourceTypes The resource types the SAS is applicable for. Allowed values: (s)ervice (c)ontainer (o)bject. Can be combined.
     * @param {string} services The storage services the SAS is applicable for. Allowed values: (b)lob (f)ile (q)ueue (t)able. Can be combined.
     */
    az_storage_account.generate_sas = function (expiry, permissions, resourceTypes, services) {
        return new az_storage_account_generate_sas_command_builder("az storage account generate-sas", 'az_storage_account_generate_sas_command_result', expiry, permissions, resourceTypes, services);
    };
    /**
     * List storage accounts.
     *
     * Syntax:
     * ```
     * az storage account list [--query-examples]
     *                         [--resource-group]
     *                         [--subscription]
     * ```
     */
    az_storage_account.list = function () {
        return new az_storage_account_list_command_builder("az storage account list", 'az_storage_account_list_command_result');
    };
    /**
     * Revoke all user delegation keys for a storage account.
     *
     * Syntax:
     * ```
     * az storage account revoke-delegation-keys [--ids]
     *                                           [--name]
     *                                           [--resource-group]
     *                                           [--subscription]
     * ```
     */
    az_storage_account.revoke_delegation_keys = function () {
        return new az_storage_account_revoke_delegation_keys_command_builder("az storage account revoke-delegation-keys", 'az_storage_account_revoke_delegation_keys_command_result');
    };
    /**
     * Show storage account properties.
     *
     * Syntax:
     * ```
     * az storage account show [--expand]
     *                         [--ids]
     *                         [--name]
     *                         [--query-examples]
     *                         [--resource-group]
     *                         [--subscription]
     * ```
     */
    az_storage_account.show = function () {
        return new az_storage_account_show_command_builder("az storage account show", 'az_storage_account_show_command_result');
    };
    /**
     * Get the connection string for a storage account.
     *
     * Syntax:
     * ```
     * az storage account show-connection-string [--blob-endpoint]
     *                                           [--file-endpoint]
     *                                           [--ids]
     *                                           [--key {primary, secondary}]
     *                                           [--name]
     *                                           [--protocol {http, https}]
     *                                           [--queue-endpoint]
     *                                           [--resource-group]
     *                                           [--sas-token]
     *                                           [--subscription]
     *                                           [--table-endpoint]
     * ```
     */
    az_storage_account.show_connection_string = function () {
        return new az_storage_account_show_connection_string_command_builder("az storage account show-connection-string", 'az_storage_account_show_connection_string_command_result');
    };
    /**
     * Show the current count and limit of the storage accounts under the subscription.
     *
     * Syntax:
     * ```
     * az storage account show-usage --location
     *                               [--subscription]
     * ```
     *
     * @param {string} location Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`.
     */
    az_storage_account.show_usage = function (location) {
        return new az_storage_account_show_usage_command_builder("az storage account show-usage", 'az_storage_account_show_usage_command_result', location);
    };
    /**
     * Update the properties of a storage account.
     *
     * Syntax:
     * ```
     * az storage account update [--access-tier {Cool, Hot}]
     *                           [--add]
     *                           [--allow-blob-public-access {false, true}]
     *                           [--assign-identity]
     *                           [--azure-storage-sid]
     *                           [--bypass {AzureServices, Logging, Metrics, None}]
     *                           [--custom-domain]
     *                           [--default-action {Allow, Deny}]
     *                           [--domain-guid]
     *                           [--domain-name]
     *                           [--domain-sid]
     *                           [--enable-files-aadds {false, true}]
     *                           [--enable-files-adds {false, true}]
     *                           [--enable-large-file-share]
     *                           [--encryption-key-name]
     *                           [--encryption-key-source {Microsoft.Keyvault, Microsoft.Storage}]
     *                           [--encryption-key-vault]
     *                           [--encryption-key-version]
     *                           [--encryption-services {blob, file, queue, table}]
     *                           [--force-string]
     *                           [--forest-name]
     *                           [--https-only {false, true}]
     *                           [--ids]
     *                           [--min-tls-version {TLS1_0, TLS1_1, TLS1_2}]
     *                           [--name]
     *                           [--net-bios-domain-name]
     *                           [--publish-internet-endpoints {false, true}]
     *                           [--publish-microsoft-endpoints {false, true}]
     *                           [--remove]
     *                           [--resource-group]
     *                           [--routing-choice {InternetRouting, MicrosoftRouting}]
     *                           [--set]
     *                           [--sku {Premium_LRS, Premium_ZRS, Standard_GRS, Standard_GZRS, Standard_LRS, Standard_RAGRS, Standard_RAGZRS, Standard_ZRS}]
     *                           [--subscription]
     *                           [--tags]
     *                           [--use-subdomain {false, true}]
     * ```
     */
    az_storage_account.update = function () {
        return new az_storage_account_update_command_builder("az storage account update", 'az_storage_account_update_command_result');
    };
    return az_storage_account;
}());
exports.az_storage_account = az_storage_account;
/** Manage blob copy operations. Use `az storage blob show` to check the status of the blobs. */
var az_storage_blob_copy = /** @class */ (function () {
    function az_storage_blob_copy() {
    }
    /**
     * Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
     *
     * Syntax:
     * ```
     * az storage blob copy cancel --copy-id
     *                             --destination-blob
     *                             --destination-container
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--connection-string]
     *                             [--lease-id]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} copyId Copy identifier provided in the copy.id of the original copy_blob operation.
     * @param {string} destinationBlob Name of the destination blob. If the exists, it will be overwritten.
     * @param {string} destinationContainer The container name.
     */
    az_storage_blob_copy.cancel = function (copyId, destinationBlob, destinationContainer) {
        return new az_storage_blob_copy_cancel_command_builder("az storage blob copy cancel", 'az_storage_blob_copy_cancel_command_result', copyId, destinationBlob, destinationContainer);
    };
    /**
     * Copies a blob asynchronously. Use `az storage blob show` to check the status of the blobs.
     *
     * Syntax:
     * ```
     * az storage blob copy start --destination-blob
     *                            --destination-container
     *                            [--account-key]
     *                            [--account-name]
     *                            [--auth-mode {key, login}]
     *                            [--connection-string]
     *                            [--destination-if-match]
     *                            [--destination-if-modified-since]
     *                            [--destination-if-none-match]
     *                            [--destination-if-unmodified-since]
     *                            [--destination-lease-id]
     *                            [--metadata]
     *                            [--requires-sync]
     *                            [--sas-token]
     *                            [--source-account-key]
     *                            [--source-account-name]
     *                            [--source-blob]
     *                            [--source-container]
     *                            [--source-if-match]
     *                            [--source-if-modified-since]
     *                            [--source-if-none-match]
     *                            [--source-if-unmodified-since]
     *                            [--source-lease-id]
     *                            [--source-path]
     *                            [--source-sas]
     *                            [--source-share]
     *                            [--source-snapshot]
     *                            [--source-uri]
     *                            [--subscription]
     *                            [--timeout]
     * ```
     *
     * @param {string} destinationBlob Name of the destination blob. If the exists, it will be overwritten.
     * @param {string} destinationContainer The container name.
     */
    az_storage_blob_copy.start = function (destinationBlob, destinationContainer) {
        return new az_storage_blob_copy_start_command_builder("az storage blob copy start", 'az_storage_blob_copy_start_command_result', destinationBlob, destinationContainer);
    };
    /**
     * Copy multiple blobs to a blob container. Use `az storage blob show` to check the status of the blobs.
     *
     * Syntax:
     * ```
     * az storage blob copy start-batch [--account-key]
     *                                  [--account-name]
     *                                  [--auth-mode {key, login}]
     *                                  [--connection-string]
     *                                  [--destination-container]
     *                                  [--destination-path]
     *                                  [--dryrun]
     *                                  [--pattern]
     *                                  [--sas-token]
     *                                  [--source-account-key]
     *                                  [--source-account-name]
     *                                  [--source-container]
     *                                  [--source-sas]
     *                                  [--source-share]
     *                                  [--source-uri]
     *                                  [--subscription]
     * ```
     */
    az_storage_blob_copy.start_batch = function () {
        return new az_storage_blob_copy_start_batch_command_builder("az storage blob copy start-batch", 'az_storage_blob_copy_start_batch_command_result');
    };
    return az_storage_blob_copy;
}());
exports.az_storage_blob_copy = az_storage_blob_copy;
/** Manage blob incremental copy operations. */
var az_storage_blob_incremental_copy = /** @class */ (function () {
    function az_storage_blob_incremental_copy() {
    }
    /**
     * Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
     *
     * Syntax:
     * ```
     * az storage blob incremental-copy cancel --container-name
     *                                         --copy-id
     *                                         --name
     *                                         [--account-key]
     *                                         [--account-name]
     *                                         [--auth-mode {key, login}]
     *                                         [--connection-string]
     *                                         [--lease-id]
     *                                         [--sas-token]
     *                                         [--subscription]
     *                                         [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} copyId Copy identifier provided in the copy.id of the original copy_blob operation.
     * @param {string} name The blob name.
     */
    az_storage_blob_incremental_copy.cancel = function (containerName, copyId, name) {
        return new az_storage_blob_incremental_copy_cancel_command_builder("az storage blob incremental-copy cancel", 'az_storage_blob_incremental_copy_cancel_command_result', containerName, copyId, name);
    };
    /**
     * Copies an incremental copy of a blob asynchronously.
     *
     * Syntax:
     * ```
     * az storage blob incremental-copy start --destination-blob
     *                                        --destination-container
     *                                        [--account-key]
     *                                        [--account-name]
     *                                        [--auth-mode {key, login}]
     *                                        [--connection-string]
     *                                        [--destination-if-match]
     *                                        [--destination-if-modified-since]
     *                                        [--destination-if-none-match]
     *                                        [--destination-if-unmodified-since]
     *                                        [--destination-lease-id]
     *                                        [--metadata]
     *                                        [--sas-token]
     *                                        [--source-account-key]
     *                                        [--source-account-name]
     *                                        [--source-blob]
     *                                        [--source-container]
     *                                        [--source-lease-id]
     *                                        [--source-sas]
     *                                        [--source-snapshot]
     *                                        [--source-uri]
     *                                        [--subscription]
     *                                        [--timeout]
     * ```
     *
     * @param {string} destinationBlob Name of the destination blob. If the exists, it will be overwritten.
     * @param {string} destinationContainer The container name.
     */
    az_storage_blob_incremental_copy.start = function (destinationBlob, destinationContainer) {
        return new az_storage_blob_incremental_copy_start_command_builder("az storage blob incremental-copy start", 'az_storage_blob_incremental_copy_start_command_result', destinationBlob, destinationContainer);
    };
    return az_storage_blob_incremental_copy;
}());
exports.az_storage_blob_incremental_copy = az_storage_blob_incremental_copy;
/** Manage storage blob leases. */
var az_storage_blob_lease = /** @class */ (function () {
    function az_storage_blob_lease() {
    }
    /**
     * Request a new lease.
     *
     * Syntax:
     * ```
     * az storage blob lease acquire --blob-name
     *                               --container-name
     *                               [--account-key]
     *                               [--account-name]
     *                               [--auth-mode {key, login}]
     *                               [--connection-string]
     *                               [--if-match]
     *                               [--if-modified-since]
     *                               [--if-none-match]
     *                               [--if-unmodified-since]
     *                               [--lease-duration]
     *                               [--proposed-lease-id]
     *                               [--sas-token]
     *                               [--subscription]
     *                               [--timeout]
     * ```
     *
     * @param {string} blobName The blob name.
     * @param {string} containerName The container name.
     */
    az_storage_blob_lease.acquire = function (blobName, containerName) {
        return new az_storage_blob_lease_acquire_command_builder("az storage blob lease acquire", 'az_storage_blob_lease_acquire_command_result', blobName, containerName);
    };
    /**
     * Break the lease, if the container or blob has an active lease.
     *
     * Syntax:
     * ```
     * az storage blob lease break --blob-name
     *                             --container-name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--connection-string]
     *                             [--if-match]
     *                             [--if-modified-since]
     *                             [--if-none-match]
     *                             [--if-unmodified-since]
     *                             [--lease-break-period]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} blobName The blob name.
     * @param {string} containerName The container name.
     */
    az_storage_blob_lease["break"] = function (blobName, containerName) {
        return new az_storage_blob_lease_break_command_builder("az storage blob lease break", 'az_storage_blob_lease_break_command_result', blobName, containerName);
    };
    /**
     * Change the lease ID of an active lease.
     *
     * Syntax:
     * ```
     * az storage blob lease change --blob-name
     *                              --container-name
     *                              --lease-id
     *                              --proposed-lease-id
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--if-match]
     *                              [--if-modified-since]
     *                              [--if-none-match]
     *                              [--if-unmodified-since]
     *                              [--sas-token]
     *                              [--subscription]
     *                              [--timeout]
     * ```
     *
     * @param {string} blobName The blob name.
     * @param {string} containerName The container name.
     * @param {string} leaseId Required if the blob has an active lease.
     * @param {string} proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.
     */
    az_storage_blob_lease.change = function (blobName, containerName, leaseId, proposedLeaseId) {
        return new az_storage_blob_lease_change_command_builder("az storage blob lease change", 'az_storage_blob_lease_change_command_result', blobName, containerName, leaseId, proposedLeaseId);
    };
    /**
     * Release the lease.
     *
     * Syntax:
     * ```
     * az storage blob lease release --blob-name
     *                               --container-name
     *                               --lease-id
     *                               [--account-key]
     *                               [--account-name]
     *                               [--auth-mode {key, login}]
     *                               [--connection-string]
     *                               [--if-match]
     *                               [--if-modified-since]
     *                               [--if-none-match]
     *                               [--if-unmodified-since]
     *                               [--sas-token]
     *                               [--subscription]
     *                               [--timeout]
     * ```
     *
     * @param {string} blobName The blob name.
     * @param {string} containerName The container name.
     * @param {string} leaseId Required if the blob has an active lease.
     */
    az_storage_blob_lease.release = function (blobName, containerName, leaseId) {
        return new az_storage_blob_lease_release_command_builder("az storage blob lease release", 'az_storage_blob_lease_release_command_result', blobName, containerName, leaseId);
    };
    /**
     * Renew the lease.
     *
     * Syntax:
     * ```
     * az storage blob lease renew --blob-name
     *                             --container-name
     *                             --lease-id
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--connection-string]
     *                             [--if-match]
     *                             [--if-modified-since]
     *                             [--if-none-match]
     *                             [--if-unmodified-since]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} blobName The blob name.
     * @param {string} containerName The container name.
     * @param {string} leaseId Required if the blob has an active lease.
     */
    az_storage_blob_lease.renew = function (blobName, containerName, leaseId) {
        return new az_storage_blob_lease_renew_command_builder("az storage blob lease renew", 'az_storage_blob_lease_renew_command_result', blobName, containerName, leaseId);
    };
    return az_storage_blob_lease;
}());
exports.az_storage_blob_lease = az_storage_blob_lease;
/** Manage blob metadata. */
var az_storage_blob_metadata = /** @class */ (function () {
    function az_storage_blob_metadata() {
    }
    /**
     * Returns all user-defined metadata for the specified blob or snapshot.
     *
     * Syntax:
     * ```
     * az storage blob metadata show --container-name
     *                               --name
     *                               [--account-key]
     *                               [--account-name]
     *                               [--auth-mode {key, login}]
     *                               [--connection-string]
     *                               [--if-match]
     *                               [--if-modified-since]
     *                               [--if-none-match]
     *                               [--if-unmodified-since]
     *                               [--lease-id]
     *                               [--query-examples]
     *                               [--sas-token]
     *                               [--snapshot]
     *                               [--subscription]
     *                               [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob_metadata.show = function (containerName, name) {
        return new az_storage_blob_metadata_show_command_builder("az storage blob metadata show", 'az_storage_blob_metadata_show_command_result', containerName, name);
    };
    /**
     * Sets user-defined metadata for the specified blob as one or more name-value pairs.
     *
     * Syntax:
     * ```
     * az storage blob metadata update --container-name
     *                                 --name
     *                                 [--account-key]
     *                                 [--account-name]
     *                                 [--auth-mode {key, login}]
     *                                 [--connection-string]
     *                                 [--if-match]
     *                                 [--if-modified-since]
     *                                 [--if-none-match]
     *                                 [--if-unmodified-since]
     *                                 [--lease-id]
     *                                 [--metadata]
     *                                 [--sas-token]
     *                                 [--subscription]
     *                                 [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob_metadata.update = function (containerName, name) {
        return new az_storage_blob_metadata_update_command_builder("az storage blob metadata update", 'az_storage_blob_metadata_update_command_result', containerName, name);
    };
    return az_storage_blob_metadata;
}());
exports.az_storage_blob_metadata = az_storage_blob_metadata;
/** Manage storage blob delete-policy service properties. */
var az_storage_blob_service_properties_delete_policy = /** @class */ (function () {
    function az_storage_blob_service_properties_delete_policy() {
    }
    /**
     * Show the storage blob delete-policy.
     *
     * Syntax:
     * ```
     * az storage blob service-properties delete-policy show [--account-key]
     *                                                       [--account-name]
     *                                                       [--auth-mode {key, login}]
     *                                                       [--connection-string]
     *                                                       [--query-examples]
     *                                                       [--sas-token]
     *                                                       [--subscription]
     *                                                       [--timeout]
     * ```
     */
    az_storage_blob_service_properties_delete_policy.show = function () {
        return new az_storage_blob_service_properties_delete_policy_show_command_builder("az storage blob service-properties delete-policy show", 'az_storage_blob_service_properties_delete_policy_show_command_result');
    };
    /**
     * Update the storage blob delete-policy.
     *
     * Syntax:
     * ```
     * az storage blob service-properties delete-policy update [--account-key]
     *                                                         [--account-name]
     *                                                         [--auth-mode {key, login}]
     *                                                         [--connection-string]
     *                                                         [--days-retained]
     *                                                         [--enable {false, true}]
     *                                                         [--sas-token]
     *                                                         [--subscription]
     * ```
     */
    az_storage_blob_service_properties_delete_policy.update = function () {
        return new az_storage_blob_service_properties_delete_policy_update_command_builder("az storage blob service-properties delete-policy update", 'az_storage_blob_service_properties_delete_policy_update_command_result');
    };
    return az_storage_blob_service_properties_delete_policy;
}());
exports.az_storage_blob_service_properties_delete_policy = az_storage_blob_service_properties_delete_policy;
/** Manage storage blob service properties. */
var az_storage_blob_service_properties = /** @class */ (function () {
    function az_storage_blob_service_properties() {
    }
    /**
     * Gets the properties of a storage account's Blob service, including Azure Storage Analytics.
     *
     * Syntax:
     * ```
     * az storage blob service-properties show [--account-key]
     *                                         [--account-name]
     *                                         [--auth-mode {key, login}]
     *                                         [--connection-string]
     *                                         [--query-examples]
     *                                         [--sas-token]
     *                                         [--subscription]
     *                                         [--timeout]
     * ```
     */
    az_storage_blob_service_properties.show = function () {
        return new az_storage_blob_service_properties_show_command_builder("az storage blob service-properties show", 'az_storage_blob_service_properties_show_command_result');
    };
    /**
     * Update storage blob service properties.
     *
     * Syntax:
     * ```
     * az storage blob service-properties update [--404-document]
     *                                           [--account-key]
     *                                           [--account-name]
     *                                           [--add]
     *                                           [--auth-mode {key, login}]
     *                                           [--connection-string]
     *                                           [--delete-retention {false, true}]
     *                                           [--delete-retention-period]
     *                                           [--force-string]
     *                                           [--index-document]
     *                                           [--remove]
     *                                           [--sas-token]
     *                                           [--set]
     *                                           [--static-website {false, true}]
     *                                           [--subscription]
     *                                           [--timeout]
     * ```
     */
    az_storage_blob_service_properties.update = function () {
        return new az_storage_blob_service_properties_update_command_builder("az storage blob service-properties update", 'az_storage_blob_service_properties_update_command_result');
    };
    return az_storage_blob_service_properties;
}());
exports.az_storage_blob_service_properties = az_storage_blob_service_properties;
/** Manage object storage for unstructured data (blobs). */
var az_storage_blob = /** @class */ (function () {
    function az_storage_blob() {
    }
    /**
     * Mark a blob or snapshot for deletion.
     *
     * Syntax:
     * ```
     * az storage blob delete --container-name
     *                        --name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--auth-mode {key, login}]
     *                        [--connection-string]
     *                        [--delete-snapshots {include, only}]
     *                        [--if-match]
     *                        [--if-modified-since]
     *                        [--if-none-match]
     *                        [--if-unmodified-since]
     *                        [--lease-id]
     *                        [--sas-token]
     *                        [--snapshot]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob["delete"] = function (containerName, name) {
        return new az_storage_blob_delete_command_builder("az storage blob delete", 'az_storage_blob_delete_command_result', containerName, name);
    };
    /**
     * Delete blobs from a blob container recursively.
     *
     * Syntax:
     * ```
     * az storage blob delete-batch --source
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--delete-snapshots {include, only}]
     *                              [--dryrun]
     *                              [--if-match]
     *                              [--if-modified-since]
     *                              [--if-none-match]
     *                              [--if-unmodified-since]
     *                              [--lease-id]
     *                              [--pattern]
     *                              [--sas-token]
     *                              [--subscription]
     *                              [--timeout]
     * ```
     *
     * @param {string} source The blob container from where the files will be deleted.
     */
    az_storage_blob.delete_batch = function (source) {
        return new az_storage_blob_delete_batch_command_builder("az storage blob delete-batch", 'az_storage_blob_delete_batch_command_result', source);
    };
    /**
     * Downloads a blob to a file path, with automatic chunking and progress notifications.
     *
     * Syntax:
     * ```
     * az storage blob download --container-name
     *                          --file
     *                          --name
     *                          [--account-key]
     *                          [--account-name]
     *                          [--auth-mode {key, login}]
     *                          [--connection-string]
     *                          [--end-range]
     *                          [--if-match]
     *                          [--if-modified-since]
     *                          [--if-none-match]
     *                          [--if-unmodified-since]
     *                          [--lease-id]
     *                          [--max-connections]
     *                          [--no-progress]
     *                          [--open-mode]
     *                          [--sas-token]
     *                          [--snapshot]
     *                          [--socket-timeout]
     *                          [--start-range]
     *                          [--subscription]
     *                          [--timeout]
     *                          [--validate-content]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} file Path of file to write out to.
     * @param {string} name The blob name.
     */
    az_storage_blob.download = function (containerName, file, name) {
        return new az_storage_blob_download_command_builder("az storage blob download", 'az_storage_blob_download_command_result', containerName, file, name);
    };
    /**
     * Download blobs from a blob container recursively.
     *
     * Syntax:
     * ```
     * az storage blob download-batch --destination
     *                                --source
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--dryrun]
     *                                [--max-connections]
     *                                [--no-progress]
     *                                [--pattern]
     *                                [--sas-token]
     *                                [--socket-timeout]
     *                                [--subscription]
     * ```
     *
     * @param {string} destination The existing destination folder for this download operation.
     * @param {string} source The blob container from where the files will be downloaded.
     */
    az_storage_blob.download_batch = function (destination, source) {
        return new az_storage_blob_download_batch_command_builder("az storage blob download-batch", 'az_storage_blob_download_batch_command_result', destination, source);
    };
    /**
     * Check for the existence of a blob in a container.
     *
     * Syntax:
     * ```
     * az storage blob exists --container-name
     *                        --name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--auth-mode {key, login}]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--snapshot]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob.exists = function (containerName, name) {
        return new az_storage_blob_exists_command_builder("az storage blob exists", 'az_storage_blob_exists_command_result', containerName, name);
    };
    /**
     * Generate a shared access signature for the blob.
     *
     * Syntax:
     * ```
     * az storage blob generate-sas --container-name
     *                              --name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--as-user]
     *                              [--auth-mode {key, login}]
     *                              [--cache-control]
     *                              [--connection-string]
     *                              [--content-disposition]
     *                              [--content-encoding]
     *                              [--content-language]
     *                              [--content-type]
     *                              [--expiry]
     *                              [--full-uri]
     *                              [--https-only]
     *                              [--ip]
     *                              [--permissions]
     *                              [--policy-name]
     *                              [--start]
     *                              [--subscription]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob.generate_sas = function (containerName, name) {
        return new az_storage_blob_generate_sas_command_builder("az storage blob generate-sas", 'az_storage_blob_generate_sas_command_result', containerName, name);
    };
    /**
     * List blobs in a given container.
     *
     * Syntax:
     * ```
     * az storage blob list --container-name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--auth-mode {key, login}]
     *                      [--connection-string]
     *                      [--delimiter]
     *                      [--include]
     *                      [--marker]
     *                      [--num-results]
     *                      [--prefix]
     *                      [--query-examples]
     *                      [--sas-token]
     *                      [--show-next-marker]
     *                      [--subscription]
     *                      [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     */
    az_storage_blob.list = function (containerName) {
        return new az_storage_blob_list_command_builder("az storage blob list", 'az_storage_blob_list_command_result', containerName);
    };
    /**
     * Restore blobs in the specified blob ranges.
     *
     * Syntax:
     * ```
     * az storage blob restore --account-name
     *                         --time-to-restore
     *                         [--blob-range]
     *                         [--no-wait]
     *                         [--resource-group]
     *                         [--subscription]
     * ```
     *
     * @param {string} accountName The storage account name.
     * @param {string} timeToRestore Restore blob to the specified time, which should be UTC datetime in (Y-m-d'T'H:M:S'Z').
     */
    az_storage_blob.restore = function (accountName, timeToRestore) {
        return new az_storage_blob_restore_command_builder("az storage blob restore", 'az_storage_blob_restore_command_result', accountName, timeToRestore);
    };
    /**
     * Set the block or page tiers on the blob.
     *
     * Syntax:
     * ```
     * az storage blob set-tier --container-name
     *                          --name
     *                          --tier
     *                          [--account-key]
     *                          [--account-name]
     *                          [--auth-mode {key, login}]
     *                          [--connection-string]
     *                          [--rehydrate-priority {High, Standard}]
     *                          [--sas-token]
     *                          [--subscription]
     *                          [--timeout]
     *                          [--type {block, page}]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     * @param {string} tier The tier value to set the blob to.
     */
    az_storage_blob.set_tier = function (containerName, name, tier) {
        return new az_storage_blob_set_tier_command_builder("az storage blob set-tier", 'az_storage_blob_set_tier_command_result', containerName, name, tier);
    };
    /**
     * Get the details of a blob.
     *
     * Syntax:
     * ```
     * az storage blob show --container-name
     *                      --name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--auth-mode {key, login}]
     *                      [--connection-string]
     *                      [--if-match]
     *                      [--if-modified-since]
     *                      [--if-none-match]
     *                      [--if-unmodified-since]
     *                      [--lease-id]
     *                      [--query-examples]
     *                      [--sas-token]
     *                      [--snapshot]
     *                      [--subscription]
     *                      [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob.show = function (containerName, name) {
        return new az_storage_blob_show_command_builder("az storage blob show", 'az_storage_blob_show_command_result', containerName, name);
    };
    /**
     * Creates a read-only snapshot of a blob.
     *
     * Syntax:
     * ```
     * az storage blob snapshot --container-name
     *                          --name
     *                          [--account-key]
     *                          [--account-name]
     *                          [--auth-mode {key, login}]
     *                          [--connection-string]
     *                          [--if-match]
     *                          [--if-modified-since]
     *                          [--if-none-match]
     *                          [--if-unmodified-since]
     *                          [--lease-id]
     *                          [--metadata]
     *                          [--sas-token]
     *                          [--subscription]
     *                          [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob.snapshot = function (containerName, name) {
        return new az_storage_blob_snapshot_command_builder("az storage blob snapshot", 'az_storage_blob_snapshot_command_result', containerName, name);
    };
    /**
     * Sync blobs recursively to a storage blob container.
     *
     * Syntax:
     * ```
     * az storage blob sync --container
     *                      --source
     *                      [--account-key]
     *                      [--account-name]
     *                      [--auth-mode {key, login}]
     *                      [--connection-string]
     *                      [--destination]
     *                      [--exclude-path]
     *                      [--exclude-pattern]
     *                      [--include-pattern]
     *                      [--sas-token]
     *                      [--subscription]
     * ```
     *
     * @param {string} container The sync destination container.
     * @param {string} source The source file path to sync from.
     */
    az_storage_blob.sync = function (container, source) {
        return new az_storage_blob_sync_command_builder("az storage blob sync", 'az_storage_blob_sync_command_result', container, source);
    };
    /**
     * The undelete Blob operation restores the contents and metadata of soft deleted blob or snapshot.
     *
     * Syntax:
     * ```
     * az storage blob undelete --container-name
     *                          --name
     *                          [--account-key]
     *                          [--account-name]
     *                          [--auth-mode {key, login}]
     *                          [--connection-string]
     *                          [--sas-token]
     *                          [--subscription]
     *                          [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob.undelete = function (containerName, name) {
        return new az_storage_blob_undelete_command_builder("az storage blob undelete", 'az_storage_blob_undelete_command_result', containerName, name);
    };
    /**
     * Sets system properties on the blob.
     *
     * Syntax:
     * ```
     * az storage blob update --container-name
     *                        --name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--auth-mode {key, login}]
     *                        [--clear-content-settings {false, true}]
     *                        [--connection-string]
     *                        [--content-cache-control]
     *                        [--content-disposition]
     *                        [--content-encoding]
     *                        [--content-language]
     *                        [--content-md5]
     *                        [--content-type]
     *                        [--if-match]
     *                        [--if-modified-since]
     *                        [--if-none-match]
     *                        [--if-unmodified-since]
     *                        [--lease-id]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob.update = function (containerName, name) {
        return new az_storage_blob_update_command_builder("az storage blob update", 'az_storage_blob_update_command_result', containerName, name);
    };
    /**
     * Upload a file to a storage blob.
     *
     * Syntax:
     * ```
     * az storage blob upload --container-name
     *                        --file
     *                        --name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--auth-mode {key, login}]
     *                        [--connection-string]
     *                        [--content-cache-control]
     *                        [--content-disposition]
     *                        [--content-encoding]
     *                        [--content-language]
     *                        [--content-md5]
     *                        [--content-type]
     *                        [--encryption-scope]
     *                        [--if-match]
     *                        [--if-modified-since]
     *                        [--if-none-match]
     *                        [--if-unmodified-since]
     *                        [--lease-id]
     *                        [--max-connections]
     *                        [--maxsize-condition]
     *                        [--metadata]
     *                        [--no-progress]
     *                        [--sas-token]
     *                        [--socket-timeout]
     *                        [--subscription]
     *                        [--tier {P10, P20, P30, P4, P40, P50, P6, P60}]
     *                        [--timeout]
     *                        [--type {append, block, page}]
     *                        [--validate-content]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} file Path of the file to upload as the blob content.
     * @param {string} name The blob name.
     */
    az_storage_blob.upload = function (containerName, file, name) {
        return new az_storage_blob_upload_command_builder("az storage blob upload", 'az_storage_blob_upload_command_result', containerName, file, name);
    };
    /**
     * Upload files from a local directory to a blob container.
     *
     * Syntax:
     * ```
     * az storage blob upload-batch --destination
     *                              --source
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--content-cache-control]
     *                              [--content-disposition]
     *                              [--content-encoding]
     *                              [--content-language]
     *                              [--content-md5]
     *                              [--content-type]
     *                              [--destination-path]
     *                              [--dryrun]
     *                              [--if-match]
     *                              [--if-modified-since]
     *                              [--if-none-match]
     *                              [--if-unmodified-since]
     *                              [--lease-id]
     *                              [--max-connections]
     *                              [--maxsize-condition]
     *                              [--metadata]
     *                              [--no-progress]
     *                              [--pattern]
     *                              [--sas-token]
     *                              [--socket-timeout]
     *                              [--subscription]
     *                              [--timeout]
     *                              [--type {append, block, page}]
     *                              [--validate-content]
     * ```
     *
     * @param {string} destination The blob container where the files will be uploaded.
     * @param {string} source The directory where the files to be uploaded are located.
     */
    az_storage_blob.upload_batch = function (destination, source) {
        return new az_storage_blob_upload_batch_command_builder("az storage blob upload-batch", 'az_storage_blob_upload_batch_command_result', destination, source);
    };
    /**
     * Create the url to access a blob.
     *
     * Syntax:
     * ```
     * az storage blob url --container-name
     *                     --name
     *                     [--account-key]
     *                     [--account-name]
     *                     [--auth-mode {key, login}]
     *                     [--connection-string]
     *                     [--protocol {http, https}]
     *                     [--sas-token]
     *                     [--snapshot]
     *                     [--subscription]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The blob name.
     */
    az_storage_blob.url = function (containerName, name) {
        return new az_storage_blob_url_command_builder("az storage blob url", 'az_storage_blob_url_command_result', containerName, name);
    };
    return az_storage_blob;
}());
exports.az_storage_blob = az_storage_blob;
/** Manage container immutability policies. */
var az_storage_container_immutability_policy = /** @class */ (function () {
    function az_storage_container_immutability_policy() {
    }
    /**
     * Creates or updates an unlocked immutability policy.
     *
     * Syntax:
     * ```
     * az storage container immutability-policy create --account-name
     *                                                 --container-name
     *                                                 [--allow-protected-append-writes {false, true}]
     *                                                 [--if-match]
     *                                                 [--period]
     *                                                 [--resource-group]
     *                                                 [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     */
    az_storage_container_immutability_policy.create = function (accountName, containerName) {
        return new az_storage_container_immutability_policy_create_command_builder("az storage container immutability-policy create", 'az_storage_container_immutability_policy_create_command_result', accountName, containerName);
    };
    /**
     * Aborts an unlocked immutability policy.
     *
     * Syntax:
     * ```
     * az storage container immutability-policy delete --account-name
     *                                                 --container-name
     *                                                 --if-match
     *                                                 [--resource-group]
     *                                                 [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     * @param {string} ifMatch The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     */
    az_storage_container_immutability_policy["delete"] = function (accountName, containerName, ifMatch) {
        return new az_storage_container_immutability_policy_delete_command_builder("az storage container immutability-policy delete", 'az_storage_container_immutability_policy_delete_command_result', accountName, containerName, ifMatch);
    };
    /**
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
     *
     * Syntax:
     * ```
     * az storage container immutability-policy extend --account-name
     *                                                 --container-name
     *                                                 --if-match
     *                                                 [--allow-protected-append-writes {false, true}]
     *                                                 [--period]
     *                                                 [--resource-group]
     *                                                 [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     * @param {string} ifMatch The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     */
    az_storage_container_immutability_policy.extend = function (accountName, containerName, ifMatch) {
        return new az_storage_container_immutability_policy_extend_command_builder("az storage container immutability-policy extend", 'az_storage_container_immutability_policy_extend_command_result', accountName, containerName, ifMatch);
    };
    /**
     * Sets the ImmutabilityPolicy to Locked state.
     *
     * Syntax:
     * ```
     * az storage container immutability-policy lock --account-name
     *                                               --container-name
     *                                               --if-match
     *                                               [--resource-group]
     *                                               [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     * @param {string} ifMatch The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
     */
    az_storage_container_immutability_policy.lock = function (accountName, containerName, ifMatch) {
        return new az_storage_container_immutability_policy_lock_command_builder("az storage container immutability-policy lock", 'az_storage_container_immutability_policy_lock_command_result', accountName, containerName, ifMatch);
    };
    /**
     * Gets the existing immutability policy along with the corresponding ETag in response headers and body.
     *
     * Syntax:
     * ```
     * az storage container immutability-policy show --account-name
     *                                               --container-name
     *                                               [--if-match]
     *                                               [--query-examples]
     *                                               [--resource-group]
     *                                               [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     */
    az_storage_container_immutability_policy.show = function (accountName, containerName) {
        return new az_storage_container_immutability_policy_show_command_builder("az storage container immutability-policy show", 'az_storage_container_immutability_policy_show_command_result', accountName, containerName);
    };
    return az_storage_container_immutability_policy;
}());
exports.az_storage_container_immutability_policy = az_storage_container_immutability_policy;
/** Manage blob storage container leases. */
var az_storage_container_lease = /** @class */ (function () {
    function az_storage_container_lease() {
    }
    /**
     * Requests a new lease.
     *
     * Syntax:
     * ```
     * az storage container lease acquire --container-name
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--auth-mode {key, login}]
     *                                    [--connection-string]
     *                                    [--if-modified-since]
     *                                    [--if-unmodified-since]
     *                                    [--lease-duration]
     *                                    [--proposed-lease-id]
     *                                    [--sas-token]
     *                                    [--subscription]
     *                                    [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     */
    az_storage_container_lease.acquire = function (containerName) {
        return new az_storage_container_lease_acquire_command_builder("az storage container lease acquire", 'az_storage_container_lease_acquire_command_result', containerName);
    };
    /**
     * Break the lease, if the container has an active lease.
     *
     * Syntax:
     * ```
     * az storage container lease break --container-name
     *                                  [--account-key]
     *                                  [--account-name]
     *                                  [--auth-mode {key, login}]
     *                                  [--connection-string]
     *                                  [--if-modified-since]
     *                                  [--if-unmodified-since]
     *                                  [--lease-break-period]
     *                                  [--sas-token]
     *                                  [--subscription]
     *                                  [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     */
    az_storage_container_lease["break"] = function (containerName) {
        return new az_storage_container_lease_break_command_builder("az storage container lease break", 'az_storage_container_lease_break_command_result', containerName);
    };
    /**
     * Change the lease ID of an active lease.
     *
     * Syntax:
     * ```
     * az storage container lease change --container-name
     *                                   --lease-id
     *                                   --proposed-lease-id
     *                                   [--account-key]
     *                                   [--account-name]
     *                                   [--auth-mode {key, login}]
     *                                   [--connection-string]
     *                                   [--if-modified-since]
     *                                   [--if-unmodified-since]
     *                                   [--sas-token]
     *                                   [--subscription]
     *                                   [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} leaseId Lease ID for active lease.
     * @param {string} proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.
     */
    az_storage_container_lease.change = function (containerName, leaseId, proposedLeaseId) {
        return new az_storage_container_lease_change_command_builder("az storage container lease change", 'az_storage_container_lease_change_command_result', containerName, leaseId, proposedLeaseId);
    };
    /**
     * Release the lease.
     *
     * Syntax:
     * ```
     * az storage container lease release --container-name
     *                                    --lease-id
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--auth-mode {key, login}]
     *                                    [--connection-string]
     *                                    [--if-modified-since]
     *                                    [--if-unmodified-since]
     *                                    [--sas-token]
     *                                    [--subscription]
     *                                    [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} leaseId Lease ID for active lease.
     */
    az_storage_container_lease.release = function (containerName, leaseId) {
        return new az_storage_container_lease_release_command_builder("az storage container lease release", 'az_storage_container_lease_release_command_result', containerName, leaseId);
    };
    /**
     * Renews the lease.
     *
     * Syntax:
     * ```
     * az storage container lease renew --container-name
     *                                  --lease-id
     *                                  [--account-key]
     *                                  [--account-name]
     *                                  [--auth-mode {key, login}]
     *                                  [--connection-string]
     *                                  [--if-modified-since]
     *                                  [--if-unmodified-since]
     *                                  [--sas-token]
     *                                  [--subscription]
     *                                  [--timeout]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} leaseId Lease ID for active lease.
     */
    az_storage_container_lease.renew = function (containerName, leaseId) {
        return new az_storage_container_lease_renew_command_builder("az storage container lease renew", 'az_storage_container_lease_renew_command_result', containerName, leaseId);
    };
    return az_storage_container_lease;
}());
exports.az_storage_container_lease = az_storage_container_lease;
/** Manage container legal holds. */
var az_storage_container_legal_hold = /** @class */ (function () {
    function az_storage_container_legal_hold() {
    }
    /**
     * Clears legal hold tags.
     *
     * Syntax:
     * ```
     * az storage container legal-hold clear --account-name
     *                                       --container-name
     *                                       --tags
     *                                       [--resource-group]
     *                                       [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     * @param {string} tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.
     */
    az_storage_container_legal_hold.clear = function (accountName, containerName, tags) {
        return new az_storage_container_legal_hold_clear_command_builder("az storage container legal-hold clear", 'az_storage_container_legal_hold_clear_command_result', accountName, containerName, tags);
    };
    /**
     * Sets legal hold tags.
     *
     * Syntax:
     * ```
     * az storage container legal-hold set --account-name
     *                                     --container-name
     *                                     --tags
     *                                     [--resource-group]
     *                                     [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     * @param {string} tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.
     */
    az_storage_container_legal_hold.set = function (accountName, containerName, tags) {
        return new az_storage_container_legal_hold_set_command_builder("az storage container legal-hold set", 'az_storage_container_legal_hold_set_command_result', accountName, containerName, tags);
    };
    /**
     * Get the legal hold properties of a container.
     *
     * Syntax:
     * ```
     * az storage container legal-hold show --account-name
     *                                      --container-name
     *                                      [--query-examples]
     *                                      [--resource-group]
     *                                      [--subscription]
     * ```
     *
     * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * @param {string} containerName The container name.
     */
    az_storage_container_legal_hold.show = function (accountName, containerName) {
        return new az_storage_container_legal_hold_show_command_builder("az storage container legal-hold show", 'az_storage_container_legal_hold_show_command_result', accountName, containerName);
    };
    return az_storage_container_legal_hold;
}());
exports.az_storage_container_legal_hold = az_storage_container_legal_hold;
/** Manage container metadata. */
var az_storage_container_metadata = /** @class */ (function () {
    function az_storage_container_metadata() {
    }
    /**
     * Returns all user-defined metadata for the specified container.
     *
     * Syntax:
     * ```
     * az storage container metadata show --name
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--auth-mode {key, login}]
     *                                    [--connection-string]
     *                                    [--lease-id]
     *                                    [--query-examples]
     *                                    [--sas-token]
     *                                    [--subscription]
     *                                    [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container_metadata.show = function (name) {
        return new az_storage_container_metadata_show_command_builder("az storage container metadata show", 'az_storage_container_metadata_show_command_result', name);
    };
    /**
     * Sets one or more user-defined name-value pairs for the specified container.
     *
     * Syntax:
     * ```
     * az storage container metadata update --name
     *                                      [--account-key]
     *                                      [--account-name]
     *                                      [--auth-mode {key, login}]
     *                                      [--connection-string]
     *                                      [--if-modified-since]
     *                                      [--lease-id]
     *                                      [--metadata]
     *                                      [--sas-token]
     *                                      [--subscription]
     *                                      [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container_metadata.update = function (name) {
        return new az_storage_container_metadata_update_command_builder("az storage container metadata update", 'az_storage_container_metadata_update_command_result', name);
    };
    return az_storage_container_metadata;
}());
exports.az_storage_container_metadata = az_storage_container_metadata;
/** Manage container stored access policies. */
var az_storage_container_policy = /** @class */ (function () {
    function az_storage_container_policy() {
    }
    /**
     * Create a stored access policy on the containing object.
     *
     * Syntax:
     * ```
     * az storage container policy create --container-name
     *                                    --name
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--auth-mode {key, login}]
     *                                    [--connection-string]
     *                                    [--expiry]
     *                                    [--lease-id]
     *                                    [--permissions]
     *                                    [--sas-token]
     *                                    [--start]
     *                                    [--subscription]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The stored access policy name.
     */
    az_storage_container_policy.create = function (containerName, name) {
        return new az_storage_container_policy_create_command_builder("az storage container policy create", 'az_storage_container_policy_create_command_result', containerName, name);
    };
    /**
     * Delete a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage container policy delete --container-name
     *                                    --name
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--auth-mode {key, login}]
     *                                    [--connection-string]
     *                                    [--lease-id]
     *                                    [--sas-token]
     *                                    [--subscription]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The stored access policy name.
     */
    az_storage_container_policy["delete"] = function (containerName, name) {
        return new az_storage_container_policy_delete_command_builder("az storage container policy delete", 'az_storage_container_policy_delete_command_result', containerName, name);
    };
    /**
     * List stored access policies on a containing object.
     *
     * Syntax:
     * ```
     * az storage container policy list --container-name
     *                                  [--account-key]
     *                                  [--account-name]
     *                                  [--auth-mode {key, login}]
     *                                  [--connection-string]
     *                                  [--lease-id]
     *                                  [--query-examples]
     *                                  [--sas-token]
     *                                  [--subscription]
     * ```
     *
     * @param {string} containerName The container name.
     */
    az_storage_container_policy.list = function (containerName) {
        return new az_storage_container_policy_list_command_builder("az storage container policy list", 'az_storage_container_policy_list_command_result', containerName);
    };
    /**
     * Show a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage container policy show --container-name
     *                                  --name
     *                                  [--account-key]
     *                                  [--account-name]
     *                                  [--auth-mode {key, login}]
     *                                  [--connection-string]
     *                                  [--lease-id]
     *                                  [--query-examples]
     *                                  [--sas-token]
     *                                  [--subscription]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The stored access policy name.
     */
    az_storage_container_policy.show = function (containerName, name) {
        return new az_storage_container_policy_show_command_builder("az storage container policy show", 'az_storage_container_policy_show_command_result', containerName, name);
    };
    /**
     * Set a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage container policy update --container-name
     *                                    --name
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--auth-mode {key, login}]
     *                                    [--connection-string]
     *                                    [--expiry]
     *                                    [--lease-id]
     *                                    [--permissions]
     *                                    [--sas-token]
     *                                    [--start]
     *                                    [--subscription]
     * ```
     *
     * @param {string} containerName The container name.
     * @param {string} name The stored access policy name.
     */
    az_storage_container_policy.update = function (containerName, name) {
        return new az_storage_container_policy_update_command_builder("az storage container policy update", 'az_storage_container_policy_update_command_result', containerName, name);
    };
    return az_storage_container_policy;
}());
exports.az_storage_container_policy = az_storage_container_policy;
/** Manage blob storage containers. */
var az_storage_container = /** @class */ (function () {
    function az_storage_container() {
    }
    /**
     * Create a container in a storage account.
     *
     * Syntax:
     * ```
     * az storage container create --name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--connection-string]
     *                             [--default-encryption-scope]
     *                             [--fail-on-exist]
     *                             [--metadata]
     *                             [--prevent-encryption-scope-override {false, true}]
     *                             [--public-access {blob, container, off}]
     *                             [--resource-group]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container.create = function (name) {
        return new az_storage_container_create_command_builder("az storage container create", 'az_storage_container_create_command_result', name);
    };
    /**
     * Marks the specified container for deletion.
     *
     * Syntax:
     * ```
     * az storage container delete --name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--bypass-immutability-policy]
     *                             [--connection-string]
     *                             [--fail-not-exist]
     *                             [--if-modified-since]
     *                             [--if-unmodified-since]
     *                             [--lease-id]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container["delete"] = function (name) {
        return new az_storage_container_delete_command_builder("az storage container delete", 'az_storage_container_delete_command_result', name);
    };
    /**
     * Check for the existence of a storage container.
     *
     * Syntax:
     * ```
     * az storage container exists --name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--connection-string]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container.exists = function (name) {
        return new az_storage_container_exists_command_builder("az storage container exists", 'az_storage_container_exists_command_result', name);
    };
    /**
     * Generate a SAS token for a storage container.
     *
     * Syntax:
     * ```
     * az storage container generate-sas --name
     *                                   [--account-key]
     *                                   [--account-name]
     *                                   [--as-user]
     *                                   [--auth-mode {key, login}]
     *                                   [--cache-control]
     *                                   [--connection-string]
     *                                   [--content-disposition]
     *                                   [--content-encoding]
     *                                   [--content-language]
     *                                   [--content-type]
     *                                   [--expiry]
     *                                   [--https-only]
     *                                   [--ip]
     *                                   [--permissions]
     *                                   [--policy-name]
     *                                   [--start]
     *                                   [--subscription]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container.generate_sas = function (name) {
        return new az_storage_container_generate_sas_command_builder("az storage container generate-sas", 'az_storage_container_generate_sas_command_result', name);
    };
    /**
     * List containers in a storage account.
     *
     * Syntax:
     * ```
     * az storage container list [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--include-metadata]
     *                           [--marker]
     *                           [--num-results]
     *                           [--prefix]
     *                           [--query-examples]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     */
    az_storage_container.list = function () {
        return new az_storage_container_list_command_builder("az storage container list", 'az_storage_container_list_command_result');
    };
    /**
     * Sets the permissions for the specified container or stored access  policies that may be used with Shared Access Signatures.
     *
     * Syntax:
     * ```
     * az storage container set-permission --name
     *                                     [--account-key]
     *                                     [--account-name]
     *                                     [--auth-mode {key, login}]
     *                                     [--connection-string]
     *                                     [--if-modified-since]
     *                                     [--if-unmodified-since]
     *                                     [--lease-id]
     *                                     [--public-access {blob, container, off}]
     *                                     [--sas-token]
     *                                     [--subscription]
     *                                     [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container.set_permission = function (name) {
        return new az_storage_container_set_permission_command_builder("az storage container set-permission", 'az_storage_container_set_permission_command_result', name);
    };
    /**
     * Returns all user-defined metadata and system properties for the specified container.
     *
     * Syntax:
     * ```
     * az storage container show --name
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--lease-id]
     *                           [--query-examples]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container.show = function (name) {
        return new az_storage_container_show_command_builder("az storage container show", 'az_storage_container_show_command_result', name);
    };
    /**
     * Gets the permissions for the specified container.
     *
     * Syntax:
     * ```
     * az storage container show-permission --name
     *                                      [--account-key]
     *                                      [--account-name]
     *                                      [--auth-mode {key, login}]
     *                                      [--connection-string]
     *                                      [--lease-id]
     *                                      [--sas-token]
     *                                      [--subscription]
     *                                      [--timeout]
     * ```
     *
     * @param {string} name The container name.
     */
    az_storage_container.show_permission = function (name) {
        return new az_storage_container_show_permission_command_builder("az storage container show-permission", 'az_storage_container_show_permission_command_result', name);
    };
    return az_storage_container;
}());
exports.az_storage_container = az_storage_container;
/** Manage storage service Cross-Origin Resource Sharing (CORS). */
var az_storage_cors = /** @class */ (function () {
    function az_storage_cors() {
    }
    /**
     * Add a CORS rule to a storage account.
     *
     * Syntax:
     * ```
     * az storage cors add --methods {DELETE, GET, HEAD, MERGE, OPTIONS, POST, PUT}
     *                     --origins
     *                     --services
     *                     [--account-key]
     *                     [--account-name]
     *                     [--allowed-headers]
     *                     [--connection-string]
     *                     [--exposed-headers]
     *                     [--max-age]
     *                     [--sas-token]
     *                     [--subscription]
     *                     [--timeout]
     * ```
     *
     * @param {'DELETE' | 'GET' | 'HEAD' | 'MERGE' | 'OPTIONS' | 'POST' | 'PUT'} methods Space-separated list of HTTP methods allowed to be executed by the origin.
     * @param {string} origins Space-separated list of origin domains that will be allowed via CORS, or '\*' to allow all domains.
     * @param {string} services The storage service(s) to add rules to. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.
     */
    az_storage_cors.add = function (methods, origins, services) {
        return new az_storage_cors_add_command_builder("az storage cors add", 'az_storage_cors_add_command_result', methods, origins, services);
    };
    /**
     * Remove all CORS rules from a storage account.
     *
     * Syntax:
     * ```
     * az storage cors clear --services
     *                       [--account-key]
     *                       [--account-name]
     *                       [--connection-string]
     *                       [--sas-token]
     *                       [--subscription]
     *                       [--timeout]
     * ```
     *
     * @param {string} services The storage service(s) to remove rules from. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.
     */
    az_storage_cors.clear = function (services) {
        return new az_storage_cors_clear_command_builder("az storage cors clear", 'az_storage_cors_clear_command_result', services);
    };
    /**
     * List all CORS rules for a storage account.
     *
     * Syntax:
     * ```
     * az storage cors list [--account-key]
     *                      [--account-name]
     *                      [--connection-string]
     *                      [--query-examples]
     *                      [--sas-token]
     *                      [--services]
     *                      [--subscription]
     *                      [--timeout]
     * ```
     */
    az_storage_cors.list = function () {
        return new az_storage_cors_list_command_builder("az storage cors list", 'az_storage_cors_list_command_result');
    };
    return az_storage_cors;
}());
exports.az_storage_cors = az_storage_cors;
/** Manage file storage directory metadata. */
var az_storage_directory_metadata = /** @class */ (function () {
    function az_storage_directory_metadata() {
    }
    /**
     * Returns all user-defined metadata for the specified directory.
     *
     * Syntax:
     * ```
     * az storage directory metadata show --name
     *                                    --share-name
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--connection-string]
     *                                    [--query-examples]
     *                                    [--sas-token]
     *                                    [--snapshot]
     *                                    [--subscription]
     *                                    [--timeout]
     * ```
     *
     * @param {string} name The directory name.
     * @param {string} shareName The file share name.
     */
    az_storage_directory_metadata.show = function (name, shareName) {
        return new az_storage_directory_metadata_show_command_builder("az storage directory metadata show", 'az_storage_directory_metadata_show_command_result', name, shareName);
    };
    /**
     * Sets one or more user-defined name-value pairs for the specified directory.
     *
     * Syntax:
     * ```
     * az storage directory metadata update --name
     *                                      --share-name
     *                                      [--account-key]
     *                                      [--account-name]
     *                                      [--connection-string]
     *                                      [--metadata]
     *                                      [--sas-token]
     *                                      [--subscription]
     *                                      [--timeout]
     * ```
     *
     * @param {string} name The directory name.
     * @param {string} shareName The file share name.
     */
    az_storage_directory_metadata.update = function (name, shareName) {
        return new az_storage_directory_metadata_update_command_builder("az storage directory metadata update", 'az_storage_directory_metadata_update_command_result', name, shareName);
    };
    return az_storage_directory_metadata;
}());
exports.az_storage_directory_metadata = az_storage_directory_metadata;
/** Manage file storage directories. */
var az_storage_directory = /** @class */ (function () {
    function az_storage_directory() {
    }
    /**
     * Creates a new directory under the specified share or parent directory.
     *
     * Syntax:
     * ```
     * az storage directory create --name
     *                             --share-name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--connection-string]
     *                             [--fail-on-exist]
     *                             [--metadata]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} name The directory name.
     * @param {string} shareName The file share name.
     */
    az_storage_directory.create = function (name, shareName) {
        return new az_storage_directory_create_command_builder("az storage directory create", 'az_storage_directory_create_command_result', name, shareName);
    };
    /**
     * Deletes the specified empty directory.
     *
     * Syntax:
     * ```
     * az storage directory delete --name
     *                             --share-name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--connection-string]
     *                             [--fail-not-exist]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} name The directory name.
     * @param {string} shareName The file share name.
     */
    az_storage_directory["delete"] = function (name, shareName) {
        return new az_storage_directory_delete_command_builder("az storage directory delete", 'az_storage_directory_delete_command_result', name, shareName);
    };
    /**
     * Check for the existence of a storage directory.
     *
     * Syntax:
     * ```
     * az storage directory exists --name
     *                             --share-name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--connection-string]
     *                             [--sas-token]
     *                             [--snapshot]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} name The directory name.
     * @param {string} shareName The file share name.
     */
    az_storage_directory.exists = function (name, shareName) {
        return new az_storage_directory_exists_command_builder("az storage directory exists", 'az_storage_directory_exists_command_result', name, shareName);
    };
    /**
     * List directories in a share.
     *
     * Syntax:
     * ```
     * az storage directory list --share-name
     *                           [--account-key]
     *                           [--account-name]
     *                           [--connection-string]
     *                           [--name]
     *                           [--query-examples]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} shareName The file share name.
     */
    az_storage_directory.list = function (shareName) {
        return new az_storage_directory_list_command_builder("az storage directory list", 'az_storage_directory_list_command_result', shareName);
    };
    /**
     * Returns all user-defined metadata and system properties for the specified directory.
     *
     * Syntax:
     * ```
     * az storage directory show --name
     *                           --share-name
     *                           [--account-key]
     *                           [--account-name]
     *                           [--connection-string]
     *                           [--query-examples]
     *                           [--sas-token]
     *                           [--snapshot]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} name The directory name.
     * @param {string} shareName The file share name.
     */
    az_storage_directory.show = function (name, shareName) {
        return new az_storage_directory_show_command_builder("az storage directory show", 'az_storage_directory_show_command_result', name, shareName);
    };
    return az_storage_directory;
}());
exports.az_storage_directory = az_storage_directory;
/** Manage table storage entities. */
var az_storage_entity = /** @class */ (function () {
    function az_storage_entity() {
    }
    /**
     * Deletes an existing entity in a table.
     *
     * Syntax:
     * ```
     * az storage entity delete --partition-key
     *                          --row-key
     *                          --table-name
     *                          [--account-key]
     *                          [--account-name]
     *                          [--connection-string]
     *                          [--if-match]
     *                          [--sas-token]
     *                          [--subscription]
     *                          [--timeout]
     * ```
     *
     * @param {string} partitionKey The PartitionKey of the entity.
     * @param {string} rowKey The RowKey of the entity.
     * @param {string} tableName The name of the table containing the entity to delete.
     */
    az_storage_entity["delete"] = function (partitionKey, rowKey, tableName) {
        return new az_storage_entity_delete_command_builder("az storage entity delete", 'az_storage_entity_delete_command_result', partitionKey, rowKey, tableName);
    };
    /**
     * Insert an entity into a table.
     *
     * Syntax:
     * ```
     * az storage entity insert --entity
     *                          --table-name
     *                          [--account-key]
     *                          [--account-name]
     *                          [--connection-string]
     *                          [--if-exists {fail, merge, replace}]
     *                          [--sas-token]
     *                          [--subscription]
     *                          [--timeout]
     * ```
     *
     * @param {string} entity Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.
     * @param {string} tableName The name of the table to insert the entity into.
     */
    az_storage_entity.insert = function (entity, tableName) {
        return new az_storage_entity_insert_command_builder("az storage entity insert", 'az_storage_entity_insert_command_result', entity, tableName);
    };
    /**
     * Updates an existing entity by merging the entity's properties.
     *
     * Syntax:
     * ```
     * az storage entity merge --entity
     *                         --table-name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--if-match]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} entity The entity to merge. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.
     * @param {string} tableName The name of the table containing the entity to merge.
     */
    az_storage_entity.merge = function (entity, tableName) {
        return new az_storage_entity_merge_command_builder("az storage entity merge", 'az_storage_entity_merge_command_result', entity, tableName);
    };
    /**
     * List entities which satisfy a query.
     *
     * Syntax:
     * ```
     * az storage entity query --table-name
     *                         [--accept {full, minimal, none}]
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--filter]
     *                         [--marker]
     *                         [--num-results]
     *                         [--sas-token]
     *                         [--select]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} tableName The name of the table to query.
     */
    az_storage_entity.query = function (tableName) {
        return new az_storage_entity_query_command_builder("az storage entity query", 'az_storage_entity_query_command_result', tableName);
    };
    /**
     * Updates an existing entity in a table.
     *
     * Syntax:
     * ```
     * az storage entity replace --entity
     *                           --table-name
     *                           [--account-key]
     *                           [--account-name]
     *                           [--connection-string]
     *                           [--if-match]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} entity The entity to update. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.
     * @param {string} tableName The name of the table containing the entity to update.
     */
    az_storage_entity.replace = function (entity, tableName) {
        return new az_storage_entity_replace_command_builder("az storage entity replace", 'az_storage_entity_replace_command_result', entity, tableName);
    };
    /**
     * Get an entity from the specified table.
     *
     * Syntax:
     * ```
     * az storage entity show --partition-key
     *                        --row-key
     *                        --table-name
     *                        [--accept]
     *                        [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--query-examples]
     *                        [--sas-token]
     *                        [--select]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} partitionKey The PartitionKey of the entity.
     * @param {string} rowKey The RowKey of the entity.
     * @param {string} tableName The name of the table to get the entity from.
     */
    az_storage_entity.show = function (partitionKey, rowKey, tableName) {
        return new az_storage_entity_show_command_builder("az storage entity show", 'az_storage_entity_show_command_result', partitionKey, rowKey, tableName);
    };
    return az_storage_entity;
}());
exports.az_storage_entity = az_storage_entity;
/** Manage file copy operations. */
var az_storage_file_copy = /** @class */ (function () {
    function az_storage_file_copy() {
    }
    /**
     * Aborts a pending copy_file operation, and leaves a destination file  with zero length and full metadata.
     *
     * Syntax:
     * ```
     * az storage file copy cancel --copy-id
     *                             --destination-path
     *                             --destination-share
     *                             [--account-key]
     *                             [--account-name]
     *                             [--connection-string]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} copyId Copy identifier provided in the copy.id of the original copy_file operation.
     * @param {string} destinationPath The path to the file within the file share.
     * @param {string} destinationShare Name of the destination share. The share must exist.
     */
    az_storage_file_copy.cancel = function (copyId, destinationPath, destinationShare) {
        return new az_storage_file_copy_cancel_command_builder("az storage file copy cancel", 'az_storage_file_copy_cancel_command_result', copyId, destinationPath, destinationShare);
    };
    /**
     * Copy a file asynchronously.
     *
     * Syntax:
     * ```
     * az storage file copy start --destination-path
     *                            --destination-share
     *                            [--account-key]
     *                            [--account-name]
     *                            [--connection-string]
     *                            [--file-snapshot]
     *                            [--metadata]
     *                            [--sas-token]
     *                            [--source-account-key]
     *                            [--source-account-name]
     *                            [--source-blob]
     *                            [--source-container]
     *                            [--source-path]
     *                            [--source-sas]
     *                            [--source-share]
     *                            [--source-snapshot]
     *                            [--source-uri]
     *                            [--subscription]
     *                            [--timeout]
     * ```
     *
     * @param {string} destinationPath The path to the file within the file share.
     * @param {string} destinationShare Name of the destination share. The share must exist.
     */
    az_storage_file_copy.start = function (destinationPath, destinationShare) {
        return new az_storage_file_copy_start_command_builder("az storage file copy start", 'az_storage_file_copy_start_command_result', destinationPath, destinationShare);
    };
    /**
     * Copy multiple files or blobs to a file share.
     *
     * Syntax:
     * ```
     * az storage file copy start-batch [--account-key]
     *                                  [--account-name]
     *                                  [--connection-string]
     *                                  [--destination-path]
     *                                  [--destination-share]
     *                                  [--dryrun]
     *                                  [--metadata]
     *                                  [--pattern]
     *                                  [--sas-token]
     *                                  [--source-account-key]
     *                                  [--source-account-name]
     *                                  [--source-container]
     *                                  [--source-sas]
     *                                  [--source-share]
     *                                  [--source-uri]
     *                                  [--subscription]
     *                                  [--timeout]
     * ```
     */
    az_storage_file_copy.start_batch = function () {
        return new az_storage_file_copy_start_batch_command_builder("az storage file copy start-batch", 'az_storage_file_copy_start_batch_command_result');
    };
    return az_storage_file_copy;
}());
exports.az_storage_file_copy = az_storage_file_copy;
/** Manage file metadata. */
var az_storage_file_metadata = /** @class */ (function () {
    function az_storage_file_metadata() {
    }
    /**
     * Returns all user-defined metadata for the specified file.
     *
     * Syntax:
     * ```
     * az storage file metadata show --path
     *                               --share-name
     *                               [--account-key]
     *                               [--account-name]
     *                               [--connection-string]
     *                               [--query-examples]
     *                               [--sas-token]
     *                               [--snapshot]
     *                               [--subscription]
     *                               [--timeout]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file_metadata.show = function (path, shareName) {
        return new az_storage_file_metadata_show_command_builder("az storage file metadata show", 'az_storage_file_metadata_show_command_result', path, shareName);
    };
    /**
     * Sets user-defined metadata for the specified file as one or more name-value pairs.
     *
     * Syntax:
     * ```
     * az storage file metadata update --path
     *                                 --share-name
     *                                 [--account-key]
     *                                 [--account-name]
     *                                 [--connection-string]
     *                                 [--metadata]
     *                                 [--sas-token]
     *                                 [--subscription]
     *                                 [--timeout]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file_metadata.update = function (path, shareName) {
        return new az_storage_file_metadata_update_command_builder("az storage file metadata update", 'az_storage_file_metadata_update_command_result', path, shareName);
    };
    return az_storage_file_metadata;
}());
exports.az_storage_file_metadata = az_storage_file_metadata;
/** Manage file shares that use the SMB 3.0 protocol. */
var az_storage_file = /** @class */ (function () {
    function az_storage_file() {
    }
    /**
     * Marks the specified file for deletion.
     *
     * Syntax:
     * ```
     * az storage file delete --path
     *                        --share-name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file["delete"] = function (path, shareName) {
        return new az_storage_file_delete_command_builder("az storage file delete", 'az_storage_file_delete_command_result', path, shareName);
    };
    /**
     * Delete files from an Azure Storage File Share.
     *
     * Syntax:
     * ```
     * az storage file delete-batch --source
     *                              [--account-key]
     *                              [--account-name]
     *                              [--connection-string]
     *                              [--dryrun]
     *                              [--pattern]
     *                              [--sas-token]
     *                              [--subscription]
     *                              [--timeout]
     * ```
     *
     * @param {string} source The source of the file delete operation. The source can be the file share URL or the share name.
     */
    az_storage_file.delete_batch = function (source) {
        return new az_storage_file_delete_batch_command_builder("az storage file delete-batch", 'az_storage_file_delete_batch_command_result', source);
    };
    /**
     * Downloads a file to a file path, with automatic chunking and progress notifications.
     *
     * Syntax:
     * ```
     * az storage file download --path
     *                          --share-name
     *                          [--account-key]
     *                          [--account-name]
     *                          [--connection-string]
     *                          [--dest]
     *                          [--end-range]
     *                          [--max-connections]
     *                          [--no-progress]
     *                          [--open-mode]
     *                          [--sas-token]
     *                          [--snapshot]
     *                          [--start-range]
     *                          [--subscription]
     *                          [--timeout]
     *                          [--validate-content]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file.download = function (path, shareName) {
        return new az_storage_file_download_command_builder("az storage file download", 'az_storage_file_download_command_result', path, shareName);
    };
    /**
     * Download files from an Azure Storage File Share to a local directory in a batch operation.
     *
     * Syntax:
     * ```
     * az storage file download-batch --destination
     *                                --source
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--dryrun]
     *                                [--max-connections]
     *                                [--no-progress]
     *                                [--pattern]
     *                                [--sas-token]
     *                                [--snapshot]
     *                                [--subscription]
     *                                [--validate-content]
     * ```
     *
     * @param {string} destination The local directory where the files are downloaded to. This directory must already exist.
     * @param {string} source The source of the file download operation. The source can be the file share URL or the share name.
     */
    az_storage_file.download_batch = function (destination, source) {
        return new az_storage_file_download_batch_command_builder("az storage file download-batch", 'az_storage_file_download_batch_command_result', destination, source);
    };
    /**
     * Check for the existence of a file.
     *
     * Syntax:
     * ```
     * az storage file exists --path
     *                        --share-name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--snapshot]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file.exists = function (path, shareName) {
        return new az_storage_file_exists_command_builder("az storage file exists", 'az_storage_file_exists_command_result', path, shareName);
    };
    /**
     * Generates a shared access signature for the file.
     *
     * Syntax:
     * ```
     * az storage file generate-sas --path
     *                              --share-name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--cache-control]
     *                              [--connection-string]
     *                              [--content-disposition]
     *                              [--content-encoding]
     *                              [--content-language]
     *                              [--content-type]
     *                              [--expiry]
     *                              [--https-only]
     *                              [--ip]
     *                              [--permissions]
     *                              [--policy-name]
     *                              [--start]
     *                              [--subscription]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file.generate_sas = function (path, shareName) {
        return new az_storage_file_generate_sas_command_builder("az storage file generate-sas", 'az_storage_file_generate_sas_command_result', path, shareName);
    };
    /**
     * List files and directories in a share.
     *
     * Syntax:
     * ```
     * az storage file list --share-name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--connection-string]
     *                      [--exclude-dir]
     *                      [--marker]
     *                      [--num-results]
     *                      [--path]
     *                      [--query-examples]
     *                      [--sas-token]
     *                      [--snapshot]
     *                      [--subscription]
     *                      [--timeout]
     * ```
     *
     * @param {string} shareName The file share name.
     */
    az_storage_file.list = function (shareName) {
        return new az_storage_file_list_command_builder("az storage file list", 'az_storage_file_list_command_result', shareName);
    };
    /**
     * Resizes a file to the specified size.
     *
     * Syntax:
     * ```
     * az storage file resize --path
     *                        --share-name
     *                        --size
     *                        [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     * @param {string} size The length to resize the file to.
     */
    az_storage_file.resize = function (path, shareName, size) {
        return new az_storage_file_resize_command_builder("az storage file resize", 'az_storage_file_resize_command_result', path, shareName, size);
    };
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties for the file.
     *
     * Syntax:
     * ```
     * az storage file show --path
     *                      --share-name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--connection-string]
     *                      [--query-examples]
     *                      [--sas-token]
     *                      [--snapshot]
     *                      [--subscription]
     *                      [--timeout]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file.show = function (path, shareName) {
        return new az_storage_file_show_command_builder("az storage file show", 'az_storage_file_show_command_result', path, shareName);
    };
    /**
     * Sets system properties on the file.
     *
     * Syntax:
     * ```
     * az storage file update --path
     *                        --share-name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--clear-content-settings {false, true}]
     *                        [--connection-string]
     *                        [--content-cache-control]
     *                        [--content-disposition]
     *                        [--content-encoding]
     *                        [--content-language]
     *                        [--content-md5]
     *                        [--content-type]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file.update = function (path, shareName) {
        return new az_storage_file_update_command_builder("az storage file update", 'az_storage_file_update_command_result', path, shareName);
    };
    /**
     * Upload a file to a share that uses the SMB 3.0 protocol.
     *
     * Syntax:
     * ```
     * az storage file upload --share-name
     *                        --source
     *                        [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--content-cache-control]
     *                        [--content-disposition]
     *                        [--content-encoding]
     *                        [--content-language]
     *                        [--content-md5]
     *                        [--content-type]
     *                        [--max-connections]
     *                        [--metadata]
     *                        [--no-progress]
     *                        [--path]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     *                        [--validate-content]
     * ```
     *
     * @param {string} shareName The file share name.
     * @param {string} source Path of the local file to upload as the file content.
     */
    az_storage_file.upload = function (shareName, source) {
        return new az_storage_file_upload_command_builder("az storage file upload", 'az_storage_file_upload_command_result', shareName, source);
    };
    /**
     * Upload files from a local directory to an Azure Storage File Share in a batch operation.
     *
     * Syntax:
     * ```
     * az storage file upload-batch --destination
     *                              --source
     *                              [--account-key]
     *                              [--account-name]
     *                              [--connection-string]
     *                              [--content-cache-control]
     *                              [--content-disposition]
     *                              [--content-encoding]
     *                              [--content-language]
     *                              [--content-md5]
     *                              [--content-type]
     *                              [--destination-path]
     *                              [--dryrun]
     *                              [--max-connections]
     *                              [--metadata]
     *                              [--no-progress]
     *                              [--pattern]
     *                              [--sas-token]
     *                              [--subscription]
     *                              [--validate-content]
     * ```
     *
     * @param {string} destination The destination of the upload operation.
     * @param {string} source The directory to upload files from.
     */
    az_storage_file.upload_batch = function (destination, source) {
        return new az_storage_file_upload_batch_command_builder("az storage file upload-batch", 'az_storage_file_upload_batch_command_result', destination, source);
    };
    /**
     * Create the url to access a file.
     *
     * Syntax:
     * ```
     * az storage file url --path
     *                     --share-name
     *                     [--account-key]
     *                     [--account-name]
     *                     [--connection-string]
     *                     [--protocol {http, https}]
     *                     [--sas-token]
     *                     [--subscription]
     * ```
     *
     * @param {string} path The path to the file within the file share.
     * @param {string} shareName The file share name.
     */
    az_storage_file.url = function (path, shareName) {
        return new az_storage_file_url_command_builder("az storage file url", 'az_storage_file_url_command_result', path, shareName);
    };
    return az_storage_file;
}());
exports.az_storage_file = az_storage_file;
/** Manage file system access and permissions for Azure Data Lake Storage Gen2 account. */
var az_storage_fs_access = /** @class */ (function () {
    function az_storage_fs_access() {
    }
    /**
     * Set the access control properties of a path(directory or file) in Azure Data Lake Storage Gen2 account.
     *
     * Syntax:
     * ```
     * az storage fs access set --file-system
     *                          --path
     *                          [--account-key]
     *                          [--account-name]
     *                          [--acl]
     *                          [--auth-mode {key, login}]
     *                          [--connection-string]
     *                          [--group]
     *                          [--owner]
     *                          [--permissions]
     *                          [--sas-token]
     *                          [--subscription]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The path to a file or directory in the specified file system.
     */
    az_storage_fs_access.set = function (fileSystem, path) {
        return new az_storage_fs_access_set_command_builder("az storage fs access set", 'az_storage_fs_access_set_command_result', fileSystem, path);
    };
    /**
     * Show the access control properties of a path (directory or file) in Azure Data Lake Storage Gen2 account.
     *
     * Syntax:
     * ```
     * az storage fs access show --file-system
     *                           --path
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--query-examples]
     *                           [--sas-token]
     *                           [--subscription]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The path to a file or directory in the specified file system.
     */
    az_storage_fs_access.show = function (fileSystem, path) {
        return new az_storage_fs_access_show_command_builder("az storage fs access show", 'az_storage_fs_access_show_command_result', fileSystem, path);
    };
    return az_storage_fs_access;
}());
exports.az_storage_fs_access = az_storage_fs_access;
/** Manage the metadata for directory in file system. */
var az_storage_fs_directory_metadata = /** @class */ (function () {
    function az_storage_fs_directory_metadata() {
    }
    /**
     * Return all user-defined metadata for the specified directory.
     *
     * Syntax:
     * ```
     * az storage fs directory metadata show --file-system
     *                                       --name
     *                                       [--account-key]
     *                                       [--account-name]
     *                                       [--auth-mode {key, login}]
     *                                       [--connection-string]
     *                                       [--query-examples]
     *                                       [--sas-token]
     *                                       [--subscription]
     *                                       [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} name The name of directory.
     */
    az_storage_fs_directory_metadata.show = function (fileSystem, name) {
        return new az_storage_fs_directory_metadata_show_command_builder("az storage fs directory metadata show", 'az_storage_fs_directory_metadata_show_command_result', fileSystem, name);
    };
    /**
     * Sets one or more user-defined name-value pairs for the specified file system.
     *
     * Syntax:
     * ```
     * az storage fs directory metadata update --file-system
     *                                         --metadata
     *                                         --name
     *                                         [--account-key]
     *                                         [--account-name]
     *                                         [--auth-mode {key, login}]
     *                                         [--connection-string]
     *                                         [--sas-token]
     *                                         [--subscription]
     *                                         [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} metadata Metadata in space-separated key=value pairs. This overwrites any existing metadata.
     * @param {string} name The name of directory.
     */
    az_storage_fs_directory_metadata.update = function (fileSystem, metadata, name) {
        return new az_storage_fs_directory_metadata_update_command_builder("az storage fs directory metadata update", 'az_storage_fs_directory_metadata_update_command_result', fileSystem, metadata, name);
    };
    return az_storage_fs_directory_metadata;
}());
exports.az_storage_fs_directory_metadata = az_storage_fs_directory_metadata;
/** Manage directories in Azure Data Lake Storage Gen2 account. */
var az_storage_fs_directory = /** @class */ (function () {
    function az_storage_fs_directory() {
    }
    /**
     * Create a directory in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs directory create --file-system
     *                                --name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--metadata]
     *                                [--permissions]
     *                                [--sas-token]
     *                                [--subscription]
     *                                [--timeout]
     *                                [--umask]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} name The name of directory.
     */
    az_storage_fs_directory.create = function (fileSystem, name) {
        return new az_storage_fs_directory_create_command_builder("az storage fs directory create", 'az_storage_fs_directory_create_command_result', fileSystem, name);
    };
    /**
     * Delete a directory in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs directory delete --file-system
     *                                --name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--sas-token]
     *                                [--subscription]
     *                                [--timeout]
     *                                [--yes]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} name The name of directory.
     */
    az_storage_fs_directory["delete"] = function (fileSystem, name) {
        return new az_storage_fs_directory_delete_command_builder("az storage fs directory delete", 'az_storage_fs_directory_delete_command_result', fileSystem, name);
    };
    /**
     * Check for the existence of a directory in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs directory exists --file-system
     *                                --name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--sas-token]
     *                                [--subscription]
     *                                [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} name The name of directory.
     */
    az_storage_fs_directory.exists = function (fileSystem, name) {
        return new az_storage_fs_directory_exists_command_builder("az storage fs directory exists", 'az_storage_fs_directory_exists_command_result', fileSystem, name);
    };
    /**
     * List directories in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs directory list --file-system
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--num-results]
     *                              [--path]
     *                              [--query-examples]
     *                              [--recursive {false, true}]
     *                              [--sas-token]
     *                              [--subscription]
     *                              [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     */
    az_storage_fs_directory.list = function (fileSystem) {
        return new az_storage_fs_directory_list_command_builder("az storage fs directory list", 'az_storage_fs_directory_list_command_result', fileSystem);
    };
    /**
     * Move a directory in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs directory move --file-system
     *                              --name
     *                              --new-directory
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--sas-token]
     *                              [--subscription]
     *                              [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} name The name of directory.
     * @param {string} newDirectory The new directory name the users want to move to. The value must have the following format: "{filesystem}/{directory}/{subdirectory}".
     */
    az_storage_fs_directory.move = function (fileSystem, name, newDirectory) {
        return new az_storage_fs_directory_move_command_builder("az storage fs directory move", 'az_storage_fs_directory_move_command_result', fileSystem, name, newDirectory);
    };
    /**
     * Show properties of a directory in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs directory show --file-system
     *                              --name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--query-examples]
     *                              [--sas-token]
     *                              [--subscription]
     *                              [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} name The name of directory.
     */
    az_storage_fs_directory.show = function (fileSystem, name) {
        return new az_storage_fs_directory_show_command_builder("az storage fs directory show", 'az_storage_fs_directory_show_command_result', fileSystem, name);
    };
    return az_storage_fs_directory;
}());
exports.az_storage_fs_directory = az_storage_fs_directory;
/** Manage the metadata for file in file system. */
var az_storage_fs_file_metadata = /** @class */ (function () {
    function az_storage_fs_file_metadata() {
    }
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties for the file.
     *
     * Syntax:
     * ```
     * az storage fs file metadata show --file-system
     *                                  --path
     *                                  [--account-key]
     *                                  [--account-name]
     *                                  [--auth-mode {key, login}]
     *                                  [--connection-string]
     *                                  [--query-examples]
     *                                  [--sas-token]
     *                                  [--subscription]
     *                                  [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file_metadata.show = function (fileSystem, path) {
        return new az_storage_fs_file_metadata_show_command_builder("az storage fs file metadata show", 'az_storage_fs_file_metadata_show_command_result', fileSystem, path);
    };
    /**
     * Sets one or more user-defined name-value pairs for the specified file system.
     *
     * Syntax:
     * ```
     * az storage fs file metadata update --file-system
     *                                    --metadata
     *                                    --path
     *                                    [--account-key]
     *                                    [--account-name]
     *                                    [--auth-mode {key, login}]
     *                                    [--connection-string]
     *                                    [--sas-token]
     *                                    [--subscription]
     *                                    [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} metadata Metadata in space-separated key=value pairs. This overwrites any existing metadata.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file_metadata.update = function (fileSystem, metadata, path) {
        return new az_storage_fs_file_metadata_update_command_builder("az storage fs file metadata update", 'az_storage_fs_file_metadata_update_command_result', fileSystem, metadata, path);
    };
    return az_storage_fs_file_metadata;
}());
exports.az_storage_fs_file_metadata = az_storage_fs_file_metadata;
/** Manage files in Azure Data Lake Storage Gen2 account. */
var az_storage_fs_file = /** @class */ (function () {
    function az_storage_fs_file() {
    }
    /**
     * Append content to a file in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file append --content
     *                           --file-system
     *                           --path
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} content Content to be appended to file.
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file.append = function (content, fileSystem, path) {
        return new az_storage_fs_file_append_command_builder("az storage fs file append", 'az_storage_fs_file_append_command_result', content, fileSystem, path);
    };
    /**
     * Create a new file in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file create --file-system
     *                           --path
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--content-cache-control]
     *                           [--content-disposition]
     *                           [--content-encoding]
     *                           [--content-language]
     *                           [--content-md5]
     *                           [--content-type]
     *                           [--metadata]
     *                           [--permissions]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     *                           [--umask]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file.create = function (fileSystem, path) {
        return new az_storage_fs_file_create_command_builder("az storage fs file create", 'az_storage_fs_file_create_command_result', fileSystem, path);
    };
    /**
     * Delete a file in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file delete --file-system
     *                           --path
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     *                           [--yes]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file["delete"] = function (fileSystem, path) {
        return new az_storage_fs_file_delete_command_builder("az storage fs file delete", 'az_storage_fs_file_delete_command_result', fileSystem, path);
    };
    /**
     * Download a file from the specified path in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file download --file-system
     *                             --path
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--connection-string]
     *                             [--destination]
     *                             [--overwrite {false, true}]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file.download = function (fileSystem, path) {
        return new az_storage_fs_file_download_command_builder("az storage fs file download", 'az_storage_fs_file_download_command_result', fileSystem, path);
    };
    /**
     * Check for the existence of a file in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file exists --file-system
     *                           --path
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file.exists = function (fileSystem, path) {
        return new az_storage_fs_file_exists_command_builder("az storage fs file exists", 'az_storage_fs_file_exists_command_result', fileSystem, path);
    };
    /**
     * List files and directories in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file list --file-system
     *                         [--account-key]
     *                         [--account-name]
     *                         [--auth-mode {key, login}]
     *                         [--connection-string]
     *                         [--exclude-dir]
     *                         [--marker]
     *                         [--num-results]
     *                         [--path]
     *                         [--query-examples]
     *                         [--recursive {false, true}]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     */
    az_storage_fs_file.list = function (fileSystem) {
        return new az_storage_fs_file_list_command_builder("az storage fs file list", 'az_storage_fs_file_list_command_result', fileSystem);
    };
    /**
     * Move a file in ADLS Gen2 Account.
     *
     * Syntax:
     * ```
     * az storage fs file move --file-system
     *                         --new-path
     *                         --path
     *                         [--account-key]
     *                         [--account-name]
     *                         [--auth-mode {key, login}]
     *                         [--connection-string]
     *                         [--content-cache-control]
     *                         [--content-disposition]
     *                         [--content-encoding]
     *                         [--content-language]
     *                         [--content-md5]
     *                         [--content-type]
     *                         [--sas-token]
     *                         [--subscription]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} newPath The new path the users want to move to. The value must have the following format: "{filesystem}/{directory}/{subdirectory}/{file}".
     * @param {string} path The original file path users want to move in a file system.
     */
    az_storage_fs_file.move = function (fileSystem, newPath, path) {
        return new az_storage_fs_file_move_command_builder("az storage fs file move", 'az_storage_fs_file_move_command_result', fileSystem, newPath, path);
    };
    /**
     * Show properties of file in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file show --file-system
     *                         --path
     *                         [--account-key]
     *                         [--account-name]
     *                         [--auth-mode {key, login}]
     *                         [--connection-string]
     *                         [--query-examples]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     */
    az_storage_fs_file.show = function (fileSystem, path) {
        return new az_storage_fs_file_show_command_builder("az storage fs file show", 'az_storage_fs_file_show_command_result', fileSystem, path);
    };
    /**
     * Upload a file to a file path in ADLS Gen2 file system.
     *
     * Syntax:
     * ```
     * az storage fs file upload --file-system
     *                           --path
     *                           --source
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--content-cache-control]
     *                           [--content-disposition]
     *                           [--content-encoding]
     *                           [--content-language]
     *                           [--content-md5]
     *                           [--content-type]
     *                           [--if-match]
     *                           [--if-modified-since]
     *                           [--if-none-match]
     *                           [--if-unmodified-since]
     *                           [--metadata]
     *                           [--overwrite {false, true}]
     *                           [--permissions]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     *                           [--umask]
     * ```
     *
     * @param {string} fileSystem File system name.
     * @param {string} path The file path in a file system.
     * @param {string} source Path of the local file to upload as the file content.
     */
    az_storage_fs_file.upload = function (fileSystem, path, source) {
        return new az_storage_fs_file_upload_command_builder("az storage fs file upload", 'az_storage_fs_file_upload_command_result', fileSystem, path, source);
    };
    return az_storage_fs_file;
}());
exports.az_storage_fs_file = az_storage_fs_file;
/** Manage the metadata for file system. */
var az_storage_fs_metadata = /** @class */ (function () {
    function az_storage_fs_metadata() {
    }
    /**
     * Return all user-defined metadata for the specified file system.
     *
     * Syntax:
     * ```
     * az storage fs metadata show --name
     *                             [--account-key]
     *                             [--account-name]
     *                             [--auth-mode {key, login}]
     *                             [--connection-string]
     *                             [--query-examples]
     *                             [--sas-token]
     *                             [--subscription]
     *                             [--timeout]
     * ```
     *
     * @param {string} name File system name.
     */
    az_storage_fs_metadata.show = function (name) {
        return new az_storage_fs_metadata_show_command_builder("az storage fs metadata show", 'az_storage_fs_metadata_show_command_result', name);
    };
    /**
     * Sets one or more user-defined name-value pairs for the specified file system.
     *
     * Syntax:
     * ```
     * az storage fs metadata update --metadata
     *                               --name
     *                               [--account-key]
     *                               [--account-name]
     *                               [--auth-mode {key, login}]
     *                               [--connection-string]
     *                               [--sas-token]
     *                               [--subscription]
     *                               [--timeout]
     * ```
     *
     * @param {string} metadata Metadata in space-separated key=value pairs. This overwrites any existing metadata.
     * @param {string} name File system name.
     */
    az_storage_fs_metadata.update = function (metadata, name) {
        return new az_storage_fs_metadata_update_command_builder("az storage fs metadata update", 'az_storage_fs_metadata_update_command_result', metadata, name);
    };
    return az_storage_fs_metadata;
}());
exports.az_storage_fs_metadata = az_storage_fs_metadata;
/** Manage file systems in Azure Data Lake Storage Gen2 account. */
var az_storage_fs = /** @class */ (function () {
    function az_storage_fs() {
    }
    /**
     * Create file system for Azure Data Lake Storage Gen2 account.
     *
     * Syntax:
     * ```
     * az storage fs create --name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--auth-mode {key, login}]
     *                      [--connection-string]
     *                      [--metadata]
     *                      [--public-access {file, filesystem, off}]
     *                      [--sas-token]
     *                      [--subscription]
     *                      [--timeout]
     * ```
     *
     * @param {string} name File system name.
     */
    az_storage_fs.create = function (name) {
        return new az_storage_fs_create_command_builder("az storage fs create", 'az_storage_fs_create_command_result', name);
    };
    /**
     * Delete a file system in ADLS Gen2 account.
     *
     * Syntax:
     * ```
     * az storage fs delete --name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--auth-mode {key, login}]
     *                      [--connection-string]
     *                      [--sas-token]
     *                      [--subscription]
     *                      [--timeout]
     *                      [--yes]
     * ```
     *
     * @param {string} name File system name.
     */
    az_storage_fs["delete"] = function (name) {
        return new az_storage_fs_delete_command_builder("az storage fs delete", 'az_storage_fs_delete_command_result', name);
    };
    /**
     * Check for the existence of a file system in ADLS Gen2 account.
     *
     * Syntax:
     * ```
     * az storage fs exists --name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--auth-mode {key, login}]
     *                      [--connection-string]
     *                      [--sas-token]
     *                      [--subscription]
     *                      [--timeout]
     * ```
     *
     * @param {string} name File system name.
     */
    az_storage_fs.exists = function (name) {
        return new az_storage_fs_exists_command_builder("az storage fs exists", 'az_storage_fs_exists_command_result', name);
    };
    /**
     * List file systems in ADLS Gen2 account.
     *
     * Syntax:
     * ```
     * az storage fs list [--account-key]
     *                    [--account-name]
     *                    [--auth-mode {key, login}]
     *                    [--connection-string]
     *                    [--include-metadata {false, true}]
     *                    [--prefix]
     *                    [--query-examples]
     *                    [--sas-token]
     *                    [--subscription]
     * ```
     */
    az_storage_fs.list = function () {
        return new az_storage_fs_list_command_builder("az storage fs list", 'az_storage_fs_list_command_result');
    };
    /**
     * Show properties of file system in ADLS Gen2 account.
     *
     * Syntax:
     * ```
     * az storage fs show --name
     *                    [--account-key]
     *                    [--account-name]
     *                    [--auth-mode {key, login}]
     *                    [--connection-string]
     *                    [--query-examples]
     *                    [--sas-token]
     *                    [--subscription]
     *                    [--timeout]
     * ```
     *
     * @param {string} name File system name.
     */
    az_storage_fs.show = function (name) {
        return new az_storage_fs_show_command_builder("az storage fs show", 'az_storage_fs_show_command_result', name);
    };
    return az_storage_fs;
}());
exports.az_storage_fs = az_storage_fs;
/** Manage storage service logging information. */
var az_storage_logging = /** @class */ (function () {
    function az_storage_logging() {
    }
    /**
     * Turn off logging for a storage account.
     *
     * Syntax:
     * ```
     * az storage logging off [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--services]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     */
    az_storage_logging.off = function () {
        return new az_storage_logging_off_command_builder("az storage logging off", 'az_storage_logging_off_command_result');
    };
    /**
     * Show logging settings for a storage account.
     *
     * Syntax:
     * ```
     * az storage logging show [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--query-examples]
     *                         [--sas-token]
     *                         [--services]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     */
    az_storage_logging.show = function () {
        return new az_storage_logging_show_command_builder("az storage logging show", 'az_storage_logging_show_command_result');
    };
    /**
     * Update logging settings for a storage account.
     *
     * Syntax:
     * ```
     * az storage logging update --log
     *                           --retention
     *                           --services
     *                           [--account-key]
     *                           [--account-name]
     *                           [--connection-string]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     *                           [--version]
     * ```
     *
     * @param {string} log The operations for which to enable logging: (r)ead (w)rite (d)elete. Can be combined.
     * @param {string} retention Number of days for which to retain logs. 0 to disable.
     * @param {string} services The storage service(s) for which to update logging info: (b)lob (q)ueue (t)able. Can be combined.
     */
    az_storage_logging.update = function (log, retention, services) {
        return new az_storage_logging_update_command_builder("az storage logging update", 'az_storage_logging_update_command_result', log, retention, services);
    };
    return az_storage_logging;
}());
exports.az_storage_logging = az_storage_logging;
/** Manage queue storage messages. */
var az_storage_message = /** @class */ (function () {
    function az_storage_message() {
    }
    /**
     * Deletes all messages from the specified queue.
     *
     * Syntax:
     * ```
     * az storage message clear --queue-name
     *                          [--account-key]
     *                          [--account-name]
     *                          [--auth-mode {key, login}]
     *                          [--connection-string]
     *                          [--sas-token]
     *                          [--subscription]
     *                          [--timeout]
     * ```
     *
     * @param {string} queueName The queue name.
     */
    az_storage_message.clear = function (queueName) {
        return new az_storage_message_clear_command_builder("az storage message clear", 'az_storage_message_clear_command_result', queueName);
    };
    /**
     * Deletes the specified message.
     *
     * Syntax:
     * ```
     * az storage message delete --id
     *                           --pop-receipt
     *                           --queue-name
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} id The message id identifying the message to delete.
     * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the get_messages() or update_message().
     * @param {string} queueName The queue name.
     */
    az_storage_message["delete"] = function (id, popReceipt, queueName) {
        return new az_storage_message_delete_command_builder("az storage message delete", 'az_storage_message_delete_command_result', id, popReceipt, queueName);
    };
    /**
     * Retrieves one or more messages from the front of the queue.
     *
     * Syntax:
     * ```
     * az storage message get --queue-name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--auth-mode {key, login}]
     *                        [--connection-string]
     *                        [--num-messages]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     *                        [--visibility-timeout]
     * ```
     *
     * @param {string} queueName The queue name.
     */
    az_storage_message.get = function (queueName) {
        return new az_storage_message_get_command_builder("az storage message get", 'az_storage_message_get_command_result', queueName);
    };
    /**
     * Retrieves one or more messages from the front of the queue, but does not alter the visibility of the message.
     *
     * Syntax:
     * ```
     * az storage message peek --queue-name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--auth-mode {key, login}]
     *                         [--connection-string]
     *                         [--num-messages]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} queueName The queue name.
     */
    az_storage_message.peek = function (queueName) {
        return new az_storage_message_peek_command_builder("az storage message peek", 'az_storage_message_peek_command_result', queueName);
    };
    /**
     * Adds a new message to the back of the message queue.
     *
     * Syntax:
     * ```
     * az storage message put --content
     *                        --queue-name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--auth-mode {key, login}]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--time-to-live]
     *                        [--timeout]
     *                        [--visibility-timeout]
     * ```
     *
     * @param {string} content Message content, up to 64KB in size.
     * @param {string} queueName The queue name.
     */
    az_storage_message.put = function (content, queueName) {
        return new az_storage_message_put_command_builder("az storage message put", 'az_storage_message_put_command_result', content, queueName);
    };
    /**
     * Updates the visibility timeout of a message.
     *
     * Syntax:
     * ```
     * az storage message update --id
     *                           --pop-receipt
     *                           --queue-name
     *                           --visibility-timeout
     *                           [--account-key]
     *                           [--account-name]
     *                           [--auth-mode {key, login}]
     *                           [--connection-string]
     *                           [--content]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} id The message id identifying the message to update.
     * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the get_messages() or update_message() operation.
     * @param {string} queueName The queue name.
     * @param {string} visibilityTimeout Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. A message can be updated until it has been deleted or has expired.
     */
    az_storage_message.update = function (id, popReceipt, queueName, visibilityTimeout) {
        return new az_storage_message_update_command_builder("az storage message update", 'az_storage_message_update_command_result', id, popReceipt, queueName, visibilityTimeout);
    };
    return az_storage_message;
}());
exports.az_storage_message = az_storage_message;
/** Manage storage service metrics. */
var az_storage_metrics = /** @class */ (function () {
    function az_storage_metrics() {
    }
    /**
     * Show metrics settings for a storage account.
     *
     * Syntax:
     * ```
     * az storage metrics show [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--interval {both, hour, minute}]
     *                         [--query-examples]
     *                         [--sas-token]
     *                         [--services]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     */
    az_storage_metrics.show = function () {
        return new az_storage_metrics_show_command_builder("az storage metrics show", 'az_storage_metrics_show_command_result');
    };
    /**
     * Update metrics settings for a storage account.
     *
     * Syntax:
     * ```
     * az storage metrics update --retention
     *                           --services
     *                           [--account-key]
     *                           [--account-name]
     *                           [--api {false, true}]
     *                           [--connection-string]
     *                           [--hour {false, true}]
     *                           [--minute {false, true}]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} retention Number of days for which to retain metrics. 0 to disable. Applies to both hour and minute metrics if both are specified.
     * @param {string} services The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.
     */
    az_storage_metrics.update = function (retention, services) {
        return new az_storage_metrics_update_command_builder("az storage metrics update", 'az_storage_metrics_update_command_result', retention, services);
    };
    return az_storage_metrics;
}());
exports.az_storage_metrics = az_storage_metrics;
/** Manage the metadata for a storage queue. */
var az_storage_queue_metadata = /** @class */ (function () {
    function az_storage_queue_metadata() {
    }
    /**
     * Retrieves user-defined metadata and queue properties on the specified queue.
     *
     * Syntax:
     * ```
     * az storage queue metadata show --name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--query-examples]
     *                                [--sas-token]
     *                                [--subscription]
     *                                [--timeout]
     * ```
     *
     * @param {string} name The queue name.
     */
    az_storage_queue_metadata.show = function (name) {
        return new az_storage_queue_metadata_show_command_builder("az storage queue metadata show", 'az_storage_queue_metadata_show_command_result', name);
    };
    /**
     * Sets user-defined metadata on the specified queue.
     *
     * Syntax:
     * ```
     * az storage queue metadata update --name
     *                                  [--account-key]
     *                                  [--account-name]
     *                                  [--auth-mode {key, login}]
     *                                  [--connection-string]
     *                                  [--metadata]
     *                                  [--sas-token]
     *                                  [--subscription]
     *                                  [--timeout]
     * ```
     *
     * @param {string} name The queue name.
     */
    az_storage_queue_metadata.update = function (name) {
        return new az_storage_queue_metadata_update_command_builder("az storage queue metadata update", 'az_storage_queue_metadata_update_command_result', name);
    };
    return az_storage_queue_metadata;
}());
exports.az_storage_queue_metadata = az_storage_queue_metadata;
/** Manage shared access policies for a storage queue. */
var az_storage_queue_policy = /** @class */ (function () {
    function az_storage_queue_policy() {
    }
    /**
     * Create a stored access policy on the containing object.
     *
     * Syntax:
     * ```
     * az storage queue policy create --name
     *                                --queue-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--expiry]
     *                                [--permissions]
     *                                [--sas-token]
     *                                [--start]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} queueName The queue name.
     */
    az_storage_queue_policy.create = function (name, queueName) {
        return new az_storage_queue_policy_create_command_builder("az storage queue policy create", 'az_storage_queue_policy_create_command_result', name, queueName);
    };
    /**
     * Delete a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage queue policy delete --name
     *                                --queue-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--sas-token]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} queueName The queue name.
     */
    az_storage_queue_policy["delete"] = function (name, queueName) {
        return new az_storage_queue_policy_delete_command_builder("az storage queue policy delete", 'az_storage_queue_policy_delete_command_result', name, queueName);
    };
    /**
     * List stored access policies on a containing object.
     *
     * Syntax:
     * ```
     * az storage queue policy list --queue-name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--query-examples]
     *                              [--sas-token]
     *                              [--subscription]
     * ```
     *
     * @param {string} queueName The queue name.
     */
    az_storage_queue_policy.list = function (queueName) {
        return new az_storage_queue_policy_list_command_builder("az storage queue policy list", 'az_storage_queue_policy_list_command_result', queueName);
    };
    /**
     * Show a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage queue policy show --name
     *                              --queue-name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--auth-mode {key, login}]
     *                              [--connection-string]
     *                              [--query-examples]
     *                              [--sas-token]
     *                              [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} queueName The queue name.
     */
    az_storage_queue_policy.show = function (name, queueName) {
        return new az_storage_queue_policy_show_command_builder("az storage queue policy show", 'az_storage_queue_policy_show_command_result', name, queueName);
    };
    /**
     * Set a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage queue policy update --name
     *                                --queue-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--auth-mode {key, login}]
     *                                [--connection-string]
     *                                [--expiry]
     *                                [--permissions]
     *                                [--sas-token]
     *                                [--start]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} queueName The queue name.
     */
    az_storage_queue_policy.update = function (name, queueName) {
        return new az_storage_queue_policy_update_command_builder("az storage queue policy update", 'az_storage_queue_policy_update_command_result', name, queueName);
    };
    return az_storage_queue_policy;
}());
exports.az_storage_queue_policy = az_storage_queue_policy;
/** Manage shared access policies of a storage table. */
var az_storage_queue = /** @class */ (function () {
    function az_storage_queue() {
    }
    /**
     * Creates a queue under the given account.
     *
     * Syntax:
     * ```
     * az storage queue create --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--auth-mode {key, login}]
     *                         [--connection-string]
     *                         [--fail-on-exist]
     *                         [--metadata]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The queue name.
     */
    az_storage_queue.create = function (name) {
        return new az_storage_queue_create_command_builder("az storage queue create", 'az_storage_queue_create_command_result', name);
    };
    /**
     * Deletes the specified queue and any messages it contains.
     *
     * Syntax:
     * ```
     * az storage queue delete --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--auth-mode {key, login}]
     *                         [--connection-string]
     *                         [--fail-not-exist]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The queue name.
     */
    az_storage_queue["delete"] = function (name) {
        return new az_storage_queue_delete_command_builder("az storage queue delete", 'az_storage_queue_delete_command_result', name);
    };
    /**
     * Returns a boolean indicating whether the queue exists.
     *
     * Syntax:
     * ```
     * az storage queue exists --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--auth-mode {key, login}]
     *                         [--connection-string]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The queue name.
     */
    az_storage_queue.exists = function (name) {
        return new az_storage_queue_exists_command_builder("az storage queue exists", 'az_storage_queue_exists_command_result', name);
    };
    /**
     * Generates a shared access signature for the queue.
     *
     * Syntax:
     * ```
     * az storage queue generate-sas --name
     *                               [--account-key]
     *                               [--account-name]
     *                               [--connection-string]
     *                               [--expiry]
     *                               [--https-only]
     *                               [--ip]
     *                               [--permissions]
     *                               [--policy-name]
     *                               [--start]
     *                               [--subscription]
     * ```
     *
     * @param {string} name The queue name.
     */
    az_storage_queue.generate_sas = function (name) {
        return new az_storage_queue_generate_sas_command_builder("az storage queue generate-sas", 'az_storage_queue_generate_sas_command_result', name);
    };
    /**
     * List queues in a storage account.
     *
     * Syntax:
     * ```
     * az storage queue list [--account-key]
     *                       [--account-name]
     *                       [--auth-mode {key, login}]
     *                       [--connection-string]
     *                       [--include-metadata]
     *                       [--marker]
     *                       [--num-results]
     *                       [--prefix]
     *                       [--query-examples]
     *                       [--sas-token]
     *                       [--subscription]
     *                       [--timeout]
     * ```
     */
    az_storage_queue.list = function () {
        return new az_storage_queue_list_command_builder("az storage queue list", 'az_storage_queue_list_command_result');
    };
    /**
     * Retrieves statistics related to replication for the Queue service.
     *
     * Syntax:
     * ```
     * az storage queue stats [--account-key]
     *                        [--account-name]
     *                        [--auth-mode {key, login}]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     */
    az_storage_queue.stats = function () {
        return new az_storage_queue_stats_command_builder("az storage queue stats", 'az_storage_queue_stats_command_result');
    };
    return az_storage_queue;
}());
exports.az_storage_queue = az_storage_queue;
/** Manage the metadata of a file share. */
var az_storage_share_metadata = /** @class */ (function () {
    function az_storage_share_metadata() {
    }
    /**
     * Returns all user-defined metadata for the specified share.
     *
     * Syntax:
     * ```
     * az storage share metadata show --name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--query-examples]
     *                                [--sas-token]
     *                                [--snapshot]
     *                                [--subscription]
     *                                [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share_metadata.show = function (name) {
        return new az_storage_share_metadata_show_command_builder("az storage share metadata show", 'az_storage_share_metadata_show_command_result', name);
    };
    /**
     * Sets one or more user-defined name-value pairs for the specified share.
     *
     * Syntax:
     * ```
     * az storage share metadata update --name
     *                                  [--account-key]
     *                                  [--account-name]
     *                                  [--connection-string]
     *                                  [--metadata]
     *                                  [--sas-token]
     *                                  [--subscription]
     *                                  [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share_metadata.update = function (name) {
        return new az_storage_share_metadata_update_command_builder("az storage share metadata update", 'az_storage_share_metadata_update_command_result', name);
    };
    return az_storage_share_metadata;
}());
exports.az_storage_share_metadata = az_storage_share_metadata;
/** Manage shared access policies of a storage file share. */
var az_storage_share_policy = /** @class */ (function () {
    function az_storage_share_policy() {
    }
    /**
     * Create a stored access policy on the containing object.
     *
     * Syntax:
     * ```
     * az storage share policy create --name
     *                                --share-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--expiry]
     *                                [--permissions]
     *                                [--sas-token]
     *                                [--start]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} shareName The file share name.
     */
    az_storage_share_policy.create = function (name, shareName) {
        return new az_storage_share_policy_create_command_builder("az storage share policy create", 'az_storage_share_policy_create_command_result', name, shareName);
    };
    /**
     * Delete a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage share policy delete --name
     *                                --share-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--sas-token]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} shareName The file share name.
     */
    az_storage_share_policy["delete"] = function (name, shareName) {
        return new az_storage_share_policy_delete_command_builder("az storage share policy delete", 'az_storage_share_policy_delete_command_result', name, shareName);
    };
    /**
     * List stored access policies on a containing object.
     *
     * Syntax:
     * ```
     * az storage share policy list --share-name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--connection-string]
     *                              [--query-examples]
     *                              [--sas-token]
     *                              [--subscription]
     * ```
     *
     * @param {string} shareName The file share name.
     */
    az_storage_share_policy.list = function (shareName) {
        return new az_storage_share_policy_list_command_builder("az storage share policy list", 'az_storage_share_policy_list_command_result', shareName);
    };
    /**
     * Show a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage share policy show --name
     *                              --share-name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--connection-string]
     *                              [--query-examples]
     *                              [--sas-token]
     *                              [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} shareName The file share name.
     */
    az_storage_share_policy.show = function (name, shareName) {
        return new az_storage_share_policy_show_command_builder("az storage share policy show", 'az_storage_share_policy_show_command_result', name, shareName);
    };
    /**
     * Set a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage share policy update --name
     *                                --share-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--expiry]
     *                                [--permissions]
     *                                [--sas-token]
     *                                [--start]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} shareName The file share name.
     */
    az_storage_share_policy.update = function (name, shareName) {
        return new az_storage_share_policy_update_command_builder("az storage share policy update", 'az_storage_share_policy_update_command_result', name, shareName);
    };
    return az_storage_share_policy;
}());
exports.az_storage_share_policy = az_storage_share_policy;
/** Manage Azure file shares using the Microsoft.Storage resource provider. */
var az_storage_share_rm = /** @class */ (function () {
    function az_storage_share_rm() {
    }
    /**
     * Create a new Azure file share under the specified storage account.
     *
     * Syntax:
     * ```
     * az storage share-rm create --name
     *                            --storage-account
     *                            [--access-tier {Cool, Hot, Premium, TransactionOptimized}]
     *                            [--enabled-protocols {NFS, SMB}]
     *                            [--metadata]
     *                            [--quota]
     *                            [--resource-group]
     *                            [--root-squash {AllSquash, NoRootSquash, RootSquash}]
     *                            [--subscription]
     * ```
     *
     * @param {string} name The file share name.
     * @param {string} storageAccount The name or ID of the storage account.
     */
    az_storage_share_rm.create = function (name, storageAccount) {
        return new az_storage_share_rm_create_command_builder("az storage share-rm create", 'az_storage_share_rm_create_command_result', name, storageAccount);
    };
    /**
     * Delete the specified Azure file share.
     *
     * Syntax:
     * ```
     * az storage share-rm delete [--ids]
     *                            [--name]
     *                            [--resource-group]
     *                            [--storage-account]
     *                            [--subscription]
     *                            [--yes]
     * ```
     */
    az_storage_share_rm["delete"] = function () {
        return new az_storage_share_rm_delete_command_builder("az storage share-rm delete", 'az_storage_share_rm_delete_command_result');
    };
    /**
     * Check for the existence of an Azure file share.
     *
     * Syntax:
     * ```
     * az storage share-rm exists [--ids]
     *                            [--name]
     *                            [--resource-group]
     *                            [--storage-account]
     *                            [--subscription]
     * ```
     */
    az_storage_share_rm.exists = function () {
        return new az_storage_share_rm_exists_command_builder("az storage share-rm exists", 'az_storage_share_rm_exists_command_result');
    };
    /**
     * List the Azure file shares under the specified storage account.
     *
     * Syntax:
     * ```
     * az storage share-rm list --storage-account
     *                          [--include-deleted]
     *                          [--query-examples]
     *                          [--resource-group]
     *                          [--subscription]
     * ```
     *
     * @param {string} storageAccount The name or ID of the storage account.
     */
    az_storage_share_rm.list = function (storageAccount) {
        return new az_storage_share_rm_list_command_builder("az storage share-rm list", 'az_storage_share_rm_list_command_result', storageAccount);
    };
    /**
     * Restore a file share within a valid retention days if share soft delete is enabled.
     *
     * Syntax:
     * ```
     * az storage share-rm restore --deleted-version
     *                             [--ids]
     *                             [--name]
     *                             [--resource-group]
     *                             [--restored-name]
     *                             [--storage-account]
     *                             [--subscription]
     * ```
     *
     * @param {string} deletedVersion Identify the version of the deleted share that will be restored.
     */
    az_storage_share_rm.restore = function (deletedVersion) {
        return new az_storage_share_rm_restore_command_builder("az storage share-rm restore", 'az_storage_share_rm_restore_command_result', deletedVersion);
    };
    /**
     * Show the properties for a specified Azure file share.
     *
     * Syntax:
     * ```
     * az storage share-rm show [--expand]
     *                          [--ids]
     *                          [--name]
     *                          [--query-examples]
     *                          [--resource-group]
     *                          [--storage-account]
     *                          [--subscription]
     * ```
     */
    az_storage_share_rm.show = function () {
        return new az_storage_share_rm_show_command_builder("az storage share-rm show", 'az_storage_share_rm_show_command_result');
    };
    /**
     * Get the usage bytes of the data stored on the share.
     *
     * Syntax:
     * ```
     * az storage share-rm stats [--ids]
     *                           [--name]
     *                           [--resource-group]
     *                           [--storage-account]
     *                           [--subscription]
     * ```
     */
    az_storage_share_rm.stats = function () {
        return new az_storage_share_rm_stats_command_builder("az storage share-rm stats", 'az_storage_share_rm_stats_command_result');
    };
    /**
     * Update the properties for an Azure file share.
     *
     * Syntax:
     * ```
     * az storage share-rm update [--access-tier {Cool, Hot, Premium, TransactionOptimized}]
     *                            [--add]
     *                            [--force-string]
     *                            [--ids]
     *                            [--metadata]
     *                            [--name]
     *                            [--quota]
     *                            [--remove]
     *                            [--resource-group]
     *                            [--root-squash {AllSquash, NoRootSquash, RootSquash}]
     *                            [--set]
     *                            [--storage-account]
     *                            [--subscription]
     * ```
     */
    az_storage_share_rm.update = function () {
        return new az_storage_share_rm_update_command_builder("az storage share-rm update", 'az_storage_share_rm_update_command_result');
    };
    return az_storage_share_rm;
}());
exports.az_storage_share_rm = az_storage_share_rm;
/** Manage file shares. */
var az_storage_share = /** @class */ (function () {
    function az_storage_share() {
    }
    /**
     * Creates a new share under the specified account.
     *
     * Syntax:
     * ```
     * az storage share create --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--fail-on-exist]
     *                         [--metadata]
     *                         [--quota]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share.create = function (name) {
        return new az_storage_share_create_command_builder("az storage share create", 'az_storage_share_create_command_result', name);
    };
    /**
     * Marks the specified share for deletion.
     *
     * Syntax:
     * ```
     * az storage share delete --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--delete-snapshots {include}]
     *                         [--fail-not-exist]
     *                         [--sas-token]
     *                         [--snapshot]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share["delete"] = function (name) {
        return new az_storage_share_delete_command_builder("az storage share delete", 'az_storage_share_delete_command_result', name);
    };
    /**
     * Check for the existence of a file share.
     *
     * Syntax:
     * ```
     * az storage share exists --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--sas-token]
     *                         [--snapshot]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share.exists = function (name) {
        return new az_storage_share_exists_command_builder("az storage share exists", 'az_storage_share_exists_command_result', name);
    };
    /**
     * Generates a shared access signature for the share.
     *
     * Syntax:
     * ```
     * az storage share generate-sas --name
     *                               [--account-key]
     *                               [--account-name]
     *                               [--cache-control]
     *                               [--connection-string]
     *                               [--content-disposition]
     *                               [--content-encoding]
     *                               [--content-language]
     *                               [--content-type]
     *                               [--expiry]
     *                               [--https-only]
     *                               [--ip]
     *                               [--permissions]
     *                               [--policy-name]
     *                               [--start]
     *                               [--subscription]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share.generate_sas = function (name) {
        return new az_storage_share_generate_sas_command_builder("az storage share generate-sas", 'az_storage_share_generate_sas_command_result', name);
    };
    /**
     * List the file shares in a storage account.
     *
     * Syntax:
     * ```
     * az storage share list [--account-key]
     *                       [--account-name]
     *                       [--connection-string]
     *                       [--include-metadata]
     *                       [--include-snapshots]
     *                       [--marker]
     *                       [--num-results]
     *                       [--prefix]
     *                       [--query-examples]
     *                       [--sas-token]
     *                       [--subscription]
     *                       [--timeout]
     * ```
     */
    az_storage_share.list = function () {
        return new az_storage_share_list_command_builder("az storage share list", 'az_storage_share_list_command_result');
    };
    /**
     * Returns all user-defined metadata and system properties for the specified share.
     *
     * Syntax:
     * ```
     * az storage share show --name
     *                       [--account-key]
     *                       [--account-name]
     *                       [--connection-string]
     *                       [--query-examples]
     *                       [--sas-token]
     *                       [--snapshot]
     *                       [--subscription]
     *                       [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share.show = function (name) {
        return new az_storage_share_show_command_builder("az storage share show", 'az_storage_share_show_command_result', name);
    };
    /**
     * Creates a snapshot of an existing share under the specified account.
     *
     * Syntax:
     * ```
     * az storage share snapshot --name
     *                           [--account-key]
     *                           [--account-name]
     *                           [--connection-string]
     *                           [--metadata]
     *                           [--quota]
     *                           [--sas-token]
     *                           [--subscription]
     *                           [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share.snapshot = function (name) {
        return new az_storage_share_snapshot_command_builder("az storage share snapshot", 'az_storage_share_snapshot_command_result', name);
    };
    /**
     * Gets the approximate size of the data stored on the share, rounded up to the nearest gigabyte.
     *
     * Syntax:
     * ```
     * az storage share stats --name
     *                        [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share.stats = function (name) {
        return new az_storage_share_stats_command_builder("az storage share stats", 'az_storage_share_stats_command_result', name);
    };
    /**
     * Sets service-defined properties for the specified share.
     *
     * Syntax:
     * ```
     * az storage share update --name
     *                         --quota
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The file share name.
     * @param {string} quota Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5 TB (5120 GB).
     */
    az_storage_share.update = function (name, quota) {
        return new az_storage_share_update_command_builder("az storage share update", 'az_storage_share_update_command_result', name, quota);
    };
    /**
     * Create a URI to access a file share.
     *
     * Syntax:
     * ```
     * az storage share url --name
     *                      [--account-key]
     *                      [--account-name]
     *                      [--connection-string]
     *                      [--protocol {http, https}]
     *                      [--sas-token]
     *                      [--subscription]
     *                      [--unc]
     * ```
     *
     * @param {string} name The file share name.
     */
    az_storage_share.url = function (name) {
        return new az_storage_share_url_command_builder("az storage share url", 'az_storage_share_url_command_result', name);
    };
    return az_storage_share;
}());
exports.az_storage_share = az_storage_share;
/** Manage shared access policies of a storage table. */
var az_storage_table_policy = /** @class */ (function () {
    function az_storage_table_policy() {
    }
    /**
     * Create a stored access policy on the containing object.
     *
     * Syntax:
     * ```
     * az storage table policy create --name
     *                                --table-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--expiry]
     *                                [--permissions]
     *                                [--sas-token]
     *                                [--start]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} tableName The container name.
     */
    az_storage_table_policy.create = function (name, tableName) {
        return new az_storage_table_policy_create_command_builder("az storage table policy create", 'az_storage_table_policy_create_command_result', name, tableName);
    };
    /**
     * Delete a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage table policy delete --name
     *                                --table-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--sas-token]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} tableName The container name.
     */
    az_storage_table_policy["delete"] = function (name, tableName) {
        return new az_storage_table_policy_delete_command_builder("az storage table policy delete", 'az_storage_table_policy_delete_command_result', name, tableName);
    };
    /**
     * List stored access policies on a containing object.
     *
     * Syntax:
     * ```
     * az storage table policy list --table-name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--connection-string]
     *                              [--query-examples]
     *                              [--sas-token]
     *                              [--subscription]
     * ```
     *
     * @param {string} tableName The container name.
     */
    az_storage_table_policy.list = function (tableName) {
        return new az_storage_table_policy_list_command_builder("az storage table policy list", 'az_storage_table_policy_list_command_result', tableName);
    };
    /**
     * Show a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage table policy show --name
     *                              --table-name
     *                              [--account-key]
     *                              [--account-name]
     *                              [--connection-string]
     *                              [--query-examples]
     *                              [--sas-token]
     *                              [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} tableName The container name.
     */
    az_storage_table_policy.show = function (name, tableName) {
        return new az_storage_table_policy_show_command_builder("az storage table policy show", 'az_storage_table_policy_show_command_result', name, tableName);
    };
    /**
     * Set a stored access policy on a containing object.
     *
     * Syntax:
     * ```
     * az storage table policy update --name
     *                                --table-name
     *                                [--account-key]
     *                                [--account-name]
     *                                [--connection-string]
     *                                [--expiry]
     *                                [--permissions]
     *                                [--sas-token]
     *                                [--start]
     *                                [--subscription]
     * ```
     *
     * @param {string} name The stored access policy name.
     * @param {string} tableName The container name.
     */
    az_storage_table_policy.update = function (name, tableName) {
        return new az_storage_table_policy_update_command_builder("az storage table policy update", 'az_storage_table_policy_update_command_result', name, tableName);
    };
    return az_storage_table_policy;
}());
exports.az_storage_table_policy = az_storage_table_policy;
/** Manage NoSQL key-value storage. */
var az_storage_table = /** @class */ (function () {
    function az_storage_table() {
    }
    /**
     * Creates a new table in the storage account.
     *
     * Syntax:
     * ```
     * az storage table create --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--fail-on-exist]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The name of the table to create. The table name may contain only alphanumeric characters and cannot begin with a numeric character. It is case-insensitive and must be from 3 to 63 characters long.
     */
    az_storage_table.create = function (name) {
        return new az_storage_table_create_command_builder("az storage table create", 'az_storage_table_create_command_result', name);
    };
    /**
     * Deletes the specified table and any data it contains.
     *
     * Syntax:
     * ```
     * az storage table delete --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--fail-not-exist]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The name of the table to delete.
     */
    az_storage_table["delete"] = function (name) {
        return new az_storage_table_delete_command_builder("az storage table delete", 'az_storage_table_delete_command_result', name);
    };
    /**
     * Returns a boolean indicating whether the table exists.
     *
     * Syntax:
     * ```
     * az storage table exists --name
     *                         [--account-key]
     *                         [--account-name]
     *                         [--connection-string]
     *                         [--sas-token]
     *                         [--subscription]
     *                         [--timeout]
     * ```
     *
     * @param {string} name The name of table to check for existence.
     */
    az_storage_table.exists = function (name) {
        return new az_storage_table_exists_command_builder("az storage table exists", 'az_storage_table_exists_command_result', name);
    };
    /**
     * Generates a shared access signature for the table.
     *
     * Syntax:
     * ```
     * az storage table generate-sas --name
     *                               [--account-key]
     *                               [--account-name]
     *                               [--connection-string]
     *                               [--end-pk]
     *                               [--end-rk]
     *                               [--expiry]
     *                               [--https-only]
     *                               [--ip]
     *                               [--permissions]
     *                               [--policy-name]
     *                               [--start]
     *                               [--start-pk]
     *                               [--start-rk]
     *                               [--subscription]
     * ```
     *
     * @param {string} name The name of the table to create a SAS token for.
     */
    az_storage_table.generate_sas = function (name) {
        return new az_storage_table_generate_sas_command_builder("az storage table generate-sas", 'az_storage_table_generate_sas_command_result', name);
    };
    /**
     * List tables in a storage account.
     *
     * Syntax:
     * ```
     * az storage table list [--account-key]
     *                       [--account-name]
     *                       [--connection-string]
     *                       [--marker]
     *                       [--num-results]
     *                       [--query-examples]
     *                       [--sas-token]
     *                       [--subscription]
     *                       [--timeout]
     * ```
     */
    az_storage_table.list = function () {
        return new az_storage_table_list_command_builder("az storage table list", 'az_storage_table_list_command_result');
    };
    /**
     * Retrieves statistics related to replication for the Table service.
     *
     * Syntax:
     * ```
     * az storage table stats [--account-key]
     *                        [--account-name]
     *                        [--connection-string]
     *                        [--sas-token]
     *                        [--subscription]
     *                        [--timeout]
     * ```
     */
    az_storage_table.stats = function () {
        return new az_storage_table_stats_command_builder("az storage table stats", 'az_storage_table_stats_command_result');
    };
    return az_storage_table;
}());
exports.az_storage_table = az_storage_table;
/** Manage Azure Cloud Storage resources. */
var az_storage = /** @class */ (function () {
    function az_storage() {
    }
    /**
     * Copy files or directories to or from Azure storage.
     *
     * Syntax:
     * ```
     * az storage copy [--account-key]
     *                 [--account-name]
     *                 [--blob-type {AppendBlob, BlockBlob, PageBlob}]
     *                 [--connection-string]
     *                 [--content-type]
     *                 [--destination]
     *                 [--destination-account-name]
     *                 [--destination-blob]
     *                 [--destination-container]
     *                 [--destination-file-path]
     *                 [--destination-local-path]
     *                 [--destination-share]
     *                 [--exclude-path]
     *                 [--exclude-pattern]
     *                 [--follow-symlinks]
     *                 [--include-path]
     *                 [--include-pattern]
     *                 [--preserve-s2s-access-tier {false, true}]
     *                 [--put-md5]
     *                 [--recursive]
     *                 [--sas-token]
     *                 [--source]
     *                 [--source-account-key]
     *                 [--source-account-name]
     *                 [--source-blob]
     *                 [--source-connection-string]
     *                 [--source-container]
     *                 [--source-file-path]
     *                 [--source-local-path]
     *                 [--source-sas]
     *                 [--source-share]
     *                 [--subscription]
     * ```
     */
    az_storage.copy = function () {
        return new az_storage_copy_command_builder("az storage copy", 'az_storage_copy_command_result');
    };
    /**
     * Delete blobs or files from Azure Storage.
     *
     * Syntax:
     * ```
     * az storage remove [--account-key]
     *                   [--account-name]
     *                   [--connection-string]
     *                   [--container-name]
     *                   [--exclude-path]
     *                   [--exclude-pattern]
     *                   [--include-path]
     *                   [--include-pattern]
     *                   [--name]
     *                   [--path]
     *                   [--recursive]
     *                   [--sas-token]
     *                   [--share-name]
     *                   [--subscription]
     * ```
     */
    az_storage.remove = function () {
        return new az_storage_remove_command_builder("az storage remove", 'az_storage_remove_command_result');
    };
    return az_storage;
}());
exports.az_storage = az_storage;
/**
 * Show the properties of a storage account's blob service.
 *
 * Syntax:
 * ```
 * az storage account blob-service-properties show --account-name
 *                                                 [--query-examples]
 *                                                 [--resource-group]
 *                                                 [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_blob_service_properties_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_blob_service_properties_show_command_builder, _super);
    function az_storage_account_blob_service_properties_show_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_blob_service_properties_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_blob_service_properties_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_blob_service_properties_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_blob_service_properties_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_blob_service_properties_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update the properties of a storage account's blob service.
 *
 * Syntax:
 * ```
 * az storage account blob-service-properties update --account-name
 *                                                   [--add]
 *                                                   [--container-days]
 *                                                   [--container-retention {false, true}]
 *                                                   [--delete-retention-days]
 *                                                   [--enable-change-feed {false, true}]
 *                                                   [--enable-delete-retention {false, true}]
 *                                                   [--enable-restore-policy {false, true}]
 *                                                   [--enable-versioning {false, true}]
 *                                                   [--force-string]
 *                                                   [--remove]
 *                                                   [--resource-group]
 *                                                   [--restore-days]
 *                                                   [--set]
 *                                                   [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_blob_service_properties_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_blob_service_properties_update_command_builder, _super);
    function az_storage_account_blob_service_properties_update_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty <key=value, string or JSON string>. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.add = function (value) {
        this.setFlag("--add", value);
        return this;
    };
    /** Indicate the number of days that the deleted container should be retained. The minimum specified value can be 1 and the maximum value can be 365. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.containerDeleteRetentionDays = function (value) {
        this.setFlag("--container-delete-retention-days", value);
        return this;
    };
    /** Enable container delete retention policy for container soft delete when set to true. Disable container delete retention policy when set to false. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.enableContainerDeleteRetention = function (value) {
        this.setFlag("--enable-container-delete-retention", value.toString());
        return this;
    };
    /** Indicate the number of days that the deleted blob should be retained. The value must be in range [1,365]. It must be provided when `--enable-delete-retention` is true. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.deleteRetentionDays = function (value) {
        this.setFlag("--delete-retention-days", value);
        return this;
    };
    /** Indicate whether change feed event logging is enabled. If it is true, you enable the storage account to begin capturing changes. The default value is true. You can see more details in <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-change-feed?tabs=azure-portal#register-by-using-azure-cli">https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-change-feed?tabs=azure-portal#register-by-using-azure-cli</a>. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.enableChangeFeed = function (value) {
        this.setFlag("--enable-change-feed", value.toString());
        return this;
    };
    /** Indicate whether delete retention policy is enabled for the blob service. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.enableDeleteRetention = function (value) {
        this.setFlag("--enable-delete-retention", value.toString());
        return this;
    };
    /** Enable blob restore policy when it set to true. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.enableRestorePolicy = function (value) {
        this.setFlag("--enable-restore-policy", value.toString());
        return this;
    };
    /** Versioning is enabled if set to true. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.enableVersioning = function (value) {
        this.setFlag("--enable-versioning", value.toString());
        return this;
    };
    /** When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.forceString = function (value) {
        this.setFlag("--force-string", value);
        return this;
    };
    /** Remove a property or an element from a list.  Example: --remove property.list <indexToRemove> OR --remove propertyToRemove. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.remove = function (value) {
        this.setFlag("--remove", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The number of days for the blob can be restored. It should be greater than zero and less than Delete Retention Days. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.restoreDays = function (value) {
        this.setFlag("--restore-days", value);
        return this;
    };
    /** Update an object by specifying a property path and value to set.  Example: --set property1.property2=<value>. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.set = function (value) {
        this.setFlag("--set", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_blob_service_properties_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_blob_service_properties_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create an encryption scope within storage account.
 *
 * Syntax:
 * ```
 * az storage account encryption-scope create --account-name
 *                                            --name
 *                                            [--key-source {Microsoft.KeyVault, Microsoft.Storage}]
 *                                            [--key-uri]
 *                                            [--resource-group]
 *                                            [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} name The name of the encryption scope within the specified storage account.
 */
var az_storage_account_encryption_scope_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_encryption_scope_create_command_builder, _super);
    function az_storage_account_encryption_scope_create_command_builder(commandPath, resultDataTypeName, accountName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.name(name);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_encryption_scope_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The name of the encryption scope within the specified storage account. */
    az_storage_account_encryption_scope_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The provider for the encryption scope. */
    az_storage_account_encryption_scope_create_command_builder.prototype.keySource = function (value) {
        this.setFlag("--key-source", value);
        return this;
    };
    /** The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope. */
    az_storage_account_encryption_scope_create_command_builder.prototype.keyUri = function (value) {
        this.setFlag("--key-uri", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_encryption_scope_create_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_encryption_scope_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_encryption_scope_create_command_builder;
}(base_1.CommandBuilder));
/**
 * List encryption scopes within storage account.
 *
 * Syntax:
 * ```
 * az storage account encryption-scope list --account-name
 *                                          [--query-examples]
 *                                          [--resource-group]
 *                                          [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_encryption_scope_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_encryption_scope_list_command_builder, _super);
    function az_storage_account_encryption_scope_list_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_encryption_scope_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_encryption_scope_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_encryption_scope_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_encryption_scope_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_encryption_scope_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Show properties for specified encryption scope within storage account.
 *
 * Syntax:
 * ```
 * az storage account encryption-scope show --account-name
 *                                          --name
 *                                          [--query-examples]
 *                                          [--resource-group]
 *                                          [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} name The name of the encryption scope within the specified storage account.
 */
var az_storage_account_encryption_scope_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_encryption_scope_show_command_builder, _super);
    function az_storage_account_encryption_scope_show_command_builder(commandPath, resultDataTypeName, accountName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.name(name);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_encryption_scope_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The name of the encryption scope within the specified storage account. */
    az_storage_account_encryption_scope_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_encryption_scope_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_encryption_scope_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_encryption_scope_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_encryption_scope_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update properties for specified encryption scope within storage account.
 *
 * Syntax:
 * ```
 * az storage account encryption-scope update --account-name
 *                                            --name
 *                                            [--key-source {Microsoft.KeyVault, Microsoft.Storage}]
 *                                            [--key-uri]
 *                                            [--resource-group]
 *                                            [--state {Disabled, Enabled}]
 *                                            [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} name The name of the encryption scope within the specified storage account.
 */
var az_storage_account_encryption_scope_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_encryption_scope_update_command_builder, _super);
    function az_storage_account_encryption_scope_update_command_builder(commandPath, resultDataTypeName, accountName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.name(name);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_encryption_scope_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The name of the encryption scope within the specified storage account. */
    az_storage_account_encryption_scope_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The provider for the encryption scope. */
    az_storage_account_encryption_scope_update_command_builder.prototype.keySource = function (value) {
        this.setFlag("--key-source", value);
        return this;
    };
    /** The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope. */
    az_storage_account_encryption_scope_update_command_builder.prototype.keyUri = function (value) {
        this.setFlag("--key-uri", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_encryption_scope_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Change the state the encryption scope. When disabled, all blob read/write operations using this encryption scope will fail. */
    az_storage_account_encryption_scope_update_command_builder.prototype.state = function (value) {
        this.setFlag("--state", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_encryption_scope_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_encryption_scope_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Show the properties of file service in storage account.
 *
 * Syntax:
 * ```
 * az storage account file-service-properties show --account-name
 *                                                 [--query-examples]
 *                                                 [--resource-group]
 *                                                 [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_file_service_properties_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_file_service_properties_show_command_builder, _super);
    function az_storage_account_file_service_properties_show_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_file_service_properties_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_file_service_properties_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_file_service_properties_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_file_service_properties_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_file_service_properties_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update the properties of file service in storage account.
 *
 * Syntax:
 * ```
 * az storage account file-service-properties update --account-name
 *                                                   [--delete-retention-days]
 *                                                   [--enable-delete-retention {false, true}]
 *                                                   [--resource-group]
 *                                                   [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_file_service_properties_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_file_service_properties_update_command_builder, _super);
    function az_storage_account_file_service_properties_update_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_file_service_properties_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Indicate the number of days that the deleted item should be retained. The minimum specified value can be 1 and the maximum value can be 365. */
    az_storage_account_file_service_properties_update_command_builder.prototype.deleteRetentionDays = function (value) {
        this.setFlag("--delete-retention-days", value);
        return this;
    };
    /** Enable file service properties for share soft delete. */
    az_storage_account_file_service_properties_update_command_builder.prototype.enableDeleteRetention = function (value) {
        this.setFlag("--enable-delete-retention", value.toString());
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_file_service_properties_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_file_service_properties_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_file_service_properties_update_command_builder;
}(base_1.CommandBuilder));
/**
 * List the access keys or Kerberos keys (if active directory enabled) for a storage account.
 *
 * Syntax:
 * ```
 * az storage account keys list --account-name
 *                              [--expand-key-type {kerb}]
 *                              [--query-examples]
 *                              [--resource-group]
 *                              [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_keys_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_keys_list_command_builder, _super);
    function az_storage_account_keys_list_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_keys_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Specify the expanded key types to be listed. */
    az_storage_account_keys_list_command_builder.prototype.expandKeyType = function (value) {
        this.setFlag("--expand-key-type", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_keys_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_keys_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_keys_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_keys_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Regenerate one of the access keys or Kerberos keys (if active directory enabled) for a storage account.
 *
 * Syntax:
 * ```
 * az storage account keys renew --account-name
 *                               --key {primary, secondary}
 *                               [--key-type {kerb}]
 *                               [--resource-group]
 *                               [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {'primary' | 'secondary'} key The key options to regenerate.
 */
var az_storage_account_keys_renew_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_keys_renew_command_builder, _super);
    function az_storage_account_keys_renew_command_builder(commandPath, resultDataTypeName, accountName, key) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.key(key);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_keys_renew_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The key options to regenerate. */
    az_storage_account_keys_renew_command_builder.prototype.key = function (value) {
        this.setFlag("--key", value);
        return this;
    };
    /** The key type to regenerate. If --key-type is not specified, one of access keys will be regenerated by default. */
    az_storage_account_keys_renew_command_builder.prototype.keyType = function (value) {
        this.setFlag("--key-type", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_keys_renew_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_keys_renew_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_keys_renew_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates the data policy rules associated with the specified storage account.
 *
 * Syntax:
 * ```
 * az storage account management-policy create --account-name
 *                                             --policy
 *                                             --resource-group
 *                                             [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group.
 * @param {string} policy The Storage Account ManagementPolicies Rules, in JSON format. See more details in: <a href="https://docs.microsoft.com/azure/storage/common/storage-lifecycle-managment-concepts">https://docs.microsoft.com/azure/storage/common/storage-lifecycle-managment-concepts</a>.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 */
var az_storage_account_management_policy_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_management_policy_create_command_builder, _super);
    function az_storage_account_management_policy_create_command_builder(commandPath, resultDataTypeName, accountName, policy, resourceGroup) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.policy(policy);
        _this.resourceGroup(resourceGroup);
        return _this;
    }
    /** The name of the storage account within the specified resource group. */
    az_storage_account_management_policy_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The Storage Account ManagementPolicies Rules, in JSON format. See more details in: <a href="https://docs.microsoft.com/azure/storage/common/storage-lifecycle-managment-concepts">https://docs.microsoft.com/azure/storage/common/storage-lifecycle-managment-concepts</a>. */
    az_storage_account_management_policy_create_command_builder.prototype.policy = function (value) {
        this.setFlag("--policy", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_management_policy_create_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_management_policy_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_management_policy_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Deletes the managementpolicy associated with the specified storage account.
 *
 * Syntax:
 * ```
 * az storage account management-policy delete --account-name
 *                                             --resource-group
 *                                             [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 */
var az_storage_account_management_policy_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_management_policy_delete_command_builder, _super);
    function az_storage_account_management_policy_delete_command_builder(commandPath, resultDataTypeName, accountName, resourceGroup) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.resourceGroup(resourceGroup);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_account_management_policy_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_management_policy_delete_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_management_policy_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_management_policy_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Gets the managementpolicy associated with the specified storage account.
 *
 * Syntax:
 * ```
 * az storage account management-policy show --account-name
 *                                           --resource-group
 *                                           [--query-examples]
 *                                           [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 */
var az_storage_account_management_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_management_policy_show_command_builder, _super);
    function az_storage_account_management_policy_show_command_builder(commandPath, resultDataTypeName, accountName, resourceGroup) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.resourceGroup(resourceGroup);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_account_management_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_management_policy_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_management_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_management_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_management_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Updates the data policy rules associated with the specified storage account.
 *
 * Syntax:
 * ```
 * az storage account management-policy update --account-name
 *                                             --resource-group
 *                                             [--add]
 *                                             [--force-string]
 *                                             [--remove]
 *                                             [--set]
 *                                             [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 */
var az_storage_account_management_policy_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_management_policy_update_command_builder, _super);
    function az_storage_account_management_policy_update_command_builder(commandPath, resultDataTypeName, accountName, resourceGroup) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.resourceGroup(resourceGroup);
        return _this;
    }
    /** The name of the storage account within the specified resource group. */
    az_storage_account_management_policy_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_management_policy_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty <key=value, string or JSON string>. */
    az_storage_account_management_policy_update_command_builder.prototype.add = function (value) {
        this.setFlag("--add", value);
        return this;
    };
    /** When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON. */
    az_storage_account_management_policy_update_command_builder.prototype.forceString = function (value) {
        this.setFlag("--force-string", value);
        return this;
    };
    /** Remove a property or an element from a list.  Example: --remove property.list <indexToRemove> OR --remove propertyToRemove. */
    az_storage_account_management_policy_update_command_builder.prototype.remove = function (value) {
        this.setFlag("--remove", value);
        return this;
    };
    /** Update an object by specifying a property path and value to set.  Example: --set property1.property2=<value>. */
    az_storage_account_management_policy_update_command_builder.prototype.set = function (value) {
        this.setFlag("--set", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_management_policy_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_management_policy_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Add a network rule.
 *
 * Syntax:
 * ```
 * az storage account network-rule add --account-name
 *                                     [--action]
 *                                     [--ip-address]
 *                                     [--resource-group]
 *                                     [--subnet]
 *                                     [--subscription]
 *                                     [--vnet-name]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_network_rule_add_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_network_rule_add_command_builder, _super);
    function az_storage_account_network_rule_add_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_network_rule_add_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The action of virtual network rule. */
    az_storage_account_network_rule_add_command_builder.prototype.action = function (value) {
        this.setFlag("--action", value);
        return this;
    };
    /** IPv4 address or CIDR range. */
    az_storage_account_network_rule_add_command_builder.prototype.ipAddress = function (value) {
        this.setFlag("--ip-address", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_network_rule_add_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied. */
    az_storage_account_network_rule_add_command_builder.prototype.subnet = function (value) {
        this.setFlag("--subnet", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_network_rule_add_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Name of a virtual network. */
    az_storage_account_network_rule_add_command_builder.prototype.vnetName = function (value) {
        this.setFlag("--vnet-name", value);
        return this;
    };
    return az_storage_account_network_rule_add_command_builder;
}(base_1.CommandBuilder));
/**
 * List network rules.
 *
 * Syntax:
 * ```
 * az storage account network-rule list --account-name
 *                                      [--query-examples]
 *                                      [--resource-group]
 *                                      [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_network_rule_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_network_rule_list_command_builder, _super);
    function az_storage_account_network_rule_list_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_network_rule_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_network_rule_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_network_rule_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_network_rule_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_network_rule_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Remove a network rule.
 *
 * Syntax:
 * ```
 * az storage account network-rule remove --account-name
 *                                        [--ip-address]
 *                                        [--resource-group]
 *                                        [--subnet]
 *                                        [--subscription]
 *                                        [--vnet-name]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_network_rule_remove_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_network_rule_remove_command_builder, _super);
    function az_storage_account_network_rule_remove_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_network_rule_remove_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** IPv4 address or CIDR range. */
    az_storage_account_network_rule_remove_command_builder.prototype.ipAddress = function (value) {
        this.setFlag("--ip-address", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_network_rule_remove_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subnet. If name is supplied, `--vnet-name` must be supplied. */
    az_storage_account_network_rule_remove_command_builder.prototype.subnet = function (value) {
        this.setFlag("--subnet", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_network_rule_remove_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Name of a virtual network. */
    az_storage_account_network_rule_remove_command_builder.prototype.vnetName = function (value) {
        this.setFlag("--vnet-name", value);
        return this;
    };
    return az_storage_account_network_rule_remove_command_builder;
}(base_1.CommandBuilder));
/**
 * Add rule to the specified Object Replication Service Policy.
 *
 * Syntax:
 * ```
 * az storage account or-policy rule add --account-name
 *                                       --destination-container
 *                                       --policy-id
 *                                       --source-container
 *                                       [--min-creation-time]
 *                                       [--prefix]
 *                                       [--resource-group]
 *                                       [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} destinationContainer The destination storage container name.
 * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
 * @param {string} sourceContainer The source storage container name.
 */
var az_storage_account_or_policy_rule_add_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_rule_add_command_builder, _super);
    function az_storage_account_or_policy_rule_add_command_builder(commandPath, resultDataTypeName, accountName, destinationContainer, policyId, sourceContainer) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.destinationContainer(destinationContainer);
        _this.policyId(policyId);
        _this.sourceContainer(sourceContainer);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The destination storage container name. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** The source storage container name. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.minCreationTime = function (value) {
        this.setFlag("--min-creation-time", value);
        return this;
    };
    /** Optional. Filter the results to replicate only blobs whose names begin with the specified prefix. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.prefixMatch = function (value) {
        this.setFlag("--prefix-match", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_rule_add_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_rule_add_command_builder;
}(base_1.CommandBuilder));
/**
 * List all the rules in the specified Object Replication Service Policy.
 *
 * Syntax:
 * ```
 * az storage account or-policy rule list --account-name
 *                                        --policy-id
 *                                        [--query-examples]
 *                                        [--resource-group]
 *                                        [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
 */
var az_storage_account_or_policy_rule_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_rule_list_command_builder, _super);
    function az_storage_account_or_policy_rule_list_command_builder(commandPath, resultDataTypeName, accountName, policyId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.policyId(policyId);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_rule_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_rule_list_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_or_policy_rule_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_rule_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_rule_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_rule_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Remove the specified rule from the specified Object Replication Service Policy.
 *
 * Syntax:
 * ```
 * az storage account or-policy rule remove --account-name
 *                                          --policy-id
 *                                          --rule-id
 *                                          [--resource-group]
 *                                          [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
 * @param {string} ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
 */
var az_storage_account_or_policy_rule_remove_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_rule_remove_command_builder, _super);
    function az_storage_account_or_policy_rule_remove_command_builder(commandPath, resultDataTypeName, accountName, policyId, ruleId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.policyId(policyId);
        _this.ruleId(ruleId);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_rule_remove_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_rule_remove_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account. */
    az_storage_account_or_policy_rule_remove_command_builder.prototype.ruleId = function (value) {
        this.setFlag("--rule-id", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_rule_remove_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_rule_remove_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_rule_remove_command_builder;
}(base_1.CommandBuilder));
/**
 * Show the properties of specified rule in Object Replication Service Policy.
 *
 * Syntax:
 * ```
 * az storage account or-policy rule show --account-name
 *                                        --policy-id
 *                                        --rule-id
 *                                        [--query-examples]
 *                                        [--resource-group]
 *                                        [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
 * @param {string} ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
 */
var az_storage_account_or_policy_rule_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_rule_show_command_builder, _super);
    function az_storage_account_or_policy_rule_show_command_builder(commandPath, resultDataTypeName, accountName, policyId, ruleId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.policyId(policyId);
        _this.ruleId(ruleId);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_rule_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_rule_show_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account. */
    az_storage_account_or_policy_rule_show_command_builder.prototype.ruleId = function (value) {
        this.setFlag("--rule-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_or_policy_rule_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_rule_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_rule_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_rule_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update rule properties to Object Replication Service Policy.
 *
 * Syntax:
 * ```
 * az storage account or-policy rule update --account-name
 *                                          --policy-id
 *                                          --rule-id
 *                                          [--destination-container]
 *                                          [--min-creation-time]
 *                                          [--prefix]
 *                                          [--resource-group]
 *                                          [--source-container]
 *                                          [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
 * @param {string} ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
 */
var az_storage_account_or_policy_rule_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_rule_update_command_builder, _super);
    function az_storage_account_or_policy_rule_update_command_builder(commandPath, resultDataTypeName, accountName, policyId, ruleId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.policyId(policyId);
        _this.ruleId(ruleId);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.ruleId = function (value) {
        this.setFlag("--rule-id", value);
        return this;
    };
    /** The destination storage container name. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.minCreationTime = function (value) {
        this.setFlag("--min-creation-time", value);
        return this;
    };
    /** Optional. Filter the results to replicate only blobs whose names begin with the specified prefix. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.prefixMatch = function (value) {
        this.setFlag("--prefix-match", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The source storage container name. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_rule_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_rule_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create Object Replication Service Policy for storage account.
 *
 * Syntax:
 * ```
 * az storage account or-policy create --account-name
 *                                     [--dcont]
 *                                     [--destination-account]
 *                                     [--min-creation-time]
 *                                     [--policy]
 *                                     [--policy-id]
 *                                     [--prefix]
 *                                     [--resource-group]
 *                                     [--rule-id]
 *                                     [--scont]
 *                                     [--source-account]
 *                                     [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_or_policy_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_create_command_builder, _super);
    function az_storage_account_or_policy_create_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The destination storage container name. Required when no --policy provided. */
    az_storage_account_or_policy_create_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** The destination storage account name. Apply --account-name value as destination account when there is no destination account provided in --policy and --destination-account. */
    az_storage_account_or_policy_create_command_builder.prototype.destinationAccount = function (value) {
        this.setFlag("--destination-account", value);
        return this;
    };
    /** Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z. */
    az_storage_account_or_policy_create_command_builder.prototype.minCreationTime = function (value) {
        this.setFlag("--min-creation-time", value);
        return this;
    };
    /** The object replication policy definition between two storage accounts, in JSON format. Multiple rules can be defined in one policy. */
    az_storage_account_or_policy_create_command_builder.prototype.policy = function (value) {
        this.setFlag("--policy", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_create_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Optional. Filter the results to replicate only blobs whose names begin with the specified prefix. */
    az_storage_account_or_policy_create_command_builder.prototype.prefixMatch = function (value) {
        this.setFlag("--prefix-match", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_create_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account. */
    az_storage_account_or_policy_create_command_builder.prototype.ruleId = function (value) {
        this.setFlag("--rule-id", value);
        return this;
    };
    /** The source storage container name. Required when no --policy provided. */
    az_storage_account_or_policy_create_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** The source storage account name. Required when no --policy provided. */
    az_storage_account_or_policy_create_command_builder.prototype.sourceAccount = function (value) {
        this.setFlag("--source-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete specified Object Replication Service Policy associated with the specified storage account.
 *
 * Syntax:
 * ```
 * az storage account or-policy delete --account-name
 *                                     --policy-id
 *                                     [--resource-group]
 *                                     [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
 */
var az_storage_account_or_policy_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_delete_command_builder, _super);
    function az_storage_account_or_policy_delete_command_builder(commandPath, resultDataTypeName, accountName, policyId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.policyId(policyId);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_delete_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_delete_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * List Object Replication Service Policies associated with the specified storage account.
 *
 * Syntax:
 * ```
 * az storage account or-policy list --account-name
 *                                   [--query-examples]
 *                                   [--resource-group]
 *                                   [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_or_policy_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_list_command_builder, _super);
    function az_storage_account_or_policy_list_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_or_policy_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Show the properties of specified Object Replication Service Policy for storage account.
 *
 * Syntax:
 * ```
 * az storage account or-policy show --account-name
 *                                   --policy-id
 *                                   [--query-examples]
 *                                   [--resource-group]
 *                                   [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} policyId The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account.
 */
var az_storage_account_or_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_show_command_builder, _super);
    function az_storage_account_or_policy_show_command_builder(commandPath, resultDataTypeName, accountName, policyId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.policyId(policyId);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_show_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_or_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update Object Replication Service Policy properties for storage account.
 *
 * Syntax:
 * ```
 * az storage account or-policy update --account-name
 *                                     [--add]
 *                                     [--destination-account]
 *                                     [--force-string]
 *                                     [--policy]
 *                                     [--policy-id]
 *                                     [--remove]
 *                                     [--resource-group]
 *                                     [--set]
 *                                     [--source-account]
 *                                     [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 */
var az_storage_account_or_policy_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_or_policy_update_command_builder, _super);
    function az_storage_account_or_policy_update_command_builder(commandPath, resultDataTypeName, accountName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_or_policy_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty <key=value, string or JSON string>. */
    az_storage_account_or_policy_update_command_builder.prototype.add = function (value) {
        this.setFlag("--add", value);
        return this;
    };
    /** The destination storage account name. Apply --account-name value as destination account when there is no destination account provided in --policy and --destination-account. */
    az_storage_account_or_policy_update_command_builder.prototype.destinationAccount = function (value) {
        this.setFlag("--destination-account", value);
        return this;
    };
    /** When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON. */
    az_storage_account_or_policy_update_command_builder.prototype.forceString = function (value) {
        this.setFlag("--force-string", value);
        return this;
    };
    /** The object replication policy definition between two storage accounts, in JSON format. Multiple rules can be defined in one policy. */
    az_storage_account_or_policy_update_command_builder.prototype.policy = function (value) {
        this.setFlag("--policy", value);
        return this;
    };
    /** The ID of object replication policy or "default" if the policy ID is unknown. Policy Id will be auto-generated when setting on destination account. Required when setting on source account. */
    az_storage_account_or_policy_update_command_builder.prototype.policyId = function (value) {
        this.setFlag("--policy-id", value);
        return this;
    };
    /** Remove a property or an element from a list.  Example: --remove property.list <indexToRemove> OR --remove propertyToRemove. */
    az_storage_account_or_policy_update_command_builder.prototype.remove = function (value) {
        this.setFlag("--remove", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_or_policy_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Update an object by specifying a property path and value to set.  Example: --set property1.property2=<value>. */
    az_storage_account_or_policy_update_command_builder.prototype.set = function (value) {
        this.setFlag("--set", value);
        return this;
    };
    /** The source storage account name. Required when no --policy provided. */
    az_storage_account_or_policy_update_command_builder.prototype.sourceAccount = function (value) {
        this.setFlag("--source-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_or_policy_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_or_policy_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Approve a private endpoint connection request for storage account.
 *
 * Syntax:
 * ```
 * az storage account private-endpoint-connection approve [--account-name]
 *                                                        [--description]
 *                                                        [--id]
 *                                                        [--name]
 *                                                        [--resource-group]
 *                                                        [--subscription]
 * ```
 */
var az_storage_account_private_endpoint_connection_approve_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_private_endpoint_connection_approve_command_builder, _super);
    function az_storage_account_private_endpoint_connection_approve_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** The storage account name. */
    az_storage_account_private_endpoint_connection_approve_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Comments for approve operation. */
    az_storage_account_private_endpoint_connection_approve_command_builder.prototype.description = function (value) {
        this.setFlag("--description", value);
        return this;
    };
    /** The ID of the private endpoint connection associated with the Storage Account. You can get it using `az storage account show`. */
    az_storage_account_private_endpoint_connection_approve_command_builder.prototype.id = function (value) {
        this.setFlag("--id", value);
        return this;
    };
    /** The name of the private endpoint connection associated with the Storage Account. */
    az_storage_account_private_endpoint_connection_approve_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The resource group name of specified storage account. */
    az_storage_account_private_endpoint_connection_approve_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_private_endpoint_connection_approve_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_private_endpoint_connection_approve_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a private endpoint connection request for storage account.
 *
 * Syntax:
 * ```
 * az storage account private-endpoint-connection delete [--account-name]
 *                                                       [--id]
 *                                                       [--name]
 *                                                       [--resource-group]
 *                                                       [--subscription]
 *                                                       [--yes]
 * ```
 */
var az_storage_account_private_endpoint_connection_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_private_endpoint_connection_delete_command_builder, _super);
    function az_storage_account_private_endpoint_connection_delete_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** The storage account name. */
    az_storage_account_private_endpoint_connection_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of the private endpoint connection associated with the Storage Account. You can get it using `az storage account show`. */
    az_storage_account_private_endpoint_connection_delete_command_builder.prototype.id = function (value) {
        this.setFlag("--id", value);
        return this;
    };
    /** The name of the private endpoint connection associated with the Storage Account. */
    az_storage_account_private_endpoint_connection_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The resource group name of specified storage account. */
    az_storage_account_private_endpoint_connection_delete_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_private_endpoint_connection_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Do not prompt for confirmation. */
    az_storage_account_private_endpoint_connection_delete_command_builder.prototype.yes = function (value) {
        this.setFlag("--yes", value);
        return this;
    };
    return az_storage_account_private_endpoint_connection_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Reject a private endpoint connection request for storage account.
 *
 * Syntax:
 * ```
 * az storage account private-endpoint-connection reject [--account-name]
 *                                                       [--description]
 *                                                       [--id]
 *                                                       [--name]
 *                                                       [--resource-group]
 *                                                       [--subscription]
 * ```
 */
var az_storage_account_private_endpoint_connection_reject_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_private_endpoint_connection_reject_command_builder, _super);
    function az_storage_account_private_endpoint_connection_reject_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** The storage account name. */
    az_storage_account_private_endpoint_connection_reject_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Comments for reject operation. */
    az_storage_account_private_endpoint_connection_reject_command_builder.prototype.description = function (value) {
        this.setFlag("--description", value);
        return this;
    };
    /** The ID of the private endpoint connection associated with the Storage Account. You can get it using `az storage account show`. */
    az_storage_account_private_endpoint_connection_reject_command_builder.prototype.id = function (value) {
        this.setFlag("--id", value);
        return this;
    };
    /** The name of the private endpoint connection associated with the Storage Account. */
    az_storage_account_private_endpoint_connection_reject_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The resource group name of specified storage account. */
    az_storage_account_private_endpoint_connection_reject_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_private_endpoint_connection_reject_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_private_endpoint_connection_reject_command_builder;
}(base_1.CommandBuilder));
/**
 * Show details of a private endpoint connection request for storage account.
 *
 * Syntax:
 * ```
 * az storage account private-endpoint-connection show [--account-name]
 *                                                     [--id]
 *                                                     [--name]
 *                                                     [--query-examples]
 *                                                     [--resource-group]
 *                                                     [--subscription]
 * ```
 */
var az_storage_account_private_endpoint_connection_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_private_endpoint_connection_show_command_builder, _super);
    function az_storage_account_private_endpoint_connection_show_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** The storage account name. */
    az_storage_account_private_endpoint_connection_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The ID of the private endpoint connection associated with the Storage Account. You can get it using `az storage account show`. */
    az_storage_account_private_endpoint_connection_show_command_builder.prototype.id = function (value) {
        this.setFlag("--id", value);
        return this;
    };
    /** The name of the private endpoint connection associated with the Storage Account. */
    az_storage_account_private_endpoint_connection_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_private_endpoint_connection_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** The resource group name of specified storage account. */
    az_storage_account_private_endpoint_connection_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_private_endpoint_connection_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_private_endpoint_connection_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Get the private link resources that need to be created for a storage account.
 *
 * Syntax:
 * ```
 * az storage account private-link-resource list --account-name
 *                                               --resource-group
 *                                               [--query-examples]
 *                                               [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 */
var az_storage_account_private_link_resource_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_private_link_resource_list_command_builder, _super);
    function az_storage_account_private_link_resource_list_command_builder(commandPath, resultDataTypeName, accountName, resourceGroup) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.resourceGroup(resourceGroup);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_account_private_link_resource_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_private_link_resource_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_private_link_resource_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_private_link_resource_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_private_link_resource_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Checks that the storage account name is valid and is not already in use.
 *
 * Syntax:
 * ```
 * az storage account check-name --name
 *                               [--subscription]
 * ```
 *
 * @param {string} name The storage account name.
 */
var az_storage_account_check_name_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_check_name_command_builder, _super);
    function az_storage_account_check_name_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_check_name_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_check_name_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_check_name_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a storage account.
 *
 * Syntax:
 * ```
 * az storage account create --name
 *                           --resource-group
 *                           [--access-tier {Cool, Hot}]
 *                           [--allow-blob-public-access {false, true}]
 *                           [--assign-identity]
 *                           [--azure-storage-sid]
 *                           [--bypass {AzureServices, Logging, Metrics, None}]
 *                           [--custom-domain]
 *                           [--default-action {Allow, Deny}]
 *                           [--domain-guid]
 *                           [--domain-name]
 *                           [--domain-sid]
 *                           [--enable-files-aadds {false, true}]
 *                           [--enable-files-adds {false, true}]
 *                           [--enable-hierarchical-namespace {false, true}]
 *                           [--enable-large-file-share]
 *                           [--encryption-key-type-for-queue {Account, Service}]
 *                           [--encryption-key-type-for-table {Account, Service}]
 *                           [--encryption-services {blob, file, queue, table}]
 *                           [--forest-name]
 *                           [--https-only {false, true}]
 *                           [--kind {BlobStorage, BlockBlobStorage, FileStorage, Storage, StorageV2}]
 *                           [--location]
 *                           [--min-tls-version {TLS1_0, TLS1_1, TLS1_2}]
 *                           [--net-bios-domain-name]
 *                           [--publish-internet-endpoints {false, true}]
 *                           [--publish-microsoft-endpoints {false, true}]
 *                           [--require-infrastructure-encryption {false, true}]
 *                           [--routing-choice {InternetRouting, MicrosoftRouting}]
 *                           [--sku {Premium_LRS, Premium_ZRS, Standard_GRS, Standard_GZRS, Standard_LRS, Standard_RAGRS, Standard_RAGZRS, Standard_ZRS}]
 *                           [--subscription]
 *                           [--tags]
 * ```
 *
 * @param {string} name The storage account name.
 * @param {string} resourceGroup Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.
 */
var az_storage_account_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_create_command_builder, _super);
    function az_storage_account_create_command_builder(commandPath, resultDataTypeName, name, resourceGroup) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.resourceGroup(resourceGroup);
        return _this;
    }
    /** The storage account name. */
    az_storage_account_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_create_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation. */
    az_storage_account_create_command_builder.prototype.accessTier = function (value) {
        this.setFlag("--access-tier", value);
        return this;
    };
    /** Allow or disallow public access to all blobs or containers in the storage account. The default value for this property is null, which is equivalent to true. When true, containers in the account may be configured for public access. Note that setting this property to true does not enable anonymous access to any data in the account. The additional step of configuring the public access setting for a container is required to enable anonymous access. */
    az_storage_account_create_command_builder.prototype.allowBlobPublicAccess = function (value) {
        this.setFlag("--allow-blob-public-access", value.toString());
        return this;
    };
    /** Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault. */
    az_storage_account_create_command_builder.prototype.assignIdentity = function (value) {
        this.setFlag("--assign-identity", value);
        return this;
    };
    /** Specify the security identifier (SID) for Azure Storage. Required when --enable-files-adds is set to True. */
    az_storage_account_create_command_builder.prototype.azureStorageSid = function (value) {
        this.setFlag("--azure-storage-sid", value);
        return this;
    };
    /** Bypass traffic for space-separated uses. */
    az_storage_account_create_command_builder.prototype.bypass = function (value) {
        this.setFlag("--bypass", value);
        return this;
    };
    /** User domain assigned to the storage account. Name is the CNAME source. */
    az_storage_account_create_command_builder.prototype.customDomain = function (value) {
        this.setFlag("--custom-domain", value);
        return this;
    };
    /** Default action to apply when no rule matches. */
    az_storage_account_create_command_builder.prototype.defaultAction = function (value) {
        this.setFlag("--default-action", value);
        return this;
    };
    /** Specify the domain GUID. Required when --enable-files-adds is set to True. */
    az_storage_account_create_command_builder.prototype.domainGuid = function (value) {
        this.setFlag("--domain-guid", value);
        return this;
    };
    /** Specify the primary domain that the AD DNS server is authoritative for. Required when --enable-files-adds is set to True. */
    az_storage_account_create_command_builder.prototype.domainName = function (value) {
        this.setFlag("--domain-name", value);
        return this;
    };
    /** Specify the security identifier (SID). Required when --enable-files-adds is set to True. */
    az_storage_account_create_command_builder.prototype.domainSid = function (value) {
        this.setFlag("--domain-sid", value);
        return this;
    };
    /** Enable Azure Active Directory Domain Services authentication for Azure Files. */
    az_storage_account_create_command_builder.prototype.enableFilesAadds = function (value) {
        this.setFlag("--enable-files-aadds", value.toString());
        return this;
    };
    /** Enable Azure Files Active Directory Domain Service Authentication for storage account. When --enable-files-adds is set to true, Azure Active Directory Properties arguments must be provided. */
    az_storage_account_create_command_builder.prototype.enableFilesAdds = function (value) {
        this.setFlag("--enable-files-adds", value.toString());
        return this;
    };
    /** Allow the blob service to exhibit filesystem semantics. This property can be enabled only when storage account kind is StorageV2. */
    az_storage_account_create_command_builder.prototype.enableHierarchicalNamespace = function (value) {
        this.setFlag("--enable-hierarchical-namespace", value.toString());
        return this;
    };
    /** Enable the capability to support large file shares with more than 5 TiB capacity for storage account.Once the property is enabled, the feature cannot be disabled. Currently only supported for LRS and ZRS replication types, hence account conversions to geo-redundant accounts would not be possible. For more information, please refer to <a href="https://go.microsoft.com/fwlink/?linkid=2086047">https://go.microsoft.com/fwlink/?linkid=2086047</a>. */
    az_storage_account_create_command_builder.prototype.enableLargeFileShare = function (value) {
        this.setFlag("--enable-large-file-share", value);
        return this;
    };
    /** Set the encryption key type for Queue service. "Account": Queue will be encrypted with account-scoped encryption key. "Service": Queue will always be encrypted with service-scoped keys. Currently the default encryption key type is "Service". */
    az_storage_account_create_command_builder.prototype.encryptionKeyTypeForQueue = function (value) {
        this.setFlag("--encryption-key-type-for-queue", value);
        return this;
    };
    /** Set the encryption key type for Table service. "Account": Table will be encrypted with account-scoped encryption key. "Service": Table will always be encrypted with service-scoped keys. Currently the default encryption key type is "Service". */
    az_storage_account_create_command_builder.prototype.encryptionKeyTypeForTable = function (value) {
        this.setFlag("--encryption-key-type-for-table", value);
        return this;
    };
    /** Specifies which service(s) to encrypt. */
    az_storage_account_create_command_builder.prototype.encryptionServices = function (value) {
        this.setFlag("--encryption-services", value);
        return this;
    };
    /** Specify the Active Directory forest to get. Required when --enable-files-adds is set to True. */
    az_storage_account_create_command_builder.prototype.forestName = function (value) {
        this.setFlag("--forest-name", value);
        return this;
    };
    /** Allow https traffic only to storage service if set to true. The default value is true. */
    az_storage_account_create_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value.toString());
        return this;
    };
    /** Indicates the type of storage account. */
    az_storage_account_create_command_builder.prototype.kind = function (value) {
        this.setFlag("--kind", value);
        return this;
    };
    /** Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`. */
    az_storage_account_create_command_builder.prototype.location = function (value) {
        this.setFlag("--location", value);
        return this;
    };
    /** The minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
    az_storage_account_create_command_builder.prototype.minTlsVersion = function (value) {
        this.setFlag("--min-tls-version", value);
        return this;
    };
    /** Specify the NetBIOS domain name. Required when --enable-files-adds is set to True. */
    az_storage_account_create_command_builder.prototype.netBiosDomainName = function (value) {
        this.setFlag("--net-bios-domain-name", value);
        return this;
    };
    /** A boolean flag which indicates whether internet routing storage endpoints are to be published. */
    az_storage_account_create_command_builder.prototype.publishInternetEndpoints = function (value) {
        this.setFlag("--publish-internet-endpoints", value.toString());
        return this;
    };
    /** A boolean flag which indicates whether microsoft routing storage endpoints are to be published. */
    az_storage_account_create_command_builder.prototype.publishMicrosoftEndpoints = function (value) {
        this.setFlag("--publish-microsoft-endpoints", value.toString());
        return this;
    };
    /** A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. */
    az_storage_account_create_command_builder.prototype.requireInfrastructureEncryption = function (value) {
        this.setFlag("--require-infrastructure-encryption", value.toString());
        return this;
    };
    /** Routing Choice defines the kind of network routing opted by the user. */
    az_storage_account_create_command_builder.prototype.routingChoice = function (value) {
        this.setFlag("--routing-choice", value);
        return this;
    };
    /** The storage account SKU. */
    az_storage_account_create_command_builder.prototype.sku = function (value) {
        this.setFlag("--sku", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Space-separated tags: key[=value] [key[=value] ...]. Use "" to clear existing tags. */
    az_storage_account_create_command_builder.prototype.tags = function (value) {
        this.setFlag("--tags", value);
        return this;
    };
    return az_storage_account_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a storage account.
 *
 * Syntax:
 * ```
 * az storage account delete [--ids]
 *                           [--name]
 *                           [--resource-group]
 *                           [--subscription]
 *                           [--yes]
 * ```
 */
var az_storage_account_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_delete_command_builder, _super);
    function az_storage_account_delete_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_account_delete_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The storage account name. */
    az_storage_account_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_delete_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Do not prompt for confirmation. */
    az_storage_account_delete_command_builder.prototype.yes = function (value) {
        this.setFlag("--yes", value);
        return this;
    };
    return az_storage_account_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Failover request can be triggered for a storage account in case of availability issues.
 *
 * Syntax:
 * ```
 * az storage account failover [--ids]
 *                             [--name]
 *                             [--no-wait]
 *                             [--resource-group]
 *                             [--subscription]
 *                             [--yes]
 * ```
 */
var az_storage_account_failover_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_failover_command_builder, _super);
    function az_storage_account_failover_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_account_failover_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The storage account name. */
    az_storage_account_failover_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Do not wait for the long-running operation to finish. */
    az_storage_account_failover_command_builder.prototype.noWait = function (value) {
        this.setFlag("--no-wait", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_failover_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_failover_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Do not prompt for confirmation. */
    az_storage_account_failover_command_builder.prototype.yes = function (value) {
        this.setFlag("--yes", value);
        return this;
    };
    return az_storage_account_failover_command_builder;
}(base_1.CommandBuilder));
/**
 * Generates a shared access signature for the account.
 *
 * Syntax:
 * ```
 * az storage account generate-sas --expiry
 *                                 --permissions
 *                                 --resource-types
 *                                 --services
 *                                 [--account-key]
 *                                 [--account-name]
 *                                 [--connection-string]
 *                                 [--https-only]
 *                                 [--ids]
 *                                 [--ip]
 *                                 [--start]
 *                                 [--subscription]
 * ```
 *
 * @param {string} expiry Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid.
 * @param {string} permissions The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (l)ist (p)rocess (r)ead (u)pdate (w)rite. Can be combined.
 * @param {string} resourceTypes The resource types the SAS is applicable for. Allowed values: (s)ervice (c)ontainer (o)bject. Can be combined.
 * @param {string} services The storage services the SAS is applicable for. Allowed values: (b)lob (f)ile (q)ueue (t)able. Can be combined.
 */
var az_storage_account_generate_sas_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_generate_sas_command_builder, _super);
    function az_storage_account_generate_sas_command_builder(commandPath, resultDataTypeName, expiry, permissions, resourceTypes, services) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.expiry(expiry);
        _this.permissions(permissions);
        _this.resourceTypes(resourceTypes);
        _this.services(services);
        return _this;
    }
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. */
    az_storage_account_generate_sas_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (l)ist (p)rocess (r)ead (u)pdate (w)rite. Can be combined. */
    az_storage_account_generate_sas_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** The resource types the SAS is applicable for. Allowed values: (s)ervice (c)ontainer (o)bject. Can be combined. */
    az_storage_account_generate_sas_command_builder.prototype.resourceTypes = function (value) {
        this.setFlag("--resource-types", value);
        return this;
    };
    /** The storage services the SAS is applicable for. Allowed values: (b)lob (f)ile (q)ueue (t)able. Can be combined. */
    az_storage_account_generate_sas_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_account_generate_sas_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Must be used in conjunction with either storage account key or a SAS token. Environment Variable: AZURE_STORAGE_ACCOUNT. */
    az_storage_account_generate_sas_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_account_generate_sas_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted. */
    az_storage_account_generate_sas_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value);
        return this;
    };
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_account_generate_sas_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses. */
    az_storage_account_generate_sas_command_builder.prototype.ip = function (value) {
        this.setFlag("--ip", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Defaults to the time of the request. */
    az_storage_account_generate_sas_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_generate_sas_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_generate_sas_command_builder;
}(base_1.CommandBuilder));
/**
 * List storage accounts.
 *
 * Syntax:
 * ```
 * az storage account list [--query-examples]
 *                         [--resource-group]
 *                         [--subscription]
 * ```
 */
var az_storage_account_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_list_command_builder, _super);
    function az_storage_account_list_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Revoke all user delegation keys for a storage account.
 *
 * Syntax:
 * ```
 * az storage account revoke-delegation-keys [--ids]
 *                                           [--name]
 *                                           [--resource-group]
 *                                           [--subscription]
 * ```
 */
var az_storage_account_revoke_delegation_keys_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_revoke_delegation_keys_command_builder, _super);
    function az_storage_account_revoke_delegation_keys_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_account_revoke_delegation_keys_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The storage account name. */
    az_storage_account_revoke_delegation_keys_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_revoke_delegation_keys_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_revoke_delegation_keys_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_revoke_delegation_keys_command_builder;
}(base_1.CommandBuilder));
/**
 * Show storage account properties.
 *
 * Syntax:
 * ```
 * az storage account show [--expand]
 *                         [--ids]
 *                         [--name]
 *                         [--query-examples]
 *                         [--resource-group]
 *                         [--subscription]
 * ```
 */
var az_storage_account_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_show_command_builder, _super);
    function az_storage_account_show_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** May be used to expand the properties within account's properties. By default, data is not included when fetching properties. Currently we only support geoReplicationStats and blobRestoreStatus. */
    az_storage_account_show_command_builder.prototype.expand = function (value) {
        this.setFlag("--expand", value);
        return this;
    };
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_account_show_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The storage account name. */
    az_storage_account_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_account_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Get the connection string for a storage account.
 *
 * Syntax:
 * ```
 * az storage account show-connection-string [--blob-endpoint]
 *                                           [--file-endpoint]
 *                                           [--ids]
 *                                           [--key {primary, secondary}]
 *                                           [--name]
 *                                           [--protocol {http, https}]
 *                                           [--queue-endpoint]
 *                                           [--resource-group]
 *                                           [--sas-token]
 *                                           [--subscription]
 *                                           [--table-endpoint]
 * ```
 */
var az_storage_account_show_connection_string_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_show_connection_string_command_builder, _super);
    function az_storage_account_show_connection_string_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Custom endpoint for blobs. */
    az_storage_account_show_connection_string_command_builder.prototype.blobEndpoint = function (value) {
        this.setFlag("--blob-endpoint", value);
        return this;
    };
    /** Custom endpoint for files. */
    az_storage_account_show_connection_string_command_builder.prototype.fileEndpoint = function (value) {
        this.setFlag("--file-endpoint", value);
        return this;
    };
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_account_show_connection_string_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The key to use. */
    az_storage_account_show_connection_string_command_builder.prototype.key = function (value) {
        this.setFlag("--key", value);
        return this;
    };
    /** The storage account name. */
    az_storage_account_show_connection_string_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The default endpoint protocol. */
    az_storage_account_show_connection_string_command_builder.prototype.protocol = function (value) {
        this.setFlag("--protocol", value);
        return this;
    };
    /** Custom endpoint for queues. */
    az_storage_account_show_connection_string_command_builder.prototype.queueEndpoint = function (value) {
        this.setFlag("--queue-endpoint", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_show_connection_string_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The SAS token to be used in the connection-string. */
    az_storage_account_show_connection_string_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_show_connection_string_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Custom endpoint for tables. */
    az_storage_account_show_connection_string_command_builder.prototype.tableEndpoint = function (value) {
        this.setFlag("--table-endpoint", value);
        return this;
    };
    return az_storage_account_show_connection_string_command_builder;
}(base_1.CommandBuilder));
/**
 * Show the current count and limit of the storage accounts under the subscription.
 *
 * Syntax:
 * ```
 * az storage account show-usage --location
 *                               [--subscription]
 * ```
 *
 * @param {string} location Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`.
 */
var az_storage_account_show_usage_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_show_usage_command_builder, _super);
    function az_storage_account_show_usage_command_builder(commandPath, resultDataTypeName, location) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.location(location);
        return _this;
    }
    /** Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`. */
    az_storage_account_show_usage_command_builder.prototype.location = function (value) {
        this.setFlag("--location", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_show_usage_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_account_show_usage_command_builder;
}(base_1.CommandBuilder));
/**
 * Update the properties of a storage account.
 *
 * Syntax:
 * ```
 * az storage account update [--access-tier {Cool, Hot}]
 *                           [--add]
 *                           [--allow-blob-public-access {false, true}]
 *                           [--assign-identity]
 *                           [--azure-storage-sid]
 *                           [--bypass {AzureServices, Logging, Metrics, None}]
 *                           [--custom-domain]
 *                           [--default-action {Allow, Deny}]
 *                           [--domain-guid]
 *                           [--domain-name]
 *                           [--domain-sid]
 *                           [--enable-files-aadds {false, true}]
 *                           [--enable-files-adds {false, true}]
 *                           [--enable-large-file-share]
 *                           [--encryption-key-name]
 *                           [--encryption-key-source {Microsoft.Keyvault, Microsoft.Storage}]
 *                           [--encryption-key-vault]
 *                           [--encryption-key-version]
 *                           [--encryption-services {blob, file, queue, table}]
 *                           [--force-string]
 *                           [--forest-name]
 *                           [--https-only {false, true}]
 *                           [--ids]
 *                           [--min-tls-version {TLS1_0, TLS1_1, TLS1_2}]
 *                           [--name]
 *                           [--net-bios-domain-name]
 *                           [--publish-internet-endpoints {false, true}]
 *                           [--publish-microsoft-endpoints {false, true}]
 *                           [--remove]
 *                           [--resource-group]
 *                           [--routing-choice {InternetRouting, MicrosoftRouting}]
 *                           [--set]
 *                           [--sku {Premium_LRS, Premium_ZRS, Standard_GRS, Standard_GZRS, Standard_LRS, Standard_RAGRS, Standard_RAGZRS, Standard_ZRS}]
 *                           [--subscription]
 *                           [--tags]
 *                           [--use-subdomain {false, true}]
 * ```
 */
var az_storage_account_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_account_update_command_builder, _super);
    function az_storage_account_update_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** The access tier used for billing StandardBlob accounts. Cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. It is required for StandardBlob accounts during creation. */
    az_storage_account_update_command_builder.prototype.accessTier = function (value) {
        this.setFlag("--access-tier", value);
        return this;
    };
    /** Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty <key=value, string or JSON string>. */
    az_storage_account_update_command_builder.prototype.add = function (value) {
        this.setFlag("--add", value);
        return this;
    };
    /** Allow or disallow public access to all blobs or containers in the storage account. The default value for this property is null, which is equivalent to true. When true, containers in the account may be configured for public access. Note that setting this property to true does not enable anonymous access to any data in the account. The additional step of configuring the public access setting for a container is required to enable anonymous access. */
    az_storage_account_update_command_builder.prototype.allowBlobPublicAccess = function (value) {
        this.setFlag("--allow-blob-public-access", value.toString());
        return this;
    };
    /** Generate and assign a new Storage Account Identity for this storage account for use with key management services like Azure KeyVault. */
    az_storage_account_update_command_builder.prototype.assignIdentity = function (value) {
        this.setFlag("--assign-identity", value);
        return this;
    };
    /** Specify the security identifier (SID) for Azure Storage. Required when --enable-files-adds is set to True. */
    az_storage_account_update_command_builder.prototype.azureStorageSid = function (value) {
        this.setFlag("--azure-storage-sid", value);
        return this;
    };
    /** Bypass traffic for space-separated uses. */
    az_storage_account_update_command_builder.prototype.bypass = function (value) {
        this.setFlag("--bypass", value);
        return this;
    };
    /** User domain assigned to the storage account. Name is the CNAME source. Use "" to clear existing value. */
    az_storage_account_update_command_builder.prototype.customDomain = function (value) {
        this.setFlag("--custom-domain", value);
        return this;
    };
    /** Default action to apply when no rule matches. */
    az_storage_account_update_command_builder.prototype.defaultAction = function (value) {
        this.setFlag("--default-action", value);
        return this;
    };
    /** Specify the domain GUID. Required when --enable-files-adds is set to True. */
    az_storage_account_update_command_builder.prototype.domainGuid = function (value) {
        this.setFlag("--domain-guid", value);
        return this;
    };
    /** Specify the primary domain that the AD DNS server is authoritative for. Required when --enable-files-adds is set to True. */
    az_storage_account_update_command_builder.prototype.domainName = function (value) {
        this.setFlag("--domain-name", value);
        return this;
    };
    /** Specify the security identifier (SID). Required when --enable-files-adds is set to True. */
    az_storage_account_update_command_builder.prototype.domainSid = function (value) {
        this.setFlag("--domain-sid", value);
        return this;
    };
    /** Enable Azure Active Directory Domain Services authentication for Azure Files. */
    az_storage_account_update_command_builder.prototype.enableFilesAadds = function (value) {
        this.setFlag("--enable-files-aadds", value.toString());
        return this;
    };
    /** Enable Azure Files Active Directory Domain Service Authentication for storage account. When --enable-files-adds is set to true, Azure Active Directory Properties arguments must be provided. */
    az_storage_account_update_command_builder.prototype.enableFilesAdds = function (value) {
        this.setFlag("--enable-files-adds", value.toString());
        return this;
    };
    /** Enable the capability to support large file shares with more than 5 TiB capacity for storage account.Once the property is enabled, the feature cannot be disabled. Currently only supported for LRS and ZRS replication types, hence account conversions to geo-redundant accounts would not be possible. For more information, please refer to <a href="https://go.microsoft.com/fwlink/?linkid=2086047">https://go.microsoft.com/fwlink/?linkid=2086047</a>. */
    az_storage_account_update_command_builder.prototype.enableLargeFileShare = function (value) {
        this.setFlag("--enable-large-file-share", value);
        return this;
    };
    /** The name of the KeyVault key. */
    az_storage_account_update_command_builder.prototype.encryptionKeyName = function (value) {
        this.setFlag("--encryption-key-name", value);
        return this;
    };
    /** The default encryption key source. */
    az_storage_account_update_command_builder.prototype.encryptionKeySource = function (value) {
        this.setFlag("--encryption-key-source", value);
        return this;
    };
    /** The Uri of the KeyVault. */
    az_storage_account_update_command_builder.prototype.encryptionKeyVault = function (value) {
        this.setFlag("--encryption-key-vault", value);
        return this;
    };
    /** The version of the KeyVault key to use, which will opt out of implicit key rotation. Please use "" to opt in key auto-rotation again. */
    az_storage_account_update_command_builder.prototype.encryptionKeyVersion = function (value) {
        this.setFlag("--encryption-key-version", value);
        return this;
    };
    /** Specifies which service(s) to encrypt. */
    az_storage_account_update_command_builder.prototype.encryptionServices = function (value) {
        this.setFlag("--encryption-services", value);
        return this;
    };
    /** When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON. */
    az_storage_account_update_command_builder.prototype.forceString = function (value) {
        this.setFlag("--force-string", value);
        return this;
    };
    /** Specify the Active Directory forest to get. Required when --enable-files-adds is set to True. */
    az_storage_account_update_command_builder.prototype.forestName = function (value) {
        this.setFlag("--forest-name", value);
        return this;
    };
    /** Allows https traffic only to storage service. */
    az_storage_account_update_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value.toString());
        return this;
    };
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_account_update_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
    az_storage_account_update_command_builder.prototype.minTlsVersion = function (value) {
        this.setFlag("--min-tls-version", value);
        return this;
    };
    /** The storage account name. */
    az_storage_account_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Specify the NetBIOS domain name. Required when --enable-files-adds is set to True. */
    az_storage_account_update_command_builder.prototype.netBiosDomainName = function (value) {
        this.setFlag("--net-bios-domain-name", value);
        return this;
    };
    /** A boolean flag which indicates whether internet routing storage endpoints are to be published. */
    az_storage_account_update_command_builder.prototype.publishInternetEndpoints = function (value) {
        this.setFlag("--publish-internet-endpoints", value.toString());
        return this;
    };
    /** A boolean flag which indicates whether microsoft routing storage endpoints are to be published. */
    az_storage_account_update_command_builder.prototype.publishMicrosoftEndpoints = function (value) {
        this.setFlag("--publish-microsoft-endpoints", value.toString());
        return this;
    };
    /** Remove a property or an element from a list.  Example: --remove property.list <indexToRemove> OR --remove propertyToRemove. */
    az_storage_account_update_command_builder.prototype.remove = function (value) {
        this.setFlag("--remove", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_account_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Routing Choice defines the kind of network routing opted by the user. */
    az_storage_account_update_command_builder.prototype.routingChoice = function (value) {
        this.setFlag("--routing-choice", value);
        return this;
    };
    /** Update an object by specifying a property path and value to set.  Example: --set property1.property2=<value>. */
    az_storage_account_update_command_builder.prototype.set = function (value) {
        this.setFlag("--set", value);
        return this;
    };
    /** The storage account SKU. */
    az_storage_account_update_command_builder.prototype.sku = function (value) {
        this.setFlag("--sku", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_account_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Space-separated tags: key[=value] [key[=value] ...]. Use "" to clear existing tags. */
    az_storage_account_update_command_builder.prototype.tags = function (value) {
        this.setFlag("--tags", value);
        return this;
    };
    /** Specify whether to use indirect CNAME validation. */
    az_storage_account_update_command_builder.prototype.useSubdomain = function (value) {
        this.setFlag("--use-subdomain", value.toString());
        return this;
    };
    return az_storage_account_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
 *
 * Syntax:
 * ```
 * az storage blob copy cancel --copy-id
 *                             --destination-blob
 *                             --destination-container
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--connection-string]
 *                             [--lease-id]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} copyId Copy identifier provided in the copy.id of the original copy_blob operation.
 * @param {string} destinationBlob Name of the destination blob. If the exists, it will be overwritten.
 * @param {string} destinationContainer The container name.
 */
var az_storage_blob_copy_cancel_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_copy_cancel_command_builder, _super);
    function az_storage_blob_copy_cancel_command_builder(commandPath, resultDataTypeName, copyId, destinationBlob, destinationContainer) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.copyId(copyId);
        _this.destinationBlob(destinationBlob);
        _this.destinationContainer(destinationContainer);
        return _this;
    }
    /** Copy identifier provided in the copy.id of the original copy_blob operation. */
    az_storage_blob_copy_cancel_command_builder.prototype.copyId = function (value) {
        this.setFlag("--copy-id", value);
        return this;
    };
    /** Name of the destination blob. If the exists, it will be overwritten. */
    az_storage_blob_copy_cancel_command_builder.prototype.destinationBlob = function (value) {
        this.setFlag("--destination-blob", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_copy_cancel_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_copy_cancel_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_copy_cancel_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_copy_cancel_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_copy_cancel_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Required if the destination blob has an active infinite lease. */
    az_storage_blob_copy_cancel_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_copy_cancel_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_copy_cancel_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_copy_cancel_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_copy_cancel_command_builder;
}(base_1.CommandBuilder));
/**
 * Copies a blob asynchronously. Use `az storage blob show` to check the status of the blobs.
 *
 * Syntax:
 * ```
 * az storage blob copy start --destination-blob
 *                            --destination-container
 *                            [--account-key]
 *                            [--account-name]
 *                            [--auth-mode {key, login}]
 *                            [--connection-string]
 *                            [--destination-if-match]
 *                            [--destination-if-modified-since]
 *                            [--destination-if-none-match]
 *                            [--destination-if-unmodified-since]
 *                            [--destination-lease-id]
 *                            [--metadata]
 *                            [--requires-sync]
 *                            [--sas-token]
 *                            [--source-account-key]
 *                            [--source-account-name]
 *                            [--source-blob]
 *                            [--source-container]
 *                            [--source-if-match]
 *                            [--source-if-modified-since]
 *                            [--source-if-none-match]
 *                            [--source-if-unmodified-since]
 *                            [--source-lease-id]
 *                            [--source-path]
 *                            [--source-sas]
 *                            [--source-share]
 *                            [--source-snapshot]
 *                            [--source-uri]
 *                            [--subscription]
 *                            [--timeout]
 * ```
 *
 * @param {string} destinationBlob Name of the destination blob. If the exists, it will be overwritten.
 * @param {string} destinationContainer The container name.
 */
var az_storage_blob_copy_start_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_copy_start_command_builder, _super);
    function az_storage_blob_copy_start_command_builder(commandPath, resultDataTypeName, destinationBlob, destinationContainer) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.destinationBlob(destinationBlob);
        _this.destinationContainer(destinationContainer);
        return _this;
    }
    /** Name of the destination blob. If the exists, it will be overwritten. */
    az_storage_blob_copy_start_command_builder.prototype.destinationBlob = function (value) {
        this.setFlag("--destination-blob", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_copy_start_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_copy_start_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_copy_start_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_copy_start_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_copy_start_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_copy_start_command_builder.prototype.destinationIfMatch = function (value) {
        this.setFlag("--destination-if-match", value);
        return this;
    };
    /** A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_copy_start_command_builder.prototype.destinationIfModifiedSince = function (value) {
        this.setFlag("--destination-if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (\*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_copy_start_command_builder.prototype.destinationIfNoneMatch = function (value) {
        this.setFlag("--destination-if-none-match", value);
        return this;
    };
    /** A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified date/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_copy_start_command_builder.prototype.destinationIfUnmodifiedSince = function (value) {
        this.setFlag("--destination-if-unmodified-since", value);
        return this;
    };
    /** The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed). */
    az_storage_blob_copy_start_command_builder.prototype.destinationLeaseId = function (value) {
        this.setFlag("--destination-lease-id", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_blob_copy_start_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Enforces that the service will not return a response until the copy is complete. */
    az_storage_blob_copy_start_command_builder.prototype.requiresSync = function (value) {
        this.setFlag("--requires-sync", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_copy_start_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The storage account key of the source blob. */
    az_storage_blob_copy_start_command_builder.prototype.sourceAccountKey = function (value) {
        this.setFlag("--source-account-key", value);
        return this;
    };
    /** The storage account name of the source blob. */
    az_storage_blob_copy_start_command_builder.prototype.sourceAccountName = function (value) {
        this.setFlag("--source-account-name", value);
        return this;
    };
    /** The blob name for the source storage account. */
    az_storage_blob_copy_start_command_builder.prototype.sourceBlob = function (value) {
        this.setFlag("--source-blob", value);
        return this;
    };
    /** The container name for the source storage account. */
    az_storage_blob_copy_start_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this conditional header to copy the source blob only if its ETag matches the value specified. If the ETag values do not match, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File. */
    az_storage_blob_copy_start_command_builder.prototype.sourceIfMatch = function (value) {
        this.setFlag("--source-if-match", value);
        return this;
    };
    /** A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has been modified since the specified date/time. */
    az_storage_blob_copy_start_command_builder.prototype.sourceIfModifiedSince = function (value) {
        this.setFlag("--source-if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this conditional header to copy the blob only if its ETag does not match the value specified. If the values are identical, the Blob service returns status code 412 (Precondition Failed). This header cannot be specified if the source is an Azure File. */
    az_storage_blob_copy_start_command_builder.prototype.sourceIfNoneMatch = function (value) {
        this.setFlag("--source-if-none-match", value);
        return this;
    };
    /** A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the source blob has not been modified since the specified date/time. */
    az_storage_blob_copy_start_command_builder.prototype.sourceIfUnmodifiedSince = function (value) {
        this.setFlag("--source-if-unmodified-since", value);
        return this;
    };
    /** Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob. */
    az_storage_blob_copy_start_command_builder.prototype.sourceLeaseId = function (value) {
        this.setFlag("--source-lease-id", value);
        return this;
    };
    /** The file path for the source storage account. */
    az_storage_blob_copy_start_command_builder.prototype.sourcePath = function (value) {
        this.setFlag("--source-path", value);
        return this;
    };
    /** The shared access signature for the source storage account. */
    az_storage_blob_copy_start_command_builder.prototype.sourceSas = function (value) {
        this.setFlag("--source-sas", value);
        return this;
    };
    /** The share name for the source storage account. */
    az_storage_blob_copy_start_command_builder.prototype.sourceShare = function (value) {
        this.setFlag("--source-share", value);
        return this;
    };
    /** The blob snapshot for the source storage account. */
    az_storage_blob_copy_start_command_builder.prototype.sourceSnapshot = function (value) {
        this.setFlag("--source-snapshot", value);
        return this;
    };
    /** A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: `https://myaccount.blob.core.windows.net/mycontainer/myblob`, `https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>`, `https://otheraccount.blob.core.windows.net/mycontainer/myblob?sastoken`. */
    az_storage_blob_copy_start_command_builder.prototype.sourceUri = function (value) {
        this.setFlag("--source-uri", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_copy_start_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_copy_start_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_copy_start_command_builder;
}(base_1.CommandBuilder));
/**
 * Copy multiple blobs to a blob container. Use `az storage blob show` to check the status of the blobs.
 *
 * Syntax:
 * ```
 * az storage blob copy start-batch [--account-key]
 *                                  [--account-name]
 *                                  [--auth-mode {key, login}]
 *                                  [--connection-string]
 *                                  [--destination-container]
 *                                  [--destination-path]
 *                                  [--dryrun]
 *                                  [--pattern]
 *                                  [--sas-token]
 *                                  [--source-account-key]
 *                                  [--source-account-name]
 *                                  [--source-container]
 *                                  [--source-sas]
 *                                  [--source-share]
 *                                  [--source-uri]
 *                                  [--subscription]
 * ```
 */
var az_storage_blob_copy_start_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_copy_start_batch_command_builder, _super);
    function az_storage_blob_copy_start_batch_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_copy_start_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_copy_start_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_copy_start_batch_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_copy_start_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The blob container where the selected source files or blobs will be copied to. */
    az_storage_blob_copy_start_batch_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** The destination path that will be appended to the blob name. */
    az_storage_blob_copy_start_batch_command_builder.prototype.destinationPath = function (value) {
        this.setFlag("--destination-path", value);
        return this;
    };
    /** List the files or blobs to be uploaded. No actual data transfer will occur. */
    az_storage_blob_copy_start_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** The pattern used for globbing files or blobs in the source. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_blob_copy_start_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_copy_start_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The account key for the source storage account. */
    az_storage_blob_copy_start_batch_command_builder.prototype.sourceAccountKey = function (value) {
        this.setFlag("--source-account-key", value);
        return this;
    };
    /** The source storage account from which the files or blobs are copied to the destination. If omitted, the source account is used. */
    az_storage_blob_copy_start_batch_command_builder.prototype.sourceAccountName = function (value) {
        this.setFlag("--source-account-name", value);
        return this;
    };
    /** The source container from which blobs are copied. */
    az_storage_blob_copy_start_batch_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** The shared access signature for the source storage account. */
    az_storage_blob_copy_start_batch_command_builder.prototype.sourceSas = function (value) {
        this.setFlag("--source-sas", value);
        return this;
    };
    /** The source share from which files are copied. */
    az_storage_blob_copy_start_batch_command_builder.prototype.sourceShare = function (value) {
        this.setFlag("--source-share", value);
        return this;
    };
    /** A URI specifying a file share or blob container from which the files or blobs are copied. */
    az_storage_blob_copy_start_batch_command_builder.prototype.sourceUri = function (value) {
        this.setFlag("--source-uri", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_copy_start_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_blob_copy_start_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
 *
 * Syntax:
 * ```
 * az storage blob incremental-copy cancel --container-name
 *                                         --copy-id
 *                                         --name
 *                                         [--account-key]
 *                                         [--account-name]
 *                                         [--auth-mode {key, login}]
 *                                         [--connection-string]
 *                                         [--lease-id]
 *                                         [--sas-token]
 *                                         [--subscription]
 *                                         [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} copyId Copy identifier provided in the copy.id of the original copy_blob operation.
 * @param {string} name The blob name.
 */
var az_storage_blob_incremental_copy_cancel_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_incremental_copy_cancel_command_builder, _super);
    function az_storage_blob_incremental_copy_cancel_command_builder(commandPath, resultDataTypeName, containerName, copyId, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.copyId(copyId);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Copy identifier provided in the copy.id of the original copy_blob operation. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.copyId = function (value) {
        this.setFlag("--copy-id", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Required if the destination blob has an active infinite lease. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_incremental_copy_cancel_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_incremental_copy_cancel_command_builder;
}(base_1.CommandBuilder));
/**
 * Copies an incremental copy of a blob asynchronously.
 *
 * Syntax:
 * ```
 * az storage blob incremental-copy start --destination-blob
 *                                        --destination-container
 *                                        [--account-key]
 *                                        [--account-name]
 *                                        [--auth-mode {key, login}]
 *                                        [--connection-string]
 *                                        [--destination-if-match]
 *                                        [--destination-if-modified-since]
 *                                        [--destination-if-none-match]
 *                                        [--destination-if-unmodified-since]
 *                                        [--destination-lease-id]
 *                                        [--metadata]
 *                                        [--sas-token]
 *                                        [--source-account-key]
 *                                        [--source-account-name]
 *                                        [--source-blob]
 *                                        [--source-container]
 *                                        [--source-lease-id]
 *                                        [--source-sas]
 *                                        [--source-snapshot]
 *                                        [--source-uri]
 *                                        [--subscription]
 *                                        [--timeout]
 * ```
 *
 * @param {string} destinationBlob Name of the destination blob. If the exists, it will be overwritten.
 * @param {string} destinationContainer The container name.
 */
var az_storage_blob_incremental_copy_start_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_incremental_copy_start_command_builder, _super);
    function az_storage_blob_incremental_copy_start_command_builder(commandPath, resultDataTypeName, destinationBlob, destinationContainer) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.destinationBlob(destinationBlob);
        _this.destinationContainer(destinationContainer);
        return _this;
    }
    /** Name of the destination blob. If the exists, it will be overwritten. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.destinationBlob = function (value) {
        this.setFlag("--destination-blob", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value matches the ETag value for an existing destination blob. If the ETag for the destination blob does not match the ETag specified for If-Match, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_incremental_copy_start_command_builder.prototype.destinationIfMatch = function (value) {
        this.setFlag("--destination-if-match", value);
        return this;
    };
    /** A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has been modified since the specified date/time. If the destination blob has not been modified, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_incremental_copy_start_command_builder.prototype.destinationIfModifiedSince = function (value) {
        this.setFlag("--destination-if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify an ETag value for this conditional header to copy the blob only if the specified ETag value does not match the ETag value for the destination blob. Specify the wildcard character (\*) to perform the operation only if the destination blob does not exist. If the specified condition isn't met, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_incremental_copy_start_command_builder.prototype.destinationIfNoneMatch = function (value) {
        this.setFlag("--destination-if-none-match", value);
        return this;
    };
    /** A DateTime value. Azure expects the date value passed in to be UTC. If timezone is included, any non-UTC datetimes will be converted to UTC. If a date is passed in without timezone info, it is assumed to be UTC. Specify this conditional header to copy the blob only if the destination blob has not been modified since the specified ate/time. If the destination blob has been modified, the Blob service returns status code 412 (Precondition Failed). */
    az_storage_blob_incremental_copy_start_command_builder.prototype.destinationIfUnmodifiedSince = function (value) {
        this.setFlag("--destination-if-unmodified-since", value);
        return this;
    };
    /** The lease ID specified for this header must match the lease ID of the destination blob. If the request does not include the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed). */
    az_storage_blob_incremental_copy_start_command_builder.prototype.destinationLeaseId = function (value) {
        this.setFlag("--destination-lease-id", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The storage account key of the source blob. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceAccountKey = function (value) {
        this.setFlag("--source-account-key", value);
        return this;
    };
    /** The storage account name of the source blob. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceAccountName = function (value) {
        this.setFlag("--source-account-name", value);
        return this;
    };
    /** The blob name for the source storage account. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceBlob = function (value) {
        this.setFlag("--source-blob", value);
        return this;
    };
    /** The container name for the source storage account. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** Specify this to perform the Copy Blob operation only if the lease ID given matches the active lease ID of the source blob. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceLeaseId = function (value) {
        this.setFlag("--source-lease-id", value);
        return this;
    };
    /** The shared access signature for the source storage account. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceSas = function (value) {
        this.setFlag("--source-sas", value);
        return this;
    };
    /** The blob snapshot for the source storage account. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceSnapshot = function (value) {
        this.setFlag("--source-snapshot", value);
        return this;
    };
    /** A URL of up to 2 KB in length that specifies an Azure page blob. The value should be URL-encoded as it would appear in a request URI. The copy source must be a snapshot and include a valid SAS token or be public. Example: `https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>&sastoken`. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.sourceUri = function (value) {
        this.setFlag("--source-uri", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_incremental_copy_start_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_incremental_copy_start_command_builder;
}(base_1.CommandBuilder));
/**
 * Request a new lease.
 *
 * Syntax:
 * ```
 * az storage blob lease acquire --blob-name
 *                               --container-name
 *                               [--account-key]
 *                               [--account-name]
 *                               [--auth-mode {key, login}]
 *                               [--connection-string]
 *                               [--if-match]
 *                               [--if-modified-since]
 *                               [--if-none-match]
 *                               [--if-unmodified-since]
 *                               [--lease-duration]
 *                               [--proposed-lease-id]
 *                               [--sas-token]
 *                               [--subscription]
 *                               [--timeout]
 * ```
 *
 * @param {string} blobName The blob name.
 * @param {string} containerName The container name.
 */
var az_storage_blob_lease_acquire_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_lease_acquire_command_builder, _super);
    function az_storage_blob_lease_acquire_command_builder(commandPath, resultDataTypeName, blobName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.blobName(blobName);
        _this.containerName(containerName);
        return _this;
    }
    /** The blob name. */
    az_storage_blob_lease_acquire_command_builder.prototype.blobName = function (value) {
        this.setFlag("--blob-name", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_lease_acquire_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_lease_acquire_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_lease_acquire_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_lease_acquire_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_lease_acquire_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_lease_acquire_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_acquire_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_lease_acquire_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_acquire_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Specify the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease). */
    az_storage_blob_lease_acquire_command_builder.prototype.leaseDuration = function (value) {
        this.setFlag("--lease-duration", value);
        return this;
    };
    /** Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. */
    az_storage_blob_lease_acquire_command_builder.prototype.proposedLeaseId = function (value) {
        this.setFlag("--proposed-lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_lease_acquire_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_lease_acquire_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_lease_acquire_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_lease_acquire_command_builder;
}(base_1.CommandBuilder));
/**
 * Break the lease, if the container or blob has an active lease.
 *
 * Syntax:
 * ```
 * az storage blob lease break --blob-name
 *                             --container-name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--connection-string]
 *                             [--if-match]
 *                             [--if-modified-since]
 *                             [--if-none-match]
 *                             [--if-unmodified-since]
 *                             [--lease-break-period]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} blobName The blob name.
 * @param {string} containerName The container name.
 */
var az_storage_blob_lease_break_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_lease_break_command_builder, _super);
    function az_storage_blob_lease_break_command_builder(commandPath, resultDataTypeName, blobName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.blobName(blobName);
        _this.containerName(containerName);
        return _this;
    }
    /** The blob name. */
    az_storage_blob_lease_break_command_builder.prototype.blobName = function (value) {
        this.setFlag("--blob-name", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_lease_break_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_lease_break_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_lease_break_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_lease_break_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_lease_break_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_lease_break_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_break_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_lease_break_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_break_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** This is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately. */
    az_storage_blob_lease_break_command_builder.prototype.leaseBreakPeriod = function (value) {
        this.setFlag("--lease-break-period", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_lease_break_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_lease_break_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_lease_break_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_lease_break_command_builder;
}(base_1.CommandBuilder));
/**
 * Change the lease ID of an active lease.
 *
 * Syntax:
 * ```
 * az storage blob lease change --blob-name
 *                              --container-name
 *                              --lease-id
 *                              --proposed-lease-id
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--if-match]
 *                              [--if-modified-since]
 *                              [--if-none-match]
 *                              [--if-unmodified-since]
 *                              [--sas-token]
 *                              [--subscription]
 *                              [--timeout]
 * ```
 *
 * @param {string} blobName The blob name.
 * @param {string} containerName The container name.
 * @param {string} leaseId Required if the blob has an active lease.
 * @param {string} proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.
 */
var az_storage_blob_lease_change_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_lease_change_command_builder, _super);
    function az_storage_blob_lease_change_command_builder(commandPath, resultDataTypeName, blobName, containerName, leaseId, proposedLeaseId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.blobName(blobName);
        _this.containerName(containerName);
        _this.leaseId(leaseId);
        _this.proposedLeaseId(proposedLeaseId);
        return _this;
    }
    /** The blob name. */
    az_storage_blob_lease_change_command_builder.prototype.blobName = function (value) {
        this.setFlag("--blob-name", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_lease_change_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_lease_change_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. */
    az_storage_blob_lease_change_command_builder.prototype.proposedLeaseId = function (value) {
        this.setFlag("--proposed-lease-id", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_lease_change_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_lease_change_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_lease_change_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_lease_change_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_lease_change_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_change_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_lease_change_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_change_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_lease_change_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_lease_change_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_lease_change_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_lease_change_command_builder;
}(base_1.CommandBuilder));
/**
 * Release the lease.
 *
 * Syntax:
 * ```
 * az storage blob lease release --blob-name
 *                               --container-name
 *                               --lease-id
 *                               [--account-key]
 *                               [--account-name]
 *                               [--auth-mode {key, login}]
 *                               [--connection-string]
 *                               [--if-match]
 *                               [--if-modified-since]
 *                               [--if-none-match]
 *                               [--if-unmodified-since]
 *                               [--sas-token]
 *                               [--subscription]
 *                               [--timeout]
 * ```
 *
 * @param {string} blobName The blob name.
 * @param {string} containerName The container name.
 * @param {string} leaseId Required if the blob has an active lease.
 */
var az_storage_blob_lease_release_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_lease_release_command_builder, _super);
    function az_storage_blob_lease_release_command_builder(commandPath, resultDataTypeName, blobName, containerName, leaseId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.blobName(blobName);
        _this.containerName(containerName);
        _this.leaseId(leaseId);
        return _this;
    }
    /** The blob name. */
    az_storage_blob_lease_release_command_builder.prototype.blobName = function (value) {
        this.setFlag("--blob-name", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_lease_release_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_lease_release_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_lease_release_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_lease_release_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_lease_release_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_lease_release_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_lease_release_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_release_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_lease_release_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_release_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_lease_release_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_lease_release_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_lease_release_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_lease_release_command_builder;
}(base_1.CommandBuilder));
/**
 * Renew the lease.
 *
 * Syntax:
 * ```
 * az storage blob lease renew --blob-name
 *                             --container-name
 *                             --lease-id
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--connection-string]
 *                             [--if-match]
 *                             [--if-modified-since]
 *                             [--if-none-match]
 *                             [--if-unmodified-since]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} blobName The blob name.
 * @param {string} containerName The container name.
 * @param {string} leaseId Required if the blob has an active lease.
 */
var az_storage_blob_lease_renew_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_lease_renew_command_builder, _super);
    function az_storage_blob_lease_renew_command_builder(commandPath, resultDataTypeName, blobName, containerName, leaseId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.blobName(blobName);
        _this.containerName(containerName);
        _this.leaseId(leaseId);
        return _this;
    }
    /** The blob name. */
    az_storage_blob_lease_renew_command_builder.prototype.blobName = function (value) {
        this.setFlag("--blob-name", value);
        return this;
    };
    /** The container name. */
    az_storage_blob_lease_renew_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_lease_renew_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_lease_renew_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_lease_renew_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_lease_renew_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_lease_renew_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_lease_renew_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_renew_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_lease_renew_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_lease_renew_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_lease_renew_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_lease_renew_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_lease_renew_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_lease_renew_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata for the specified blob or snapshot.
 *
 * Syntax:
 * ```
 * az storage blob metadata show --container-name
 *                               --name
 *                               [--account-key]
 *                               [--account-name]
 *                               [--auth-mode {key, login}]
 *                               [--connection-string]
 *                               [--if-match]
 *                               [--if-modified-since]
 *                               [--if-none-match]
 *                               [--if-unmodified-since]
 *                               [--lease-id]
 *                               [--query-examples]
 *                               [--sas-token]
 *                               [--snapshot]
 *                               [--subscription]
 *                               [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_metadata_show_command_builder, _super);
    function az_storage_blob_metadata_show_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_metadata_show_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_metadata_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_metadata_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_metadata_show_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_metadata_show_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_metadata_show_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_metadata_show_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_metadata_show_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_blob_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The snapshot parameter is an opaque value that, when present, specifies the blob snapshot to retrieve. */
    az_storage_blob_metadata_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets user-defined metadata for the specified blob as one or more name-value pairs.
 *
 * Syntax:
 * ```
 * az storage blob metadata update --container-name
 *                                 --name
 *                                 [--account-key]
 *                                 [--account-name]
 *                                 [--auth-mode {key, login}]
 *                                 [--connection-string]
 *                                 [--if-match]
 *                                 [--if-modified-since]
 *                                 [--if-none-match]
 *                                 [--if-unmodified-since]
 *                                 [--lease-id]
 *                                 [--metadata]
 *                                 [--sas-token]
 *                                 [--subscription]
 *                                 [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_metadata_update_command_builder, _super);
    function az_storage_blob_metadata_update_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_metadata_update_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_metadata_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_metadata_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_metadata_update_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_metadata_update_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_metadata_update_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_metadata_update_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_metadata_update_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_blob_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Show the storage blob delete-policy.
 *
 * Syntax:
 * ```
 * az storage blob service-properties delete-policy show [--account-key]
 *                                                       [--account-name]
 *                                                       [--auth-mode {key, login}]
 *                                                       [--connection-string]
 *                                                       [--query-examples]
 *                                                       [--sas-token]
 *                                                       [--subscription]
 *                                                       [--timeout]
 * ```
 */
var az_storage_blob_service_properties_delete_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_service_properties_delete_policy_show_command_builder, _super);
    function az_storage_blob_service_properties_delete_policy_show_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_service_properties_delete_policy_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_service_properties_delete_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update the storage blob delete-policy.
 *
 * Syntax:
 * ```
 * az storage blob service-properties delete-policy update [--account-key]
 *                                                         [--account-name]
 *                                                         [--auth-mode {key, login}]
 *                                                         [--connection-string]
 *                                                         [--days-retained]
 *                                                         [--enable {false, true}]
 *                                                         [--sas-token]
 *                                                         [--subscription]
 * ```
 */
var az_storage_blob_service_properties_delete_policy_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_service_properties_delete_policy_update_command_builder, _super);
    function az_storage_blob_service_properties_delete_policy_update_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Number of days that soft-deleted blob will be retained. Must be in range [1,365]. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.daysRetained = function (value) {
        this.setFlag("--days-retained", value);
        return this;
    };
    /** Enables/disables soft-delete. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.enable = function (value) {
        this.setFlag("--enable", value.toString());
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_service_properties_delete_policy_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_blob_service_properties_delete_policy_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Gets the properties of a storage account's Blob service, including Azure Storage Analytics.
 *
 * Syntax:
 * ```
 * az storage blob service-properties show [--account-key]
 *                                         [--account-name]
 *                                         [--auth-mode {key, login}]
 *                                         [--connection-string]
 *                                         [--query-examples]
 *                                         [--sas-token]
 *                                         [--subscription]
 *                                         [--timeout]
 * ```
 */
var az_storage_blob_service_properties_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_service_properties_show_command_builder, _super);
    function az_storage_blob_service_properties_show_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_service_properties_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_service_properties_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_service_properties_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_service_properties_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_blob_service_properties_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_service_properties_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_service_properties_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_service_properties_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_service_properties_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update storage blob service properties.
 *
 * Syntax:
 * ```
 * az storage blob service-properties update [--404-document]
 *                                           [--account-key]
 *                                           [--account-name]
 *                                           [--add]
 *                                           [--auth-mode {key, login}]
 *                                           [--connection-string]
 *                                           [--delete-retention {false, true}]
 *                                           [--delete-retention-period]
 *                                           [--force-string]
 *                                           [--index-document]
 *                                           [--remove]
 *                                           [--sas-token]
 *                                           [--set]
 *                                           [--static-website {false, true}]
 *                                           [--subscription]
 *                                           [--timeout]
 * ```
 */
var az_storage_blob_service_properties_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_service_properties_update_command_builder, _super);
    function az_storage_blob_service_properties_update_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Represents the path to the error document that should be shown when an error 404 is issued, in other words, when a browser requests a page that does not exist. */
    az_storage_blob_service_properties_update_command_builder.prototype._404Document = function (value) {
        this.setFlag("--404-document", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_service_properties_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_service_properties_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty <key=value, string or JSON string>. */
    az_storage_blob_service_properties_update_command_builder.prototype.add = function (value) {
        this.setFlag("--add", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_service_properties_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_service_properties_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Enables soft-delete. */
    az_storage_blob_service_properties_update_command_builder.prototype.deleteRetention = function (value) {
        this.setFlag("--delete-retention", value.toString());
        return this;
    };
    /** Number of days that soft-deleted blob will be retained. Must be in range [1,365]. */
    az_storage_blob_service_properties_update_command_builder.prototype.deleteRetentionPeriod = function (value) {
        this.setFlag("--delete-retention-period", value);
        return this;
    };
    /** When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON. */
    az_storage_blob_service_properties_update_command_builder.prototype.forceString = function (value) {
        this.setFlag("--force-string", value);
        return this;
    };
    /** Represents the name of the index document. This is commonly "index.html". */
    az_storage_blob_service_properties_update_command_builder.prototype.indexDocument = function (value) {
        this.setFlag("--index-document", value);
        return this;
    };
    /** Remove a property or an element from a list.  Example: --remove property.list <indexToRemove> OR --remove propertyToRemove. */
    az_storage_blob_service_properties_update_command_builder.prototype.remove = function (value) {
        this.setFlag("--remove", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_service_properties_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Update an object by specifying a property path and value to set.  Example: --set property1.property2=<value>. */
    az_storage_blob_service_properties_update_command_builder.prototype.set = function (value) {
        this.setFlag("--set", value);
        return this;
    };
    /** Enables static-website. */
    az_storage_blob_service_properties_update_command_builder.prototype.staticWebsite = function (value) {
        this.setFlag("--static-website", value.toString());
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_service_properties_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_service_properties_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_service_properties_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Mark a blob or snapshot for deletion.
 *
 * Syntax:
 * ```
 * az storage blob delete --container-name
 *                        --name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--auth-mode {key, login}]
 *                        [--connection-string]
 *                        [--delete-snapshots {include, only}]
 *                        [--if-match]
 *                        [--if-modified-since]
 *                        [--if-none-match]
 *                        [--if-unmodified-since]
 *                        [--lease-id]
 *                        [--sas-token]
 *                        [--snapshot]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_delete_command_builder, _super);
    function az_storage_blob_delete_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_delete_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Required if the blob has associated snapshots. */
    az_storage_blob_delete_command_builder.prototype.deleteSnapshots = function (value) {
        this.setFlag("--delete-snapshots", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_delete_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_delete_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_delete_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_delete_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_delete_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to delete. */
    az_storage_blob_delete_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete blobs from a blob container recursively.
 *
 * Syntax:
 * ```
 * az storage blob delete-batch --source
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--delete-snapshots {include, only}]
 *                              [--dryrun]
 *                              [--if-match]
 *                              [--if-modified-since]
 *                              [--if-none-match]
 *                              [--if-unmodified-since]
 *                              [--lease-id]
 *                              [--pattern]
 *                              [--sas-token]
 *                              [--subscription]
 *                              [--timeout]
 * ```
 *
 * @param {string} source The blob container from where the files will be deleted.
 */
var az_storage_blob_delete_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_delete_batch_command_builder, _super);
    function az_storage_blob_delete_batch_command_builder(commandPath, resultDataTypeName, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.source(source);
        return _this;
    }
    /** The blob container from where the files will be deleted. */
    az_storage_blob_delete_batch_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_delete_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_delete_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_delete_batch_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_delete_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Required if the blob has associated snapshots. */
    az_storage_blob_delete_batch_command_builder.prototype.deleteSnapshots = function (value) {
        this.setFlag("--delete-snapshots", value);
        return this;
    };
    /** Show the summary of the operations to be taken instead of actually deleting the file(s). */
    az_storage_blob_delete_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_delete_batch_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_delete_batch_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). */
    az_storage_blob_delete_batch_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_delete_batch_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** The active lease id for the blob. */
    az_storage_blob_delete_batch_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** The pattern used for globbing files or blobs in the source. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_blob_delete_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_delete_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_delete_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_delete_batch_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_delete_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Downloads a blob to a file path, with automatic chunking and progress notifications.
 *
 * Syntax:
 * ```
 * az storage blob download --container-name
 *                          --file
 *                          --name
 *                          [--account-key]
 *                          [--account-name]
 *                          [--auth-mode {key, login}]
 *                          [--connection-string]
 *                          [--end-range]
 *                          [--if-match]
 *                          [--if-modified-since]
 *                          [--if-none-match]
 *                          [--if-unmodified-since]
 *                          [--lease-id]
 *                          [--max-connections]
 *                          [--no-progress]
 *                          [--open-mode]
 *                          [--sas-token]
 *                          [--snapshot]
 *                          [--socket-timeout]
 *                          [--start-range]
 *                          [--subscription]
 *                          [--timeout]
 *                          [--validate-content]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} file Path of file to write out to.
 * @param {string} name The blob name.
 */
var az_storage_blob_download_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_download_command_builder, _super);
    function az_storage_blob_download_command_builder(commandPath, resultDataTypeName, containerName, file, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.file(file);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_download_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Path of file to write out to. */
    az_storage_blob_download_command_builder.prototype.file = function (value) {
        this.setFlag("--file", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_download_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_download_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_download_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_download_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_download_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** End of byte range to use for downloading a section of the blob. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob. */
    az_storage_blob_download_command_builder.prototype.endRange = function (value) {
        this.setFlag("--end-range", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_download_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_download_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_download_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_download_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_download_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the blob. If this is the entire blob, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be useful if many blobs are expected to be empty as an extra request is required for empty blobs if max_connections is greater than 1. */
    az_storage_blob_download_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_blob_download_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used. */
    az_storage_blob_download_command_builder.prototype.openMode = function (value) {
        this.setFlag("--open-mode", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_download_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. */
    az_storage_blob_download_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** The socket timeout(secs), used by the service to regulate data flow. */
    az_storage_blob_download_command_builder.prototype.socketTimeout = function (value) {
        this.setFlag("--socket-timeout", value);
        return this;
    };
    /** Start of byte range to use for downloading a section of the blob. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of blob. */
    az_storage_blob_download_command_builder.prototype.startRange = function (value) {
        this.setFlag("--start-range", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_download_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_download_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** If set to true, validates an MD5 hash for each retrieved portion of the blob. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency. */
    az_storage_blob_download_command_builder.prototype.validateContent = function (value) {
        this.setFlag("--validate-content", value);
        return this;
    };
    return az_storage_blob_download_command_builder;
}(base_1.CommandBuilder));
/**
 * Download blobs from a blob container recursively.
 *
 * Syntax:
 * ```
 * az storage blob download-batch --destination
 *                                --source
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--dryrun]
 *                                [--max-connections]
 *                                [--no-progress]
 *                                [--pattern]
 *                                [--sas-token]
 *                                [--socket-timeout]
 *                                [--subscription]
 * ```
 *
 * @param {string} destination The existing destination folder for this download operation.
 * @param {string} source The blob container from where the files will be downloaded.
 */
var az_storage_blob_download_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_download_batch_command_builder, _super);
    function az_storage_blob_download_batch_command_builder(commandPath, resultDataTypeName, destination, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.destination(destination);
        _this.source(source);
        return _this;
    }
    /** The existing destination folder for this download operation. */
    az_storage_blob_download_batch_command_builder.prototype.destination = function (value) {
        this.setFlag("--destination", value);
        return this;
    };
    /** The blob container from where the files will be downloaded. */
    az_storage_blob_download_batch_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_download_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_download_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_download_batch_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_download_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Show the summary of the operations to be taken instead of actually downloading the file(s). */
    az_storage_blob_download_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** Maximum number of parallel connections to use when the blob size exceeds 64MB. */
    az_storage_blob_download_batch_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_blob_download_batch_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** The pattern used for globbing files or blobs in the source. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_blob_download_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_download_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The socket timeout(secs), used by the service to regulate data flow. */
    az_storage_blob_download_batch_command_builder.prototype.socketTimeout = function (value) {
        this.setFlag("--socket-timeout", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_download_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_blob_download_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a blob in a container.
 *
 * Syntax:
 * ```
 * az storage blob exists --container-name
 *                        --name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--auth-mode {key, login}]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--snapshot]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_exists_command_builder, _super);
    function az_storage_blob_exists_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_exists_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_exists_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The snapshot parameter is an opaque DateTime value that, when present, specifies the snapshot. */
    az_storage_blob_exists_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * Generate a shared access signature for the blob.
 *
 * Syntax:
 * ```
 * az storage blob generate-sas --container-name
 *                              --name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--as-user]
 *                              [--auth-mode {key, login}]
 *                              [--cache-control]
 *                              [--connection-string]
 *                              [--content-disposition]
 *                              [--content-encoding]
 *                              [--content-language]
 *                              [--content-type]
 *                              [--expiry]
 *                              [--full-uri]
 *                              [--https-only]
 *                              [--ip]
 *                              [--permissions]
 *                              [--policy-name]
 *                              [--start]
 *                              [--subscription]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_generate_sas_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_generate_sas_command_builder, _super);
    function az_storage_blob_generate_sas_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_generate_sas_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_generate_sas_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_generate_sas_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_generate_sas_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Indicates that this command return the SAS signed with the user delegation key. The expiry parameter and '--auth-mode login' are required if this argument is specified. */
    az_storage_blob_generate_sas_command_builder.prototype.asUser = function (value) {
        this.setFlag("--as-user", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_generate_sas_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Response header value for Cache-Control when resource is accessedusing this shared access signature. */
    az_storage_blob_generate_sas_command_builder.prototype.cacheControl = function (value) {
        this.setFlag("--cache-control", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_generate_sas_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Response header value for Content-Disposition when resource is accessedusing this shared access signature. */
    az_storage_blob_generate_sas_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** Response header value for Content-Encoding when resource is accessedusing this shared access signature. */
    az_storage_blob_generate_sas_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** Response header value for Content-Language when resource is accessedusing this shared access signature. */
    az_storage_blob_generate_sas_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** Response header value for Content-Type when resource is accessedusing this shared access signature. */
    az_storage_blob_generate_sas_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value. */
    az_storage_blob_generate_sas_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Indicates that this command return the full blob URI and the shared access signature token. */
    az_storage_blob_generate_sas_command_builder.prototype.fullUri = function (value) {
        this.setFlag("--full-uri", value);
        return this;
    };
    /** Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted. */
    az_storage_blob_generate_sas_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value);
        return this;
    };
    /** Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses. */
    az_storage_blob_generate_sas_command_builder.prototype.ip = function (value) {
        this.setFlag("--ip", value);
        return this;
    };
    /** The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined. */
    az_storage_blob_generate_sas_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** The name of a stored access policy within the container's ACL. */
    az_storage_blob_generate_sas_command_builder.prototype.policyName = function (value) {
        this.setFlag("--policy-name", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request. */
    az_storage_blob_generate_sas_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_generate_sas_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_blob_generate_sas_command_builder;
}(base_1.CommandBuilder));
/**
 * List blobs in a given container.
 *
 * Syntax:
 * ```
 * az storage blob list --container-name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--auth-mode {key, login}]
 *                      [--connection-string]
 *                      [--delimiter]
 *                      [--include]
 *                      [--marker]
 *                      [--num-results]
 *                      [--prefix]
 *                      [--query-examples]
 *                      [--sas-token]
 *                      [--show-next-marker]
 *                      [--subscription]
 *                      [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 */
var az_storage_blob_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_list_command_builder, _super);
    function az_storage_blob_list_command_builder(commandPath, resultDataTypeName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        return _this;
    }
    /** The container name. */
    az_storage_blob_list_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** When the request includes this parameter, the operation returns a BlobPrefix element in the result list that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string. */
    az_storage_blob_list_command_builder.prototype.delimiter = function (value) {
        this.setFlag("--delimiter", value);
        return this;
    };
    /** Specify one or more additional datasets to include in the response. Options include: (c)opy, (d)eleted, (m)etadata, (s)napshots, (v)ersions, (t)ags. Can be combined. */
    az_storage_blob_list_command_builder.prototype.include = function (value) {
        this.setFlag("--include", value);
        return this;
    };
    /** A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. If specified, this generator will begin returning results from the point where the previous generator stopped. */
    az_storage_blob_list_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** Specify the maximum number to return. If the request does not specify num_results, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remaining of the results. Provide "\*" to return all. */
    az_storage_blob_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** Filter the results to return only blobs whose name begins with the specified prefix. */
    az_storage_blob_list_command_builder.prototype.prefix = function (value) {
        this.setFlag("--prefix", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_blob_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Show nextMarker in result when specified. */
    az_storage_blob_list_command_builder.prototype.showNextMarker = function (value) {
        this.setFlag("--show-next-marker", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Restore blobs in the specified blob ranges.
 *
 * Syntax:
 * ```
 * az storage blob restore --account-name
 *                         --time-to-restore
 *                         [--blob-range]
 *                         [--no-wait]
 *                         [--resource-group]
 *                         [--subscription]
 * ```
 *
 * @param {string} accountName The storage account name.
 * @param {string} timeToRestore Restore blob to the specified time, which should be UTC datetime in (Y-m-d'T'H:M:S'Z').
 */
var az_storage_blob_restore_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_restore_command_builder, _super);
    function az_storage_blob_restore_command_builder(commandPath, resultDataTypeName, accountName, timeToRestore) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.timeToRestore(timeToRestore);
        return _this;
    }
    /** The storage account name. */
    az_storage_blob_restore_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Restore blob to the specified time, which should be UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_blob_restore_command_builder.prototype.timeToRestore = function (value) {
        this.setFlag("--time-to-restore", value);
        return this;
    };
    /** Blob ranges to restore. You need to two values to specify start_range and end_range for each blob range, e.g. -r blob1 blob2. Note: Empty means account start as start range value, and means account end for end range. */
    az_storage_blob_restore_command_builder.prototype.blobRange = function (value) {
        this.setFlag("--blob-range", value);
        return this;
    };
    /** Do not wait for the long-running operation to finish. */
    az_storage_blob_restore_command_builder.prototype.noWait = function (value) {
        this.setFlag("--no-wait", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_blob_restore_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_restore_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_blob_restore_command_builder;
}(base_1.CommandBuilder));
/**
 * Set the block or page tiers on the blob.
 *
 * Syntax:
 * ```
 * az storage blob set-tier --container-name
 *                          --name
 *                          --tier
 *                          [--account-key]
 *                          [--account-name]
 *                          [--auth-mode {key, login}]
 *                          [--connection-string]
 *                          [--rehydrate-priority {High, Standard}]
 *                          [--sas-token]
 *                          [--subscription]
 *                          [--timeout]
 *                          [--type {block, page}]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 * @param {string} tier The tier value to set the blob to.
 */
var az_storage_blob_set_tier_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_set_tier_command_builder, _super);
    function az_storage_blob_set_tier_command_builder(commandPath, resultDataTypeName, containerName, name, tier) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        _this.tier(tier);
        return _this;
    }
    /** The container name. */
    az_storage_blob_set_tier_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_set_tier_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The tier value to set the blob to. */
    az_storage_blob_set_tier_command_builder.prototype.tier = function (value) {
        this.setFlag("--tier", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_set_tier_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_set_tier_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_set_tier_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_set_tier_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Indicate the priority with which to rehydrate an archived blob. The priority can be set on a blob only once, default value is Standard. */
    az_storage_blob_set_tier_command_builder.prototype.rehydratePriority = function (value) {
        this.setFlag("--rehydrate-priority", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_set_tier_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_set_tier_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** The timeout parameter is expressed in seconds. This method may make multiple calls to the Azure service and the timeout will apply to each call individually. */
    az_storage_blob_set_tier_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** The blob type. */
    az_storage_blob_set_tier_command_builder.prototype.type = function (value) {
        this.setFlag("--type", value);
        return this;
    };
    return az_storage_blob_set_tier_command_builder;
}(base_1.CommandBuilder));
/**
 * Get the details of a blob.
 *
 * Syntax:
 * ```
 * az storage blob show --container-name
 *                      --name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--auth-mode {key, login}]
 *                      [--connection-string]
 *                      [--if-match]
 *                      [--if-modified-since]
 *                      [--if-none-match]
 *                      [--if-unmodified-since]
 *                      [--lease-id]
 *                      [--query-examples]
 *                      [--sas-token]
 *                      [--snapshot]
 *                      [--subscription]
 *                      [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_show_command_builder, _super);
    function az_storage_blob_show_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_show_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_show_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_show_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_show_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_show_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_show_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_blob_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. */
    az_storage_blob_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates a read-only snapshot of a blob.
 *
 * Syntax:
 * ```
 * az storage blob snapshot --container-name
 *                          --name
 *                          [--account-key]
 *                          [--account-name]
 *                          [--auth-mode {key, login}]
 *                          [--connection-string]
 *                          [--if-match]
 *                          [--if-modified-since]
 *                          [--if-none-match]
 *                          [--if-unmodified-since]
 *                          [--lease-id]
 *                          [--metadata]
 *                          [--sas-token]
 *                          [--subscription]
 *                          [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_snapshot_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_snapshot_command_builder, _super);
    function az_storage_blob_snapshot_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_snapshot_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_snapshot_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_snapshot_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_snapshot_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_snapshot_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_snapshot_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_snapshot_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_snapshot_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_snapshot_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_snapshot_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_snapshot_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_blob_snapshot_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_snapshot_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_snapshot_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_snapshot_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_snapshot_command_builder;
}(base_1.CommandBuilder));
/**
 * Sync blobs recursively to a storage blob container.
 *
 * Syntax:
 * ```
 * az storage blob sync --container
 *                      --source
 *                      [--account-key]
 *                      [--account-name]
 *                      [--auth-mode {key, login}]
 *                      [--connection-string]
 *                      [--destination]
 *                      [--exclude-path]
 *                      [--exclude-pattern]
 *                      [--include-pattern]
 *                      [--sas-token]
 *                      [--subscription]
 * ```
 *
 * @param {string} container The sync destination container.
 * @param {string} source The source file path to sync from.
 */
var az_storage_blob_sync_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_sync_command_builder, _super);
    function az_storage_blob_sync_command_builder(commandPath, resultDataTypeName, container, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.container(container);
        _this.source(source);
        return _this;
    }
    /** The sync destination container. */
    az_storage_blob_sync_command_builder.prototype.container = function (value) {
        this.setFlag("--container", value);
        return this;
    };
    /** The source file path to sync from. */
    az_storage_blob_sync_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_sync_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_sync_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_sync_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_sync_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The destination path that will be appended to the blob name. */
    az_storage_blob_sync_command_builder.prototype.destination = function (value) {
        this.setFlag("--destination", value);
        return this;
    };
    /** Exclude these paths. This option does not support wildcard characters (\*). Checks relative path prefix. For example: myFolder;myFolder/subDirName/file.pdf. */
    az_storage_blob_sync_command_builder.prototype.excludePath = function (value) {
        this.setFlag("--exclude-path", value);
        return this;
    };
    /** Exclude these files where the name matches the pattern list. For example: \*.jpg;\*.pdf;exactName. This option supports wildcard characters (\*). */
    az_storage_blob_sync_command_builder.prototype.excludePattern = function (value) {
        this.setFlag("--exclude-pattern", value);
        return this;
    };
    /** Include only these files where the name matches the pattern list. For example: \*.jpg;\*.pdf;exactName. This option supports wildcard characters (\*). */
    az_storage_blob_sync_command_builder.prototype.includePattern = function (value) {
        this.setFlag("--include-pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_sync_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_sync_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_blob_sync_command_builder;
}(base_1.CommandBuilder));
/**
 * The undelete Blob operation restores the contents and metadata of soft deleted blob or snapshot.
 *
 * Syntax:
 * ```
 * az storage blob undelete --container-name
 *                          --name
 *                          [--account-key]
 *                          [--account-name]
 *                          [--auth-mode {key, login}]
 *                          [--connection-string]
 *                          [--sas-token]
 *                          [--subscription]
 *                          [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_undelete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_undelete_command_builder, _super);
    function az_storage_blob_undelete_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_undelete_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_undelete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_undelete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_undelete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_undelete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_undelete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_undelete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_undelete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_undelete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_undelete_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets system properties on the blob.
 *
 * Syntax:
 * ```
 * az storage blob update --container-name
 *                        --name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--auth-mode {key, login}]
 *                        [--clear-content-settings {false, true}]
 *                        [--connection-string]
 *                        [--content-cache-control]
 *                        [--content-disposition]
 *                        [--content-encoding]
 *                        [--content-language]
 *                        [--content-md5]
 *                        [--content-type]
 *                        [--if-match]
 *                        [--if-modified-since]
 *                        [--if-none-match]
 *                        [--if-unmodified-since]
 *                        [--lease-id]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_update_command_builder, _super);
    function az_storage_blob_update_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_update_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** If this flag is set, then if any one or more of the following properties (--content-cache-control, --content-disposition, --content-encoding, --content-language, --content-md5, --content-type) is set, then all of these properties are set together. If a value is not provided for a given property when at least one of the properties listed below is set, then that property will be cleared. */
    az_storage_blob_update_command_builder.prototype.clearContentSettings = function (value) {
        this.setFlag("--clear-content-settings", value.toString());
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_blob_update_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_blob_update_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_blob_update_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_blob_update_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_blob_update_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_blob_update_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_update_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_update_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_update_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_update_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_update_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_blob_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Upload a file to a storage blob.
 *
 * Syntax:
 * ```
 * az storage blob upload --container-name
 *                        --file
 *                        --name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--auth-mode {key, login}]
 *                        [--connection-string]
 *                        [--content-cache-control]
 *                        [--content-disposition]
 *                        [--content-encoding]
 *                        [--content-language]
 *                        [--content-md5]
 *                        [--content-type]
 *                        [--encryption-scope]
 *                        [--if-match]
 *                        [--if-modified-since]
 *                        [--if-none-match]
 *                        [--if-unmodified-since]
 *                        [--lease-id]
 *                        [--max-connections]
 *                        [--maxsize-condition]
 *                        [--metadata]
 *                        [--no-progress]
 *                        [--sas-token]
 *                        [--socket-timeout]
 *                        [--subscription]
 *                        [--tier {P10, P20, P30, P4, P40, P50, P6, P60}]
 *                        [--timeout]
 *                        [--type {append, block, page}]
 *                        [--validate-content]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} file Path of the file to upload as the blob content.
 * @param {string} name The blob name.
 */
var az_storage_blob_upload_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_upload_command_builder, _super);
    function az_storage_blob_upload_command_builder(commandPath, resultDataTypeName, containerName, file, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.file(file);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_upload_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Path of the file to upload as the blob content. */
    az_storage_blob_upload_command_builder.prototype.file = function (value) {
        this.setFlag("--file", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_upload_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_upload_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_upload_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_upload_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_upload_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_blob_upload_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_blob_upload_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_blob_upload_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_blob_upload_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_blob_upload_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_blob_upload_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** A predefined encryption scope used to encrypt the data on the service. */
    az_storage_blob_upload_command_builder.prototype.encryptionScope = function (value) {
        this.setFlag("--encryption-scope", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_upload_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_upload_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. Specify the wildcard character (\*) to perform the operation only if the resource does not exist, and fail the operation if it does exist. */
    az_storage_blob_upload_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_upload_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Required if the blob has an active lease. */
    az_storage_blob_upload_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Maximum number of parallel connections to use when the blob size exceeds 64MB. */
    az_storage_blob_upload_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** The max length in bytes permitted for an append blob. */
    az_storage_blob_upload_command_builder.prototype.maxsizeCondition = function (value) {
        this.setFlag("--maxsize-condition", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_blob_upload_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_blob_upload_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_upload_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The socket timeout(secs), used by the service to regulate data flow. */
    az_storage_blob_upload_command_builder.prototype.socketTimeout = function (value) {
        this.setFlag("--socket-timeout", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_upload_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** A page blob tier value to set the blob to. The tier correlates to the size of the blob and number of allowed IOPS. This is only applicable to page blobs on premium storage accounts. */
    az_storage_blob_upload_command_builder.prototype.tier = function (value) {
        this.setFlag("--tier", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_upload_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** Defaults to 'page' for \*.vhd files, or 'block' otherwise. */
    az_storage_blob_upload_command_builder.prototype.type = function (value) {
        this.setFlag("--type", value);
        return this;
    };
    /** Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived. */
    az_storage_blob_upload_command_builder.prototype.validateContent = function (value) {
        this.setFlag("--validate-content", value);
        return this;
    };
    return az_storage_blob_upload_command_builder;
}(base_1.CommandBuilder));
/**
 * Upload files from a local directory to a blob container.
 *
 * Syntax:
 * ```
 * az storage blob upload-batch --destination
 *                              --source
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--content-cache-control]
 *                              [--content-disposition]
 *                              [--content-encoding]
 *                              [--content-language]
 *                              [--content-md5]
 *                              [--content-type]
 *                              [--destination-path]
 *                              [--dryrun]
 *                              [--if-match]
 *                              [--if-modified-since]
 *                              [--if-none-match]
 *                              [--if-unmodified-since]
 *                              [--lease-id]
 *                              [--max-connections]
 *                              [--maxsize-condition]
 *                              [--metadata]
 *                              [--no-progress]
 *                              [--pattern]
 *                              [--sas-token]
 *                              [--socket-timeout]
 *                              [--subscription]
 *                              [--timeout]
 *                              [--type {append, block, page}]
 *                              [--validate-content]
 * ```
 *
 * @param {string} destination The blob container where the files will be uploaded.
 * @param {string} source The directory where the files to be uploaded are located.
 */
var az_storage_blob_upload_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_upload_batch_command_builder, _super);
    function az_storage_blob_upload_batch_command_builder(commandPath, resultDataTypeName, destination, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.destination(destination);
        _this.source(source);
        return _this;
    }
    /** The blob container where the files will be uploaded. */
    az_storage_blob_upload_batch_command_builder.prototype.destination = function (value) {
        this.setFlag("--destination", value);
        return this;
    };
    /** The directory where the files to be uploaded are located. */
    az_storage_blob_upload_batch_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_upload_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_upload_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_upload_batch_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_upload_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_blob_upload_batch_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_blob_upload_batch_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_blob_upload_batch_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_blob_upload_batch_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_blob_upload_batch_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_blob_upload_batch_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** The destination path that will be appended to the blob name. */
    az_storage_blob_upload_batch_command_builder.prototype.destinationPath = function (value) {
        this.setFlag("--destination-path", value);
        return this;
    };
    /** Show the summary of the operations to be taken instead of actually uploading the file(s). */
    az_storage_blob_upload_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_blob_upload_batch_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_upload_batch_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). */
    az_storage_blob_upload_batch_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_blob_upload_batch_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** The active lease id for the blob. */
    az_storage_blob_upload_batch_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Maximum number of parallel connections to use when the blob size exceeds 64MB. */
    az_storage_blob_upload_batch_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** The max length in bytes permitted for an append blob. */
    az_storage_blob_upload_batch_command_builder.prototype.maxsizeCondition = function (value) {
        this.setFlag("--maxsize-condition", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_blob_upload_batch_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_blob_upload_batch_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** The pattern used for globbing files or blobs in the source. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_blob_upload_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_upload_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The socket timeout(secs), used by the service to regulate data flow. */
    az_storage_blob_upload_batch_command_builder.prototype.socketTimeout = function (value) {
        this.setFlag("--socket-timeout", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_upload_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_blob_upload_batch_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** Defaults to 'page' for \*.vhd files, or 'block' otherwise. The setting will override blob types for every file. */
    az_storage_blob_upload_batch_command_builder.prototype.type = function (value) {
        this.setFlag("--type", value);
        return this;
    };
    /** Specifies that an MD5 hash shall be calculated for each chunk of the blob and verified by the service when the chunk has arrived. */
    az_storage_blob_upload_batch_command_builder.prototype.validateContent = function (value) {
        this.setFlag("--validate-content", value);
        return this;
    };
    return az_storage_blob_upload_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Create the url to access a blob.
 *
 * Syntax:
 * ```
 * az storage blob url --container-name
 *                     --name
 *                     [--account-key]
 *                     [--account-name]
 *                     [--auth-mode {key, login}]
 *                     [--connection-string]
 *                     [--protocol {http, https}]
 *                     [--sas-token]
 *                     [--snapshot]
 *                     [--subscription]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The blob name.
 */
var az_storage_blob_url_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_blob_url_command_builder, _super);
    function az_storage_blob_url_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_blob_url_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The blob name. */
    az_storage_blob_url_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_blob_url_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_blob_url_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_blob_url_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_blob_url_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Protocol to use. */
    az_storage_blob_url_command_builder.prototype.protocol = function (value) {
        this.setFlag("--protocol", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_blob_url_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** An string value that uniquely identifies the snapshot. The value ofthis query parameter indicates the snapshot version. */
    az_storage_blob_url_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_blob_url_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_blob_url_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates or updates an unlocked immutability policy.
 *
 * Syntax:
 * ```
 * az storage container immutability-policy create --account-name
 *                                                 --container-name
 *                                                 [--allow-protected-append-writes {false, true}]
 *                                                 [--if-match]
 *                                                 [--period]
 *                                                 [--resource-group]
 *                                                 [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 */
var az_storage_container_immutability_policy_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_immutability_policy_create_command_builder, _super);
    function az_storage_container_immutability_policy_create_command_builder(commandPath, resultDataTypeName, accountName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_immutability_policy_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_immutability_policy_create_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. */
    az_storage_container_immutability_policy_create_command_builder.prototype.allowProtectedAppendWrites = function (value) {
        this.setFlag("--allow-protected-append-writes", value.toString());
        return this;
    };
    /** The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
    az_storage_container_immutability_policy_create_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** The immutability period for the blobs in the container since the policy creation, in days. */
    az_storage_container_immutability_policy_create_command_builder.prototype.period = function (value) {
        this.setFlag("--period", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_immutability_policy_create_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_immutability_policy_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_immutability_policy_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Aborts an unlocked immutability policy.
 *
 * Syntax:
 * ```
 * az storage container immutability-policy delete --account-name
 *                                                 --container-name
 *                                                 --if-match
 *                                                 [--resource-group]
 *                                                 [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 * @param {string} ifMatch The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
 */
var az_storage_container_immutability_policy_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_immutability_policy_delete_command_builder, _super);
    function az_storage_container_immutability_policy_delete_command_builder(commandPath, resultDataTypeName, accountName, containerName, ifMatch) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        _this.ifMatch(ifMatch);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_immutability_policy_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_immutability_policy_delete_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
    az_storage_container_immutability_policy_delete_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_immutability_policy_delete_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_immutability_policy_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_immutability_policy_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
 *
 * Syntax:
 * ```
 * az storage container immutability-policy extend --account-name
 *                                                 --container-name
 *                                                 --if-match
 *                                                 [--allow-protected-append-writes {false, true}]
 *                                                 [--period]
 *                                                 [--resource-group]
 *                                                 [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 * @param {string} ifMatch The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
 */
var az_storage_container_immutability_policy_extend_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_immutability_policy_extend_command_builder, _super);
    function az_storage_container_immutability_policy_extend_command_builder(commandPath, resultDataTypeName, accountName, containerName, ifMatch) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        _this.ifMatch(ifMatch);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_immutability_policy_extend_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_immutability_policy_extend_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
    az_storage_container_immutability_policy_extend_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. */
    az_storage_container_immutability_policy_extend_command_builder.prototype.allowProtectedAppendWrites = function (value) {
        this.setFlag("--allow-protected-append-writes", value.toString());
        return this;
    };
    /** The immutability period for the blobs in the container since the policy creation, in days. */
    az_storage_container_immutability_policy_extend_command_builder.prototype.period = function (value) {
        this.setFlag("--period", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_immutability_policy_extend_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_immutability_policy_extend_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_immutability_policy_extend_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets the ImmutabilityPolicy to Locked state.
 *
 * Syntax:
 * ```
 * az storage container immutability-policy lock --account-name
 *                                               --container-name
 *                                               --if-match
 *                                               [--resource-group]
 *                                               [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 * @param {string} ifMatch The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
 */
var az_storage_container_immutability_policy_lock_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_immutability_policy_lock_command_builder, _super);
    function az_storage_container_immutability_policy_lock_command_builder(commandPath, resultDataTypeName, accountName, containerName, ifMatch) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        _this.ifMatch(ifMatch);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_immutability_policy_lock_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_immutability_policy_lock_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
    az_storage_container_immutability_policy_lock_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_immutability_policy_lock_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_immutability_policy_lock_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_immutability_policy_lock_command_builder;
}(base_1.CommandBuilder));
/**
 * Gets the existing immutability policy along with the corresponding ETag in response headers and body.
 *
 * Syntax:
 * ```
 * az storage container immutability-policy show --account-name
 *                                               --container-name
 *                                               [--if-match]
 *                                               [--query-examples]
 *                                               [--resource-group]
 *                                               [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 */
var az_storage_container_immutability_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_immutability_policy_show_command_builder, _super);
    function az_storage_container_immutability_policy_show_command_builder(commandPath, resultDataTypeName, accountName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_immutability_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_immutability_policy_show_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The entity state (ETag) version of the immutability policy to update. A value of "\*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
    az_storage_container_immutability_policy_show_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_container_immutability_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_immutability_policy_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_immutability_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_immutability_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Requests a new lease.
 *
 * Syntax:
 * ```
 * az storage container lease acquire --container-name
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--auth-mode {key, login}]
 *                                    [--connection-string]
 *                                    [--if-modified-since]
 *                                    [--if-unmodified-since]
 *                                    [--lease-duration]
 *                                    [--proposed-lease-id]
 *                                    [--sas-token]
 *                                    [--subscription]
 *                                    [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 */
var az_storage_container_lease_acquire_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_lease_acquire_command_builder, _super);
    function az_storage_container_lease_acquire_command_builder(commandPath, resultDataTypeName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        return _this;
    }
    /** The container name. */
    az_storage_container_lease_acquire_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_lease_acquire_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_lease_acquire_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_lease_acquire_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_lease_acquire_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_acquire_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_acquire_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. Default is -1 (infinite lease). */
    az_storage_container_lease_acquire_command_builder.prototype.leaseDuration = function (value) {
        this.setFlag("--lease-duration", value);
        return this;
    };
    /** Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. */
    az_storage_container_lease_acquire_command_builder.prototype.proposedLeaseId = function (value) {
        this.setFlag("--proposed-lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_lease_acquire_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_lease_acquire_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_lease_acquire_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_lease_acquire_command_builder;
}(base_1.CommandBuilder));
/**
 * Break the lease, if the container has an active lease.
 *
 * Syntax:
 * ```
 * az storage container lease break --container-name
 *                                  [--account-key]
 *                                  [--account-name]
 *                                  [--auth-mode {key, login}]
 *                                  [--connection-string]
 *                                  [--if-modified-since]
 *                                  [--if-unmodified-since]
 *                                  [--lease-break-period]
 *                                  [--sas-token]
 *                                  [--subscription]
 *                                  [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 */
var az_storage_container_lease_break_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_lease_break_command_builder, _super);
    function az_storage_container_lease_break_command_builder(commandPath, resultDataTypeName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        return _this;
    }
    /** The container name. */
    az_storage_container_lease_break_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_lease_break_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_lease_break_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_lease_break_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_lease_break_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_break_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_break_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** This is the proposed duration of seconds that the lease should continue before it is broken, between 0 and 60 seconds. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately. */
    az_storage_container_lease_break_command_builder.prototype.leaseBreakPeriod = function (value) {
        this.setFlag("--lease-break-period", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_lease_break_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_lease_break_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_lease_break_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_lease_break_command_builder;
}(base_1.CommandBuilder));
/**
 * Change the lease ID of an active lease.
 *
 * Syntax:
 * ```
 * az storage container lease change --container-name
 *                                   --lease-id
 *                                   --proposed-lease-id
 *                                   [--account-key]
 *                                   [--account-name]
 *                                   [--auth-mode {key, login}]
 *                                   [--connection-string]
 *                                   [--if-modified-since]
 *                                   [--if-unmodified-since]
 *                                   [--sas-token]
 *                                   [--subscription]
 *                                   [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} leaseId Lease ID for active lease.
 * @param {string} proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format.
 */
var az_storage_container_lease_change_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_lease_change_command_builder, _super);
    function az_storage_container_lease_change_command_builder(commandPath, resultDataTypeName, containerName, leaseId, proposedLeaseId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.leaseId(leaseId);
        _this.proposedLeaseId(proposedLeaseId);
        return _this;
    }
    /** The container name. */
    az_storage_container_lease_change_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Lease ID for active lease. */
    az_storage_container_lease_change_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. */
    az_storage_container_lease_change_command_builder.prototype.proposedLeaseId = function (value) {
        this.setFlag("--proposed-lease-id", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_lease_change_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_lease_change_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_lease_change_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_lease_change_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_change_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_change_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_lease_change_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_lease_change_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_lease_change_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_lease_change_command_builder;
}(base_1.CommandBuilder));
/**
 * Release the lease.
 *
 * Syntax:
 * ```
 * az storage container lease release --container-name
 *                                    --lease-id
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--auth-mode {key, login}]
 *                                    [--connection-string]
 *                                    [--if-modified-since]
 *                                    [--if-unmodified-since]
 *                                    [--sas-token]
 *                                    [--subscription]
 *                                    [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} leaseId Lease ID for active lease.
 */
var az_storage_container_lease_release_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_lease_release_command_builder, _super);
    function az_storage_container_lease_release_command_builder(commandPath, resultDataTypeName, containerName, leaseId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.leaseId(leaseId);
        return _this;
    }
    /** The container name. */
    az_storage_container_lease_release_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Lease ID for active lease. */
    az_storage_container_lease_release_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_lease_release_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_lease_release_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_lease_release_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_lease_release_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_release_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_release_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_lease_release_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_lease_release_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_lease_release_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_lease_release_command_builder;
}(base_1.CommandBuilder));
/**
 * Renews the lease.
 *
 * Syntax:
 * ```
 * az storage container lease renew --container-name
 *                                  --lease-id
 *                                  [--account-key]
 *                                  [--account-name]
 *                                  [--auth-mode {key, login}]
 *                                  [--connection-string]
 *                                  [--if-modified-since]
 *                                  [--if-unmodified-since]
 *                                  [--sas-token]
 *                                  [--subscription]
 *                                  [--timeout]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} leaseId Lease ID for active lease.
 */
var az_storage_container_lease_renew_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_lease_renew_command_builder, _super);
    function az_storage_container_lease_renew_command_builder(commandPath, resultDataTypeName, containerName, leaseId) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.leaseId(leaseId);
        return _this;
    }
    /** The container name. */
    az_storage_container_lease_renew_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Lease ID for active lease. */
    az_storage_container_lease_renew_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_lease_renew_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_lease_renew_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_lease_renew_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_lease_renew_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_renew_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_lease_renew_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_lease_renew_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_lease_renew_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_lease_renew_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_lease_renew_command_builder;
}(base_1.CommandBuilder));
/**
 * Clears legal hold tags.
 *
 * Syntax:
 * ```
 * az storage container legal-hold clear --account-name
 *                                       --container-name
 *                                       --tags
 *                                       [--resource-group]
 *                                       [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 * @param {string} tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.
 */
var az_storage_container_legal_hold_clear_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_legal_hold_clear_command_builder, _super);
    function az_storage_container_legal_hold_clear_command_builder(commandPath, resultDataTypeName, accountName, containerName, tags) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        _this.tags(tags);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_legal_hold_clear_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_legal_hold_clear_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case. */
    az_storage_container_legal_hold_clear_command_builder.prototype.tags = function (value) {
        this.setFlag("--tags", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_legal_hold_clear_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_legal_hold_clear_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_legal_hold_clear_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets legal hold tags.
 *
 * Syntax:
 * ```
 * az storage container legal-hold set --account-name
 *                                     --container-name
 *                                     --tags
 *                                     [--resource-group]
 *                                     [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 * @param {string} tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case.
 */
var az_storage_container_legal_hold_set_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_legal_hold_set_command_builder, _super);
    function az_storage_container_legal_hold_set_command_builder(commandPath, resultDataTypeName, accountName, containerName, tags) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        _this.tags(tags);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_legal_hold_set_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_legal_hold_set_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case. */
    az_storage_container_legal_hold_set_command_builder.prototype.tags = function (value) {
        this.setFlag("--tags", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_legal_hold_set_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_legal_hold_set_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_legal_hold_set_command_builder;
}(base_1.CommandBuilder));
/**
 * Get the legal hold properties of a container.
 *
 * Syntax:
 * ```
 * az storage container legal-hold show --account-name
 *                                      --container-name
 *                                      [--query-examples]
 *                                      [--resource-group]
 *                                      [--subscription]
 * ```
 *
 * @param {string} accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
 * @param {string} containerName The container name.
 */
var az_storage_container_legal_hold_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_legal_hold_show_command_builder, _super);
    function az_storage_container_legal_hold_show_command_builder(commandPath, resultDataTypeName, accountName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.accountName(accountName);
        _this.containerName(containerName);
        return _this;
    }
    /** The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. */
    az_storage_container_legal_hold_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The container name. */
    az_storage_container_legal_hold_show_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_container_legal_hold_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_legal_hold_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_legal_hold_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_legal_hold_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata for the specified container.
 *
 * Syntax:
 * ```
 * az storage container metadata show --name
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--auth-mode {key, login}]
 *                                    [--connection-string]
 *                                    [--lease-id]
 *                                    [--query-examples]
 *                                    [--sas-token]
 *                                    [--subscription]
 *                                    [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_metadata_show_command_builder, _super);
    function az_storage_container_metadata_show_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_metadata_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_metadata_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** If specified, get_container_metadata only succeeds if the container's lease is active and matches this ID. */
    az_storage_container_metadata_show_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_container_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets one or more user-defined name-value pairs for the specified container.
 *
 * Syntax:
 * ```
 * az storage container metadata update --name
 *                                      [--account-key]
 *                                      [--account-name]
 *                                      [--auth-mode {key, login}]
 *                                      [--connection-string]
 *                                      [--if-modified-since]
 *                                      [--lease-id]
 *                                      [--metadata]
 *                                      [--sas-token]
 *                                      [--subscription]
 *                                      [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_metadata_update_command_builder, _super);
    function az_storage_container_metadata_update_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_metadata_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_metadata_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_metadata_update_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** If specified, set_container_metadata only succeeds if the container's lease is active and matches this ID. */
    az_storage_container_metadata_update_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_container_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a stored access policy on the containing object.
 *
 * Syntax:
 * ```
 * az storage container policy create --container-name
 *                                    --name
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--auth-mode {key, login}]
 *                                    [--connection-string]
 *                                    [--expiry]
 *                                    [--lease-id]
 *                                    [--permissions]
 *                                    [--sas-token]
 *                                    [--start]
 *                                    [--subscription]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The stored access policy name.
 */
var az_storage_container_policy_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_policy_create_command_builder, _super);
    function az_storage_container_policy_create_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_policy_create_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The stored access policy name. */
    az_storage_container_policy_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_policy_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_policy_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_policy_create_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_policy_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_container_policy_create_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** The container lease ID. */
    az_storage_container_policy_create_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Allowed values: (a)dd (c)reate (d)elete (l)ist (r)ead (w)rite. Can be combined. */
    az_storage_container_policy_create_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_policy_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_container_policy_create_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_policy_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_policy_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage container policy delete --container-name
 *                                    --name
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--auth-mode {key, login}]
 *                                    [--connection-string]
 *                                    [--lease-id]
 *                                    [--sas-token]
 *                                    [--subscription]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The stored access policy name.
 */
var az_storage_container_policy_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_policy_delete_command_builder, _super);
    function az_storage_container_policy_delete_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_policy_delete_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The stored access policy name. */
    az_storage_container_policy_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_policy_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_policy_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_policy_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_policy_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The container lease ID. */
    az_storage_container_policy_delete_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_policy_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_policy_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_policy_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * List stored access policies on a containing object.
 *
 * Syntax:
 * ```
 * az storage container policy list --container-name
 *                                  [--account-key]
 *                                  [--account-name]
 *                                  [--auth-mode {key, login}]
 *                                  [--connection-string]
 *                                  [--lease-id]
 *                                  [--query-examples]
 *                                  [--sas-token]
 *                                  [--subscription]
 * ```
 *
 * @param {string} containerName The container name.
 */
var az_storage_container_policy_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_policy_list_command_builder, _super);
    function az_storage_container_policy_list_command_builder(commandPath, resultDataTypeName, containerName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        return _this;
    }
    /** The container name. */
    az_storage_container_policy_list_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_policy_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_policy_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_policy_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_policy_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The container lease ID. */
    az_storage_container_policy_list_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_container_policy_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_policy_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_policy_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_policy_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Show a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage container policy show --container-name
 *                                  --name
 *                                  [--account-key]
 *                                  [--account-name]
 *                                  [--auth-mode {key, login}]
 *                                  [--connection-string]
 *                                  [--lease-id]
 *                                  [--query-examples]
 *                                  [--sas-token]
 *                                  [--subscription]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The stored access policy name.
 */
var az_storage_container_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_policy_show_command_builder, _super);
    function az_storage_container_policy_show_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_policy_show_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The stored access policy name. */
    az_storage_container_policy_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_policy_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_policy_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_policy_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The container lease ID. */
    az_storage_container_policy_show_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_container_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_policy_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Set a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage container policy update --container-name
 *                                    --name
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--auth-mode {key, login}]
 *                                    [--connection-string]
 *                                    [--expiry]
 *                                    [--lease-id]
 *                                    [--permissions]
 *                                    [--sas-token]
 *                                    [--start]
 *                                    [--subscription]
 * ```
 *
 * @param {string} containerName The container name.
 * @param {string} name The stored access policy name.
 */
var az_storage_container_policy_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_policy_update_command_builder, _super);
    function az_storage_container_policy_update_command_builder(commandPath, resultDataTypeName, containerName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.containerName(containerName);
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_policy_update_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** The stored access policy name. */
    az_storage_container_policy_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_policy_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_policy_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_policy_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_policy_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_container_policy_update_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** The container lease ID. */
    az_storage_container_policy_update_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Allowed values: (a)dd (c)reate (d)elete (l)ist (r)ead (w)rite. Can be combined. */
    az_storage_container_policy_update_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_policy_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_container_policy_update_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_policy_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_policy_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a container in a storage account.
 *
 * Syntax:
 * ```
 * az storage container create --name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--connection-string]
 *                             [--default-encryption-scope]
 *                             [--fail-on-exist]
 *                             [--metadata]
 *                             [--prevent-encryption-scope-override {false, true}]
 *                             [--public-access {blob, container, off}]
 *                             [--resource-group]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_create_command_builder, _super);
    function az_storage_container_create_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. */
    az_storage_container_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_create_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Default the container to use specified encryption scope for all writes. */
    az_storage_container_create_command_builder.prototype.defaultEncryptionScope = function (value) {
        this.setFlag("--default-encryption-scope", value);
        return this;
    };
    /** Throw an exception if the container already exists. */
    az_storage_container_create_command_builder.prototype.failOnExist = function (value) {
        this.setFlag("--fail-on-exist", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_container_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Block override of encryption scope from the container default. */
    az_storage_container_create_command_builder.prototype.preventEncryptionScopeOverride = function (value) {
        this.setFlag("--prevent-encryption-scope-override", value.toString());
        return this;
    };
    /** Specifies whether data in the container may be accessed publicly. */
    az_storage_container_create_command_builder.prototype.publicAccess = function (value) {
        this.setFlag("--public-access", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_container_create_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Marks the specified container for deletion.
 *
 * Syntax:
 * ```
 * az storage container delete --name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--bypass-immutability-policy]
 *                             [--connection-string]
 *                             [--fail-not-exist]
 *                             [--if-modified-since]
 *                             [--if-unmodified-since]
 *                             [--lease-id]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_delete_command_builder, _super);
    function az_storage_container_delete_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Bypasses upcoming service behavior that will block a container from being deleted if it has a immutability-policy. Specifying this will ignore arguments aside from those used to identify the container ("--name", "--account-name"). */
    az_storage_container_delete_command_builder.prototype.bypassImmutabilityPolicy = function (value) {
        this.setFlag("--bypass-immutability-policy", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Throw an exception if the container does not exist. */
    az_storage_container_delete_command_builder.prototype.failNotExist = function (value) {
        this.setFlag("--fail-not-exist", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_delete_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_delete_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** If specified, delete_container only succeeds if the container's lease is active and matches this ID. Required if the container has an active lease. */
    az_storage_container_delete_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a storage container.
 *
 * Syntax:
 * ```
 * az storage container exists --name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--connection-string]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_exists_command_builder, _super);
    function az_storage_container_exists_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_exists_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * Generate a SAS token for a storage container.
 *
 * Syntax:
 * ```
 * az storage container generate-sas --name
 *                                   [--account-key]
 *                                   [--account-name]
 *                                   [--as-user]
 *                                   [--auth-mode {key, login}]
 *                                   [--cache-control]
 *                                   [--connection-string]
 *                                   [--content-disposition]
 *                                   [--content-encoding]
 *                                   [--content-language]
 *                                   [--content-type]
 *                                   [--expiry]
 *                                   [--https-only]
 *                                   [--ip]
 *                                   [--permissions]
 *                                   [--policy-name]
 *                                   [--start]
 *                                   [--subscription]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_generate_sas_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_generate_sas_command_builder, _super);
    function az_storage_container_generate_sas_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_generate_sas_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_generate_sas_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_generate_sas_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Indicates that this command return the SAS signed with the user delegation key. The expiry parameter and '--auth-mode login' are required if this argument is specified. */
    az_storage_container_generate_sas_command_builder.prototype.asUser = function (value) {
        this.setFlag("--as-user", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_generate_sas_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Response header value for Cache-Control when resource is accessedusing this shared access signature. */
    az_storage_container_generate_sas_command_builder.prototype.cacheControl = function (value) {
        this.setFlag("--cache-control", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_generate_sas_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Response header value for Content-Disposition when resource is accessedusing this shared access signature. */
    az_storage_container_generate_sas_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** Response header value for Content-Encoding when resource is accessedusing this shared access signature. */
    az_storage_container_generate_sas_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** Response header value for Content-Language when resource is accessedusing this shared access signature. */
    az_storage_container_generate_sas_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** Response header value for Content-Type when resource is accessedusing this shared access signature. */
    az_storage_container_generate_sas_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value. */
    az_storage_container_generate_sas_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted. */
    az_storage_container_generate_sas_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value);
        return this;
    };
    /** Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses. */
    az_storage_container_generate_sas_command_builder.prototype.ip = function (value) {
        this.setFlag("--ip", value);
        return this;
    };
    /** The permissions the SAS grants. Allowed values: (a)dd (c)reate (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined. */
    az_storage_container_generate_sas_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** The name of a stored access policy within the container's ACL. */
    az_storage_container_generate_sas_command_builder.prototype.policyName = function (value) {
        this.setFlag("--policy-name", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request. */
    az_storage_container_generate_sas_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_generate_sas_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_container_generate_sas_command_builder;
}(base_1.CommandBuilder));
/**
 * List containers in a storage account.
 *
 * Syntax:
 * ```
 * az storage container list [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--include-metadata]
 *                           [--marker]
 *                           [--num-results]
 *                           [--prefix]
 *                           [--query-examples]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 */
var az_storage_container_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_list_command_builder, _super);
    function az_storage_container_list_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specifies that container metadata be returned in the response. */
    az_storage_container_list_command_builder.prototype.includeMetadata = function (value) {
        this.setFlag("--include-metadata", value);
        return this;
    };
    /** An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped. */
    az_storage_container_list_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** Specify the maximum number to return. If the request does not specify num_results, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remaining of the results. Provide "\*" to return all. */
    az_storage_container_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** Filters the results to return only containers whose names begin with the specified prefix. */
    az_storage_container_list_command_builder.prototype.prefix = function (value) {
        this.setFlag("--prefix", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_container_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets the permissions for the specified container or stored access  policies that may be used with Shared Access Signatures.
 *
 * Syntax:
 * ```
 * az storage container set-permission --name
 *                                     [--account-key]
 *                                     [--account-name]
 *                                     [--auth-mode {key, login}]
 *                                     [--connection-string]
 *                                     [--if-modified-since]
 *                                     [--if-unmodified-since]
 *                                     [--lease-id]
 *                                     [--public-access {blob, container, off}]
 *                                     [--sas-token]
 *                                     [--subscription]
 *                                     [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_set_permission_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_set_permission_command_builder, _super);
    function az_storage_container_set_permission_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_set_permission_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_set_permission_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_set_permission_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_set_permission_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_set_permission_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_set_permission_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_container_set_permission_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** If specified, set_container_acl only succeeds if the container's lease is active and matches this ID. */
    az_storage_container_set_permission_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Specifies whether data in the container may be accessed publicly. */
    az_storage_container_set_permission_command_builder.prototype.publicAccess = function (value) {
        this.setFlag("--public-access", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_set_permission_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_set_permission_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_set_permission_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_set_permission_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata and system properties for the specified container.
 *
 * Syntax:
 * ```
 * az storage container show --name
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--lease-id]
 *                           [--query-examples]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_show_command_builder, _super);
    function az_storage_container_show_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** If specified, get_container_properties only succeeds if the container's lease is active and matches this ID. */
    az_storage_container_show_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_container_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Gets the permissions for the specified container.
 *
 * Syntax:
 * ```
 * az storage container show-permission --name
 *                                      [--account-key]
 *                                      [--account-name]
 *                                      [--auth-mode {key, login}]
 *                                      [--connection-string]
 *                                      [--lease-id]
 *                                      [--sas-token]
 *                                      [--subscription]
 *                                      [--timeout]
 * ```
 *
 * @param {string} name The container name.
 */
var az_storage_container_show_permission_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_container_show_permission_command_builder, _super);
    function az_storage_container_show_permission_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The container name. */
    az_storage_container_show_permission_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_container_show_permission_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_container_show_permission_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_container_show_permission_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_container_show_permission_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** If specified, get_container_acl only succeeds if the container's lease is active and matches this ID. */
    az_storage_container_show_permission_command_builder.prototype.leaseId = function (value) {
        this.setFlag("--lease-id", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_container_show_permission_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_container_show_permission_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_container_show_permission_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_container_show_permission_command_builder;
}(base_1.CommandBuilder));
/**
 * Add a CORS rule to a storage account.
 *
 * Syntax:
 * ```
 * az storage cors add --methods {DELETE, GET, HEAD, MERGE, OPTIONS, POST, PUT}
 *                     --origins
 *                     --services
 *                     [--account-key]
 *                     [--account-name]
 *                     [--allowed-headers]
 *                     [--connection-string]
 *                     [--exposed-headers]
 *                     [--max-age]
 *                     [--sas-token]
 *                     [--subscription]
 *                     [--timeout]
 * ```
 *
 * @param {'DELETE' | 'GET' | 'HEAD' | 'MERGE' | 'OPTIONS' | 'POST' | 'PUT'} methods Space-separated list of HTTP methods allowed to be executed by the origin.
 * @param {string} origins Space-separated list of origin domains that will be allowed via CORS, or '\*' to allow all domains.
 * @param {string} services The storage service(s) to add rules to. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.
 */
var az_storage_cors_add_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_cors_add_command_builder, _super);
    function az_storage_cors_add_command_builder(commandPath, resultDataTypeName, methods, origins, services) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.methods(methods);
        _this.origins(origins);
        _this.services(services);
        return _this;
    }
    /** Space-separated list of HTTP methods allowed to be executed by the origin. */
    az_storage_cors_add_command_builder.prototype.methods = function (value) {
        this.setFlag("--methods", value);
        return this;
    };
    /** Space-separated list of origin domains that will be allowed via CORS, or '\*' to allow all domains. */
    az_storage_cors_add_command_builder.prototype.origins = function (value) {
        this.setFlag("--origins", value);
        return this;
    };
    /** The storage service(s) to add rules to. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined. */
    az_storage_cors_add_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_cors_add_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_cors_add_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Space-separated list of response headers allowed to be part of the cross-origin request. */
    az_storage_cors_add_command_builder.prototype.allowedHeaders = function (value) {
        this.setFlag("--allowed-headers", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_cors_add_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Space-separated list of response headers to expose to CORS clients. */
    az_storage_cors_add_command_builder.prototype.exposedHeaders = function (value) {
        this.setFlag("--exposed-headers", value);
        return this;
    };
    /** The maximum number of seconds the client/browser should cache a preflight response. */
    az_storage_cors_add_command_builder.prototype.maxAge = function (value) {
        this.setFlag("--max-age", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_cors_add_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_cors_add_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_cors_add_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_cors_add_command_builder;
}(base_1.CommandBuilder));
/**
 * Remove all CORS rules from a storage account.
 *
 * Syntax:
 * ```
 * az storage cors clear --services
 *                       [--account-key]
 *                       [--account-name]
 *                       [--connection-string]
 *                       [--sas-token]
 *                       [--subscription]
 *                       [--timeout]
 * ```
 *
 * @param {string} services The storage service(s) to remove rules from. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined.
 */
var az_storage_cors_clear_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_cors_clear_command_builder, _super);
    function az_storage_cors_clear_command_builder(commandPath, resultDataTypeName, services) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.services(services);
        return _this;
    }
    /** The storage service(s) to remove rules from. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined. */
    az_storage_cors_clear_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_cors_clear_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_cors_clear_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_cors_clear_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_cors_clear_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_cors_clear_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_cors_clear_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_cors_clear_command_builder;
}(base_1.CommandBuilder));
/**
 * List all CORS rules for a storage account.
 *
 * Syntax:
 * ```
 * az storage cors list [--account-key]
 *                      [--account-name]
 *                      [--connection-string]
 *                      [--query-examples]
 *                      [--sas-token]
 *                      [--services]
 *                      [--subscription]
 *                      [--timeout]
 * ```
 */
var az_storage_cors_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_cors_list_command_builder, _super);
    function az_storage_cors_list_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_cors_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_cors_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_cors_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_cors_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_cors_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The storage service(s) to list rules for. Allowed options are: (b)lob, (f)ile, (q)ueue, (t)able. Can be combined. */
    az_storage_cors_list_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_cors_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_cors_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_cors_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata for the specified directory.
 *
 * Syntax:
 * ```
 * az storage directory metadata show --name
 *                                    --share-name
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--connection-string]
 *                                    [--query-examples]
 *                                    [--sas-token]
 *                                    [--snapshot]
 *                                    [--subscription]
 *                                    [--timeout]
 * ```
 *
 * @param {string} name The directory name.
 * @param {string} shareName The file share name.
 */
var az_storage_directory_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_directory_metadata_show_command_builder, _super);
    function az_storage_directory_metadata_show_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The directory name. */
    az_storage_directory_metadata_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_directory_metadata_show_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_directory_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_directory_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_directory_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_directory_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_directory_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_directory_metadata_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_directory_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_directory_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_directory_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets one or more user-defined name-value pairs for the specified directory.
 *
 * Syntax:
 * ```
 * az storage directory metadata update --name
 *                                      --share-name
 *                                      [--account-key]
 *                                      [--account-name]
 *                                      [--connection-string]
 *                                      [--metadata]
 *                                      [--sas-token]
 *                                      [--subscription]
 *                                      [--timeout]
 * ```
 *
 * @param {string} name The directory name.
 * @param {string} shareName The file share name.
 */
var az_storage_directory_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_directory_metadata_update_command_builder, _super);
    function az_storage_directory_metadata_update_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The directory name. */
    az_storage_directory_metadata_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_directory_metadata_update_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_directory_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_directory_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_directory_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_directory_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_directory_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_directory_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_directory_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_directory_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates a new directory under the specified share or parent directory.
 *
 * Syntax:
 * ```
 * az storage directory create --name
 *                             --share-name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--connection-string]
 *                             [--fail-on-exist]
 *                             [--metadata]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} name The directory name.
 * @param {string} shareName The file share name.
 */
var az_storage_directory_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_directory_create_command_builder, _super);
    function az_storage_directory_create_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The directory name. */
    az_storage_directory_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_directory_create_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_directory_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_directory_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_directory_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specify whether to throw an exception when the directory exists. False by default. */
    az_storage_directory_create_command_builder.prototype.failOnExist = function (value) {
        this.setFlag("--fail-on-exist", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_directory_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_directory_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_directory_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_directory_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_directory_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Deletes the specified empty directory.
 *
 * Syntax:
 * ```
 * az storage directory delete --name
 *                             --share-name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--connection-string]
 *                             [--fail-not-exist]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} name The directory name.
 * @param {string} shareName The file share name.
 */
var az_storage_directory_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_directory_delete_command_builder, _super);
    function az_storage_directory_delete_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The directory name. */
    az_storage_directory_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_directory_delete_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_directory_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_directory_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_directory_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specify whether to throw an exception when the directory doesn't exist. */
    az_storage_directory_delete_command_builder.prototype.failNotExist = function (value) {
        this.setFlag("--fail-not-exist", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_directory_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_directory_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_directory_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_directory_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a storage directory.
 *
 * Syntax:
 * ```
 * az storage directory exists --name
 *                             --share-name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--connection-string]
 *                             [--sas-token]
 *                             [--snapshot]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} name The directory name.
 * @param {string} shareName The file share name.
 */
var az_storage_directory_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_directory_exists_command_builder, _super);
    function az_storage_directory_exists_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The directory name. */
    az_storage_directory_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_directory_exists_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_directory_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_directory_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_directory_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_directory_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_directory_exists_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_directory_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_directory_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_directory_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * List directories in a share.
 *
 * Syntax:
 * ```
 * az storage directory list --share-name
 *                           [--account-key]
 *                           [--account-name]
 *                           [--connection-string]
 *                           [--name]
 *                           [--query-examples]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} shareName The file share name.
 */
var az_storage_directory_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_directory_list_command_builder, _super);
    function az_storage_directory_list_command_builder(commandPath, resultDataTypeName, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.shareName(shareName);
        return _this;
    }
    /** The file share name. */
    az_storage_directory_list_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_directory_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_directory_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_directory_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The directory name. */
    az_storage_directory_list_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_directory_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_directory_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_directory_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_directory_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_directory_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata and system properties for the specified directory.
 *
 * Syntax:
 * ```
 * az storage directory show --name
 *                           --share-name
 *                           [--account-key]
 *                           [--account-name]
 *                           [--connection-string]
 *                           [--query-examples]
 *                           [--sas-token]
 *                           [--snapshot]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} name The directory name.
 * @param {string} shareName The file share name.
 */
var az_storage_directory_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_directory_show_command_builder, _super);
    function az_storage_directory_show_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The directory name. */
    az_storage_directory_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_directory_show_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_directory_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_directory_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_directory_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_directory_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_directory_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_directory_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_directory_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_directory_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_directory_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Deletes an existing entity in a table.
 *
 * Syntax:
 * ```
 * az storage entity delete --partition-key
 *                          --row-key
 *                          --table-name
 *                          [--account-key]
 *                          [--account-name]
 *                          [--connection-string]
 *                          [--if-match]
 *                          [--sas-token]
 *                          [--subscription]
 *                          [--timeout]
 * ```
 *
 * @param {string} partitionKey The PartitionKey of the entity.
 * @param {string} rowKey The RowKey of the entity.
 * @param {string} tableName The name of the table containing the entity to delete.
 */
var az_storage_entity_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_entity_delete_command_builder, _super);
    function az_storage_entity_delete_command_builder(commandPath, resultDataTypeName, partitionKey, rowKey, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.partitionKey(partitionKey);
        _this.rowKey(rowKey);
        _this.tableName(tableName);
        return _this;
    }
    /** The PartitionKey of the entity. */
    az_storage_entity_delete_command_builder.prototype.partitionKey = function (value) {
        this.setFlag("--partition-key", value);
        return this;
    };
    /** The RowKey of the entity. */
    az_storage_entity_delete_command_builder.prototype.rowKey = function (value) {
        this.setFlag("--row-key", value);
        return this;
    };
    /** The name of the table containing the entity to delete. */
    az_storage_entity_delete_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_entity_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_entity_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_entity_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The delete operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard character (\*). */
    az_storage_entity_delete_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_entity_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_entity_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_entity_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_entity_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Insert an entity into a table.
 *
 * Syntax:
 * ```
 * az storage entity insert --entity
 *                          --table-name
 *                          [--account-key]
 *                          [--account-name]
 *                          [--connection-string]
 *                          [--if-exists {fail, merge, replace}]
 *                          [--sas-token]
 *                          [--subscription]
 *                          [--timeout]
 * ```
 *
 * @param {string} entity Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey.
 * @param {string} tableName The name of the table to insert the entity into.
 */
var az_storage_entity_insert_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_entity_insert_command_builder, _super);
    function az_storage_entity_insert_command_builder(commandPath, resultDataTypeName, entity, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.entity(entity);
        _this.tableName(tableName);
        return _this;
    }
    /** Space-separated list of key=value pairs. Must contain a PartitionKey and a RowKey. */
    az_storage_entity_insert_command_builder.prototype.entity = function (value) {
        this.setFlag("--entity", value);
        return this;
    };
    /** The name of the table to insert the entity into. */
    az_storage_entity_insert_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_entity_insert_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_entity_insert_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_entity_insert_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Behavior when an entity already exists for the specified PartitionKey and RowKey. */
    az_storage_entity_insert_command_builder.prototype.ifExists = function (value) {
        this.setFlag("--if-exists", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_entity_insert_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_entity_insert_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** The server timeout, expressed in seconds. */
    az_storage_entity_insert_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_entity_insert_command_builder;
}(base_1.CommandBuilder));
/**
 * Updates an existing entity by merging the entity's properties.
 *
 * Syntax:
 * ```
 * az storage entity merge --entity
 *                         --table-name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--if-match]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} entity The entity to merge. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.
 * @param {string} tableName The name of the table containing the entity to merge.
 */
var az_storage_entity_merge_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_entity_merge_command_builder, _super);
    function az_storage_entity_merge_command_builder(commandPath, resultDataTypeName, entity, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.entity(entity);
        _this.tableName(tableName);
        return _this;
    }
    /** The entity to merge. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey. */
    az_storage_entity_merge_command_builder.prototype.entity = function (value) {
        this.setFlag("--entity", value);
        return this;
    };
    /** The name of the table containing the entity to merge. */
    az_storage_entity_merge_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_entity_merge_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_entity_merge_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_entity_merge_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The merge operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional merge, set If-Match to the wildcard character (\*). */
    az_storage_entity_merge_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_entity_merge_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_entity_merge_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_entity_merge_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_entity_merge_command_builder;
}(base_1.CommandBuilder));
/**
 * List entities which satisfy a query.
 *
 * Syntax:
 * ```
 * az storage entity query --table-name
 *                         [--accept {full, minimal, none}]
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--filter]
 *                         [--marker]
 *                         [--num-results]
 *                         [--sas-token]
 *                         [--select]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} tableName The name of the table to query.
 */
var az_storage_entity_query_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_entity_query_command_builder, _super);
    function az_storage_entity_query_command_builder(commandPath, resultDataTypeName, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.tableName(tableName);
        return _this;
    }
    /** The name of the table to query. */
    az_storage_entity_query_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Specifies how much metadata to include in the response payload. */
    az_storage_entity_query_command_builder.prototype.accept = function (value) {
        this.setFlag("--accept", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_entity_query_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_entity_query_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_entity_query_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Returns only entities that satisfy the specified filter. Note that no more than 15 discrete comparisons are permitted within a $filter string. See <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx</a> for more information on constructing filters. */
    az_storage_entity_query_command_builder.prototype.filter = function (value) {
        this.setFlag("--filter", value);
        return this;
    };
    /** Space-separated list of key=value pairs. Must contain a nextpartitionkey and a nextrowkey. */
    az_storage_entity_query_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** The maximum number of entities to return. */
    az_storage_entity_query_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_entity_query_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Space-separated list of properties to return for each entity. */
    az_storage_entity_query_command_builder.prototype.select = function (value) {
        this.setFlag("--select", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_entity_query_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_entity_query_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_entity_query_command_builder;
}(base_1.CommandBuilder));
/**
 * Updates an existing entity in a table.
 *
 * Syntax:
 * ```
 * az storage entity replace --entity
 *                           --table-name
 *                           [--account-key]
 *                           [--account-name]
 *                           [--connection-string]
 *                           [--if-match]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} entity The entity to update. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey.
 * @param {string} tableName The name of the table containing the entity to update.
 */
var az_storage_entity_replace_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_entity_replace_command_builder, _super);
    function az_storage_entity_replace_command_builder(commandPath, resultDataTypeName, entity, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.entity(entity);
        _this.tableName(tableName);
        return _this;
    }
    /** The entity to update. Could be a dict or an entity object. Must contain a PartitionKey and a RowKey. */
    az_storage_entity_replace_command_builder.prototype.entity = function (value) {
        this.setFlag("--entity", value);
        return this;
    };
    /** The name of the table containing the entity to update. */
    az_storage_entity_replace_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_entity_replace_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_entity_replace_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_entity_replace_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The client may specify the ETag for the entity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The update operation will be performed only if the ETag sent by the client matches the value maintained by the server, indicating that the entity has not been modified since it was retrieved by the client. To force an unconditional update, set If-Match to the wildcard character (\*). */
    az_storage_entity_replace_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_entity_replace_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_entity_replace_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_entity_replace_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_entity_replace_command_builder;
}(base_1.CommandBuilder));
/**
 * Get an entity from the specified table.
 *
 * Syntax:
 * ```
 * az storage entity show --partition-key
 *                        --row-key
 *                        --table-name
 *                        [--accept]
 *                        [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--query-examples]
 *                        [--sas-token]
 *                        [--select]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} partitionKey The PartitionKey of the entity.
 * @param {string} rowKey The RowKey of the entity.
 * @param {string} tableName The name of the table to get the entity from.
 */
var az_storage_entity_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_entity_show_command_builder, _super);
    function az_storage_entity_show_command_builder(commandPath, resultDataTypeName, partitionKey, rowKey, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.partitionKey(partitionKey);
        _this.rowKey(rowKey);
        _this.tableName(tableName);
        return _this;
    }
    /** The PartitionKey of the entity. */
    az_storage_entity_show_command_builder.prototype.partitionKey = function (value) {
        this.setFlag("--partition-key", value);
        return this;
    };
    /** The RowKey of the entity. */
    az_storage_entity_show_command_builder.prototype.rowKey = function (value) {
        this.setFlag("--row-key", value);
        return this;
    };
    /** The name of the table to get the entity from. */
    az_storage_entity_show_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Specifies the accepted content type of the response payload. See TablePayloadFormat for possible values. */
    az_storage_entity_show_command_builder.prototype.accept = function (value) {
        this.setFlag("--accept", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_entity_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_entity_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_entity_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_entity_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_entity_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Space-separated list of properties to return for each entity. */
    az_storage_entity_show_command_builder.prototype.select = function (value) {
        this.setFlag("--select", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_entity_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_entity_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_entity_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Aborts a pending copy_file operation, and leaves a destination file  with zero length and full metadata.
 *
 * Syntax:
 * ```
 * az storage file copy cancel --copy-id
 *                             --destination-path
 *                             --destination-share
 *                             [--account-key]
 *                             [--account-name]
 *                             [--connection-string]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} copyId Copy identifier provided in the copy.id of the original copy_file operation.
 * @param {string} destinationPath The path to the file within the file share.
 * @param {string} destinationShare Name of the destination share. The share must exist.
 */
var az_storage_file_copy_cancel_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_copy_cancel_command_builder, _super);
    function az_storage_file_copy_cancel_command_builder(commandPath, resultDataTypeName, copyId, destinationPath, destinationShare) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.copyId(copyId);
        _this.destinationPath(destinationPath);
        _this.destinationShare(destinationShare);
        return _this;
    }
    /** Copy identifier provided in the copy.id of the original copy_file operation. */
    az_storage_file_copy_cancel_command_builder.prototype.copyId = function (value) {
        this.setFlag("--copy-id", value);
        return this;
    };
    /** The path to the file within the file share. */
    az_storage_file_copy_cancel_command_builder.prototype.destinationPath = function (value) {
        this.setFlag("--destination-path", value);
        return this;
    };
    /** Name of the destination share. The share must exist. */
    az_storage_file_copy_cancel_command_builder.prototype.destinationShare = function (value) {
        this.setFlag("--destination-share", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_copy_cancel_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_copy_cancel_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_copy_cancel_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_copy_cancel_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_copy_cancel_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_copy_cancel_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_copy_cancel_command_builder;
}(base_1.CommandBuilder));
/**
 * Copy a file asynchronously.
 *
 * Syntax:
 * ```
 * az storage file copy start --destination-path
 *                            --destination-share
 *                            [--account-key]
 *                            [--account-name]
 *                            [--connection-string]
 *                            [--file-snapshot]
 *                            [--metadata]
 *                            [--sas-token]
 *                            [--source-account-key]
 *                            [--source-account-name]
 *                            [--source-blob]
 *                            [--source-container]
 *                            [--source-path]
 *                            [--source-sas]
 *                            [--source-share]
 *                            [--source-snapshot]
 *                            [--source-uri]
 *                            [--subscription]
 *                            [--timeout]
 * ```
 *
 * @param {string} destinationPath The path to the file within the file share.
 * @param {string} destinationShare Name of the destination share. The share must exist.
 */
var az_storage_file_copy_start_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_copy_start_command_builder, _super);
    function az_storage_file_copy_start_command_builder(commandPath, resultDataTypeName, destinationPath, destinationShare) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.destinationPath(destinationPath);
        _this.destinationShare(destinationShare);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_copy_start_command_builder.prototype.destinationPath = function (value) {
        this.setFlag("--destination-path", value);
        return this;
    };
    /** Name of the destination share. The share must exist. */
    az_storage_file_copy_start_command_builder.prototype.destinationShare = function (value) {
        this.setFlag("--destination-share", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_copy_start_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_copy_start_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_copy_start_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The file snapshot for the source storage account. */
    az_storage_file_copy_start_command_builder.prototype.fileSnapshot = function (value) {
        this.setFlag("--file-snapshot", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_file_copy_start_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_copy_start_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The storage account key of the source blob. */
    az_storage_file_copy_start_command_builder.prototype.sourceAccountKey = function (value) {
        this.setFlag("--source-account-key", value);
        return this;
    };
    /** The storage account name of the source blob. */
    az_storage_file_copy_start_command_builder.prototype.sourceAccountName = function (value) {
        this.setFlag("--source-account-name", value);
        return this;
    };
    /** The blob name for the source storage account. */
    az_storage_file_copy_start_command_builder.prototype.sourceBlob = function (value) {
        this.setFlag("--source-blob", value);
        return this;
    };
    /** The container name for the source storage account. */
    az_storage_file_copy_start_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** The file path for the source storage account. */
    az_storage_file_copy_start_command_builder.prototype.sourcePath = function (value) {
        this.setFlag("--source-path", value);
        return this;
    };
    /** The shared access signature for the source storage account. */
    az_storage_file_copy_start_command_builder.prototype.sourceSas = function (value) {
        this.setFlag("--source-sas", value);
        return this;
    };
    /** The share name for the source storage account. */
    az_storage_file_copy_start_command_builder.prototype.sourceShare = function (value) {
        this.setFlag("--source-share", value);
        return this;
    };
    /** The blob snapshot for the source storage account. */
    az_storage_file_copy_start_command_builder.prototype.sourceSnapshot = function (value) {
        this.setFlag("--source-snapshot", value);
        return this;
    };
    /** A URL of up to 2 KB in length that specifies an Azure file or blob. The value should be URL-encoded as it would appear in a request URI. If the source is in another account, the source must either be public or must be authenticated via a shared access signature. If the source is public, no authentication is required. Examples: <a href="https://myaccount.file.core.windows.net/myshare/mydir/myfile">https://myaccount.file.core.windows.net/myshare/mydir/myfile</a> <a href="https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken">https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken</a>. */
    az_storage_file_copy_start_command_builder.prototype.sourceUri = function (value) {
        this.setFlag("--source-uri", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_copy_start_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_copy_start_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_copy_start_command_builder;
}(base_1.CommandBuilder));
/**
 * Copy multiple files or blobs to a file share.
 *
 * Syntax:
 * ```
 * az storage file copy start-batch [--account-key]
 *                                  [--account-name]
 *                                  [--connection-string]
 *                                  [--destination-path]
 *                                  [--destination-share]
 *                                  [--dryrun]
 *                                  [--metadata]
 *                                  [--pattern]
 *                                  [--sas-token]
 *                                  [--source-account-key]
 *                                  [--source-account-name]
 *                                  [--source-container]
 *                                  [--source-sas]
 *                                  [--source-share]
 *                                  [--source-uri]
 *                                  [--subscription]
 *                                  [--timeout]
 * ```
 */
var az_storage_file_copy_start_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_copy_start_batch_command_builder, _super);
    function az_storage_file_copy_start_batch_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_copy_start_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_copy_start_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_copy_start_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The directory where the source data is copied to. If omitted, data is copied to the root directory. */
    az_storage_file_copy_start_batch_command_builder.prototype.destinationPath = function (value) {
        this.setFlag("--destination-path", value);
        return this;
    };
    /** The file share where the source data is copied to. */
    az_storage_file_copy_start_batch_command_builder.prototype.destinationShare = function (value) {
        this.setFlag("--destination-share", value);
        return this;
    };
    /** List the files and blobs to be copied. No actual data transfer will occur. */
    az_storage_file_copy_start_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_file_copy_start_batch_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** The pattern used for globbing files and blobs. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_file_copy_start_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_copy_start_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The account key for the source storage account. If omitted, the active login is used to determine the account key. */
    az_storage_file_copy_start_batch_command_builder.prototype.sourceAccountKey = function (value) {
        this.setFlag("--source-account-key", value);
        return this;
    };
    /** The source storage account to copy the data from. If omitted, the destination account is used. */
    az_storage_file_copy_start_batch_command_builder.prototype.sourceAccountName = function (value) {
        this.setFlag("--source-account-name", value);
        return this;
    };
    /** The source container blobs are copied from. */
    az_storage_file_copy_start_batch_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** The shared access signature for the source storage account. */
    az_storage_file_copy_start_batch_command_builder.prototype.sourceSas = function (value) {
        this.setFlag("--source-sas", value);
        return this;
    };
    /** The source share files are copied from. */
    az_storage_file_copy_start_batch_command_builder.prototype.sourceShare = function (value) {
        this.setFlag("--source-share", value);
        return this;
    };
    /** A URI that specifies a the source file share or blob container. */
    az_storage_file_copy_start_batch_command_builder.prototype.sourceUri = function (value) {
        this.setFlag("--source-uri", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_copy_start_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_copy_start_batch_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_copy_start_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata for the specified file.
 *
 * Syntax:
 * ```
 * az storage file metadata show --path
 *                               --share-name
 *                               [--account-key]
 *                               [--account-name]
 *                               [--connection-string]
 *                               [--query-examples]
 *                               [--sas-token]
 *                               [--snapshot]
 *                               [--subscription]
 *                               [--timeout]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_metadata_show_command_builder, _super);
    function az_storage_file_metadata_show_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_metadata_show_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_metadata_show_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_file_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_file_metadata_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets user-defined metadata for the specified file as one or more name-value pairs.
 *
 * Syntax:
 * ```
 * az storage file metadata update --path
 *                                 --share-name
 *                                 [--account-key]
 *                                 [--account-name]
 *                                 [--connection-string]
 *                                 [--metadata]
 *                                 [--sas-token]
 *                                 [--subscription]
 *                                 [--timeout]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_metadata_update_command_builder, _super);
    function az_storage_file_metadata_update_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_metadata_update_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_metadata_update_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_file_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Marks the specified file for deletion.
 *
 * Syntax:
 * ```
 * az storage file delete --path
 *                        --share-name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_delete_command_builder, _super);
    function az_storage_file_delete_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_delete_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_delete_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete files from an Azure Storage File Share.
 *
 * Syntax:
 * ```
 * az storage file delete-batch --source
 *                              [--account-key]
 *                              [--account-name]
 *                              [--connection-string]
 *                              [--dryrun]
 *                              [--pattern]
 *                              [--sas-token]
 *                              [--subscription]
 *                              [--timeout]
 * ```
 *
 * @param {string} source The source of the file delete operation. The source can be the file share URL or the share name.
 */
var az_storage_file_delete_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_delete_batch_command_builder, _super);
    function az_storage_file_delete_batch_command_builder(commandPath, resultDataTypeName, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.source(source);
        return _this;
    }
    /** The source of the file delete operation. The source can be the file share URL or the share name. */
    az_storage_file_delete_batch_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_delete_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_delete_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_delete_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** List the files and blobs to be deleted. No actual data deletion will occur. */
    az_storage_file_delete_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** The pattern used for file globbing. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_file_delete_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_delete_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_delete_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_delete_batch_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_delete_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Downloads a file to a file path, with automatic chunking and progress notifications.
 *
 * Syntax:
 * ```
 * az storage file download --path
 *                          --share-name
 *                          [--account-key]
 *                          [--account-name]
 *                          [--connection-string]
 *                          [--dest]
 *                          [--end-range]
 *                          [--max-connections]
 *                          [--no-progress]
 *                          [--open-mode]
 *                          [--sas-token]
 *                          [--snapshot]
 *                          [--start-range]
 *                          [--subscription]
 *                          [--timeout]
 *                          [--validate-content]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_download_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_download_command_builder, _super);
    function az_storage_file_download_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_download_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_download_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_download_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_download_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_download_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Path of the file to write to. The source filename will be used if not specified. */
    az_storage_file_download_command_builder.prototype.dest = function (value) {
        this.setFlag("--dest", value);
        return this;
    };
    /** End of byte range to use for downloading a section of the file. If end_range is given, start_range must be provided. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file. */
    az_storage_file_download_command_builder.prototype.endRange = function (value) {
        this.setFlag("--end-range", value);
        return this;
    };
    /** If set to 2 or greater, an initial get will be done for the first self.MAX_SINGLE_GET_SIZE bytes of the file. If this is the entire file, the method returns at this point. If it is not, it will download the remaining data parallel using the number of threads equal to max_connections. Each chunk will be of size self.MAX_CHUNK_GET_SIZE. If set to 1, a single large get request will be done. This is not generally recommended but available if very few threads should be used, network requests are very expensive, or a non-seekable stream prevents parallel download. This may also be valuable if the file is being concurrently modified to enforce atomicity or if many files are expected to be empty as an extra request is required for empty files if max_connections is greater than 1. */
    az_storage_file_download_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_file_download_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** Mode to use when opening the file. Note that specifying append only open_mode prevents parallel download. So, max_connections must be set to 1 if this open_mode is used. */
    az_storage_file_download_command_builder.prototype.openMode = function (value) {
        this.setFlag("--open-mode", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_download_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_file_download_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Start of byte range to use for downloading a section of the file. If no end_range is given, all bytes after the start_range will be downloaded. The start_range and end_range params are inclusive. Ex: start_range=0, end_range=511 will download first 512 bytes of file. */
    az_storage_file_download_command_builder.prototype.startRange = function (value) {
        this.setFlag("--start-range", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_download_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_download_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** If set to true, validates an MD5 hash for each retrieved portion of the file. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that the service will only return transactional MD5s for chunks 4MB or less so the first get request will be of size self.MAX_CHUNK_GET_SIZE instead of self.MAX_SINGLE_GET_SIZE. If self.MAX_CHUNK_GET_SIZE was set to greater than 4MB an error will be thrown. As computing the MD5 takes processing time and more requests will need to be done due to the reduced chunk size there may be some increase in latency. */
    az_storage_file_download_command_builder.prototype.validateContent = function (value) {
        this.setFlag("--validate-content", value);
        return this;
    };
    return az_storage_file_download_command_builder;
}(base_1.CommandBuilder));
/**
 * Download files from an Azure Storage File Share to a local directory in a batch operation.
 *
 * Syntax:
 * ```
 * az storage file download-batch --destination
 *                                --source
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--dryrun]
 *                                [--max-connections]
 *                                [--no-progress]
 *                                [--pattern]
 *                                [--sas-token]
 *                                [--snapshot]
 *                                [--subscription]
 *                                [--validate-content]
 * ```
 *
 * @param {string} destination The local directory where the files are downloaded to. This directory must already exist.
 * @param {string} source The source of the file download operation. The source can be the file share URL or the share name.
 */
var az_storage_file_download_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_download_batch_command_builder, _super);
    function az_storage_file_download_batch_command_builder(commandPath, resultDataTypeName, destination, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.destination(destination);
        _this.source(source);
        return _this;
    }
    /** The local directory where the files are downloaded to. This directory must already exist. */
    az_storage_file_download_batch_command_builder.prototype.destination = function (value) {
        this.setFlag("--destination", value);
        return this;
    };
    /** The source of the file download operation. The source can be the file share URL or the share name. */
    az_storage_file_download_batch_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_download_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_download_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_download_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** List the files and blobs to be downloaded. No actual data transfer will occur. */
    az_storage_file_download_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** The maximum number of parallel connections to use. Default value is 1. */
    az_storage_file_download_batch_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_file_download_batch_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** The pattern used for file globbing. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_file_download_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_download_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_file_download_batch_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_download_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** If set, calculates an MD5 hash for each range of the file for validation. */
    az_storage_file_download_batch_command_builder.prototype.validateContent = function (value) {
        this.setFlag("--validate-content", value);
        return this;
    };
    return az_storage_file_download_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a file.
 *
 * Syntax:
 * ```
 * az storage file exists --path
 *                        --share-name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--snapshot]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_exists_command_builder, _super);
    function az_storage_file_exists_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_exists_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_exists_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_file_exists_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * Generates a shared access signature for the file.
 *
 * Syntax:
 * ```
 * az storage file generate-sas --path
 *                              --share-name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--cache-control]
 *                              [--connection-string]
 *                              [--content-disposition]
 *                              [--content-encoding]
 *                              [--content-language]
 *                              [--content-type]
 *                              [--expiry]
 *                              [--https-only]
 *                              [--ip]
 *                              [--permissions]
 *                              [--policy-name]
 *                              [--start]
 *                              [--subscription]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_generate_sas_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_generate_sas_command_builder, _super);
    function az_storage_file_generate_sas_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_generate_sas_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_generate_sas_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_generate_sas_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_generate_sas_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Response header value for Cache-Control when resource is accessed using this shared access signature. */
    az_storage_file_generate_sas_command_builder.prototype.cacheControl = function (value) {
        this.setFlag("--cache-control", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_generate_sas_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Response header value for Content-Disposition when resource is accessed using this shared access signature. */
    az_storage_file_generate_sas_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** Response header value for Content-Encoding when resource is accessed using this shared access signature. */
    az_storage_file_generate_sas_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** Response header value for Content-Language when resource is accessed using this shared access signature. */
    az_storage_file_generate_sas_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** Response header value for Content-Type when resource is accessed using this shared access signature. */
    az_storage_file_generate_sas_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value. */
    az_storage_file_generate_sas_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted. */
    az_storage_file_generate_sas_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value);
        return this;
    };
    /** Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses. */
    az_storage_file_generate_sas_command_builder.prototype.ip = function (value) {
        this.setFlag("--ip", value);
        return this;
    };
    /** The permissions the SAS grants. Allowed values: (c)reate (d)elete (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined. */
    az_storage_file_generate_sas_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** The name of a stored access policy within the container's ACL. */
    az_storage_file_generate_sas_command_builder.prototype.policyName = function (value) {
        this.setFlag("--policy-name", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request. */
    az_storage_file_generate_sas_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_generate_sas_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_file_generate_sas_command_builder;
}(base_1.CommandBuilder));
/**
 * List files and directories in a share.
 *
 * Syntax:
 * ```
 * az storage file list --share-name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--connection-string]
 *                      [--exclude-dir]
 *                      [--marker]
 *                      [--num-results]
 *                      [--path]
 *                      [--query-examples]
 *                      [--sas-token]
 *                      [--snapshot]
 *                      [--subscription]
 *                      [--timeout]
 * ```
 *
 * @param {string} shareName The file share name.
 */
var az_storage_file_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_list_command_builder, _super);
    function az_storage_file_list_command_builder(commandPath, resultDataTypeName, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.shareName(shareName);
        return _this;
    }
    /** The file share name. */
    az_storage_file_list_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** List only files in the given share. */
    az_storage_file_list_command_builder.prototype.excludeDir = function (value) {
        this.setFlag("--exclude-dir", value);
        return this;
    };
    /** An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped. */
    az_storage_file_list_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** Specify the maximum number to return. If the request does not specify num_results, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remaining of the results. Provide "\*" to return all. */
    az_storage_file_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** The directory path within the file share. */
    az_storage_file_list_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_file_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_file_list_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Resizes a file to the specified size.
 *
 * Syntax:
 * ```
 * az storage file resize --path
 *                        --share-name
 *                        --size
 *                        [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 * @param {string} size The length to resize the file to.
 */
var az_storage_file_resize_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_resize_command_builder, _super);
    function az_storage_file_resize_command_builder(commandPath, resultDataTypeName, path, shareName, size) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        _this.size(size);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_resize_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_resize_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** The length to resize the file to. */
    az_storage_file_resize_command_builder.prototype.size = function (value) {
        this.setFlag("--size", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_resize_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_resize_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_resize_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_resize_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_resize_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_resize_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_resize_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata, standard HTTP properties, and system properties for the file.
 *
 * Syntax:
 * ```
 * az storage file show --path
 *                      --share-name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--connection-string]
 *                      [--query-examples]
 *                      [--sas-token]
 *                      [--snapshot]
 *                      [--subscription]
 *                      [--timeout]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_show_command_builder, _super);
    function az_storage_file_show_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_show_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_show_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_file_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_file_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets system properties on the file.
 *
 * Syntax:
 * ```
 * az storage file update --path
 *                        --share-name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--clear-content-settings {false, true}]
 *                        [--connection-string]
 *                        [--content-cache-control]
 *                        [--content-disposition]
 *                        [--content-encoding]
 *                        [--content-language]
 *                        [--content-md5]
 *                        [--content-type]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_update_command_builder, _super);
    function az_storage_file_update_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_update_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_update_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** If this flag is set, then if any one or more of the following properties (--content-cache-control, --content-disposition, --content-encoding, --content-language, --content-md5, --content-type) is set, then all of these properties are set together. If a value is not provided for a given property when at least one of the properties listed below is set, then that property will be cleared. */
    az_storage_file_update_command_builder.prototype.clearContentSettings = function (value) {
        this.setFlag("--clear-content-settings", value.toString());
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_file_update_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_file_update_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_file_update_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_file_update_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_file_update_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_file_update_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_file_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Upload a file to a share that uses the SMB 3.0 protocol.
 *
 * Syntax:
 * ```
 * az storage file upload --share-name
 *                        --source
 *                        [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--content-cache-control]
 *                        [--content-disposition]
 *                        [--content-encoding]
 *                        [--content-language]
 *                        [--content-md5]
 *                        [--content-type]
 *                        [--max-connections]
 *                        [--metadata]
 *                        [--no-progress]
 *                        [--path]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 *                        [--validate-content]
 * ```
 *
 * @param {string} shareName The file share name.
 * @param {string} source Path of the local file to upload as the file content.
 */
var az_storage_file_upload_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_upload_command_builder, _super);
    function az_storage_file_upload_command_builder(commandPath, resultDataTypeName, shareName, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.shareName(shareName);
        _this.source(source);
        return _this;
    }
    /** The file share name. */
    az_storage_file_upload_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Path of the local file to upload as the file content. */
    az_storage_file_upload_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_upload_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_upload_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_upload_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_file_upload_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_file_upload_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_file_upload_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_file_upload_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_file_upload_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_file_upload_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** Maximum number of parallel connections to use. */
    az_storage_file_upload_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_file_upload_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_file_upload_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** The path to the file within the file share. If the file name is omitted, the source file name will be used. */
    az_storage_file_upload_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_upload_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_upload_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_file_upload_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file. */
    az_storage_file_upload_command_builder.prototype.validateContent = function (value) {
        this.setFlag("--validate-content", value);
        return this;
    };
    return az_storage_file_upload_command_builder;
}(base_1.CommandBuilder));
/**
 * Upload files from a local directory to an Azure Storage File Share in a batch operation.
 *
 * Syntax:
 * ```
 * az storage file upload-batch --destination
 *                              --source
 *                              [--account-key]
 *                              [--account-name]
 *                              [--connection-string]
 *                              [--content-cache-control]
 *                              [--content-disposition]
 *                              [--content-encoding]
 *                              [--content-language]
 *                              [--content-md5]
 *                              [--content-type]
 *                              [--destination-path]
 *                              [--dryrun]
 *                              [--max-connections]
 *                              [--metadata]
 *                              [--no-progress]
 *                              [--pattern]
 *                              [--sas-token]
 *                              [--subscription]
 *                              [--validate-content]
 * ```
 *
 * @param {string} destination The destination of the upload operation.
 * @param {string} source The directory to upload files from.
 */
var az_storage_file_upload_batch_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_upload_batch_command_builder, _super);
    function az_storage_file_upload_batch_command_builder(commandPath, resultDataTypeName, destination, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.destination(destination);
        _this.source(source);
        return _this;
    }
    /** The destination of the upload operation. */
    az_storage_file_upload_batch_command_builder.prototype.destination = function (value) {
        this.setFlag("--destination", value);
        return this;
    };
    /** The directory to upload files from. */
    az_storage_file_upload_batch_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_upload_batch_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_upload_batch_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_upload_batch_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_file_upload_batch_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_file_upload_batch_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_file_upload_batch_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_file_upload_batch_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_file_upload_batch_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_file_upload_batch_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** The directory where the source data is copied to. If omitted, data is copied to the root directory. */
    az_storage_file_upload_batch_command_builder.prototype.destinationPath = function (value) {
        this.setFlag("--destination-path", value);
        return this;
    };
    /** List the files and blobs to be uploaded. No actual data transfer will occur. */
    az_storage_file_upload_batch_command_builder.prototype.dryrun = function (value) {
        this.setFlag("--dryrun", value);
        return this;
    };
    /** The maximum number of parallel connections to use. Default value is 1. */
    az_storage_file_upload_batch_command_builder.prototype.maxConnections = function (value) {
        this.setFlag("--max-connections", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_file_upload_batch_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Include this flag to disable progress reporting for the command. */
    az_storage_file_upload_batch_command_builder.prototype.noProgress = function (value) {
        this.setFlag("--no-progress", value);
        return this;
    };
    /** The pattern used for file globbing. The supported patterns are '\*', '?', '[seq]', and '[!seq]'. For more information, please refer to <a href="https://docs.python.org/3.7/library/fnmatch.html">https://docs.python.org/3.7/library/fnmatch.html</a>. */
    az_storage_file_upload_batch_command_builder.prototype.pattern = function (value) {
        this.setFlag("--pattern", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_upload_batch_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_upload_batch_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** If set, calculates an MD5 hash for each range of the file for validation. */
    az_storage_file_upload_batch_command_builder.prototype.validateContent = function (value) {
        this.setFlag("--validate-content", value);
        return this;
    };
    return az_storage_file_upload_batch_command_builder;
}(base_1.CommandBuilder));
/**
 * Create the url to access a file.
 *
 * Syntax:
 * ```
 * az storage file url --path
 *                     --share-name
 *                     [--account-key]
 *                     [--account-name]
 *                     [--connection-string]
 *                     [--protocol {http, https}]
 *                     [--sas-token]
 *                     [--subscription]
 * ```
 *
 * @param {string} path The path to the file within the file share.
 * @param {string} shareName The file share name.
 */
var az_storage_file_url_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_file_url_command_builder, _super);
    function az_storage_file_url_command_builder(commandPath, resultDataTypeName, path, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.path(path);
        _this.shareName(shareName);
        return _this;
    }
    /** The path to the file within the file share. */
    az_storage_file_url_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** The file share name. */
    az_storage_file_url_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_file_url_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_file_url_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_file_url_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Protocol to use. */
    az_storage_file_url_command_builder.prototype.protocol = function (value) {
        this.setFlag("--protocol", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_file_url_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_file_url_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_file_url_command_builder;
}(base_1.CommandBuilder));
/**
 * Set the access control properties of a path(directory or file) in Azure Data Lake Storage Gen2 account.
 *
 * Syntax:
 * ```
 * az storage fs access set --file-system
 *                          --path
 *                          [--account-key]
 *                          [--account-name]
 *                          [--acl]
 *                          [--auth-mode {key, login}]
 *                          [--connection-string]
 *                          [--group]
 *                          [--owner]
 *                          [--permissions]
 *                          [--sas-token]
 *                          [--subscription]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The path to a file or directory in the specified file system.
 */
var az_storage_fs_access_set_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_access_set_command_builder, _super);
    function az_storage_fs_access_set_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_access_set_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The path to a file or directory in the specified file system. */
    az_storage_fs_access_set_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_access_set_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_access_set_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Invalid in conjunction with acl. POSIX access control rights on files and directories in the format "[scope:][type]:[id]:[permissions]". e.g. "user::rwx,group::r--,other::---,mask::rwx". */
    az_storage_fs_access_set_command_builder.prototype.acl = function (value) {
        this.setFlag("--acl", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_access_set_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_access_set_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The owning group of the file or directory. The group Azure Active Directory object ID or user principal name to set as the owning group. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#changing-the-owning-group">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#changing-the-owning-group</a>. */
    az_storage_fs_access_set_command_builder.prototype.group = function (value) {
        this.setFlag("--group", value);
        return this;
    };
    /** The owning user of the file or directory. The user Azure Active Directory object ID or user principal name to set as the owner. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#the-owning-user">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#the-owning-user</a>. */
    az_storage_fs_access_set_command_builder.prototype.owner = function (value) {
        this.setFlag("--owner", value);
        return this;
    };
    /** Invalid in conjunction with acl. POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read(r), write(w), or execute(x) permission. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.'. */
    az_storage_fs_access_set_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_access_set_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_access_set_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_fs_access_set_command_builder;
}(base_1.CommandBuilder));
/**
 * Show the access control properties of a path (directory or file) in Azure Data Lake Storage Gen2 account.
 *
 * Syntax:
 * ```
 * az storage fs access show --file-system
 *                           --path
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--query-examples]
 *                           [--sas-token]
 *                           [--subscription]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The path to a file or directory in the specified file system.
 */
var az_storage_fs_access_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_access_show_command_builder, _super);
    function az_storage_fs_access_show_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_access_show_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The path to a file or directory in the specified file system. */
    az_storage_fs_access_show_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_access_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_access_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_access_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_access_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_access_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_access_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_access_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_fs_access_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Return all user-defined metadata for the specified directory.
 *
 * Syntax:
 * ```
 * az storage fs directory metadata show --file-system
 *                                       --name
 *                                       [--account-key]
 *                                       [--account-name]
 *                                       [--auth-mode {key, login}]
 *                                       [--connection-string]
 *                                       [--query-examples]
 *                                       [--sas-token]
 *                                       [--subscription]
 *                                       [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} name The name of directory.
 */
var az_storage_fs_directory_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_metadata_show_command_builder, _super);
    function az_storage_fs_directory_metadata_show_command_builder(commandPath, resultDataTypeName, fileSystem, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The name of directory. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_directory_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets one or more user-defined name-value pairs for the specified file system.
 *
 * Syntax:
 * ```
 * az storage fs directory metadata update --file-system
 *                                         --metadata
 *                                         --name
 *                                         [--account-key]
 *                                         [--account-name]
 *                                         [--auth-mode {key, login}]
 *                                         [--connection-string]
 *                                         [--sas-token]
 *                                         [--subscription]
 *                                         [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} metadata Metadata in space-separated key=value pairs. This overwrites any existing metadata.
 * @param {string} name The name of directory.
 */
var az_storage_fs_directory_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_metadata_update_command_builder, _super);
    function az_storage_fs_directory_metadata_update_command_builder(commandPath, resultDataTypeName, fileSystem, metadata, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.metadata(metadata);
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** The name of directory. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_directory_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a directory in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs directory create --file-system
 *                                --name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--metadata]
 *                                [--permissions]
 *                                [--sas-token]
 *                                [--subscription]
 *                                [--timeout]
 *                                [--umask]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} name The name of directory.
 */
var az_storage_fs_directory_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_create_command_builder, _super);
    function az_storage_fs_directory_create_command_builder(commandPath, resultDataTypeName, fileSystem, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_create_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The name of directory. */
    az_storage_fs_directory_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_create_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_fs_directory_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#levels-of-permission">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#levels-of-permission</a>. */
    az_storage_fs_directory_create_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created. The resulting permission is given by p & ^u, where p is the permission and u is the umask. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#umask">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#umask</a>. */
    az_storage_fs_directory_create_command_builder.prototype.umask = function (value) {
        this.setFlag("--umask", value);
        return this;
    };
    return az_storage_fs_directory_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a directory in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs directory delete --file-system
 *                                --name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--sas-token]
 *                                [--subscription]
 *                                [--timeout]
 *                                [--yes]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} name The name of directory.
 */
var az_storage_fs_directory_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_delete_command_builder, _super);
    function az_storage_fs_directory_delete_command_builder(commandPath, resultDataTypeName, fileSystem, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_delete_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The name of directory. */
    az_storage_fs_directory_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** Do not prompt for confirmation. */
    az_storage_fs_directory_delete_command_builder.prototype.yes = function (value) {
        this.setFlag("--yes", value);
        return this;
    };
    return az_storage_fs_directory_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a directory in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs directory exists --file-system
 *                                --name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--sas-token]
 *                                [--subscription]
 *                                [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} name The name of directory.
 */
var az_storage_fs_directory_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_exists_command_builder, _super);
    function az_storage_fs_directory_exists_command_builder(commandPath, resultDataTypeName, fileSystem, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_exists_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The name of directory. */
    az_storage_fs_directory_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_exists_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_directory_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * List directories in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs directory list --file-system
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--num-results]
 *                              [--path]
 *                              [--query-examples]
 *                              [--recursive {false, true}]
 *                              [--sas-token]
 *                              [--subscription]
 *                              [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 */
var az_storage_fs_directory_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_list_command_builder, _super);
    function az_storage_fs_directory_list_command_builder(commandPath, resultDataTypeName, fileSystem) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_list_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specify the maximum number of results to return. */
    az_storage_fs_directory_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** Filter the results to return only paths under the specified path. */
    az_storage_fs_directory_list_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_directory_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Look into sub-directories recursively when set to true. */
    az_storage_fs_directory_list_command_builder.prototype.recursive = function (value) {
        this.setFlag("--recursive", value.toString());
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_directory_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Move a directory in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs directory move --file-system
 *                              --name
 *                              --new-directory
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--sas-token]
 *                              [--subscription]
 *                              [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} name The name of directory.
 * @param {string} newDirectory The new directory name the users want to move to. The value must have the following format: "{filesystem}/{directory}/{subdirectory}".
 */
var az_storage_fs_directory_move_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_move_command_builder, _super);
    function az_storage_fs_directory_move_command_builder(commandPath, resultDataTypeName, fileSystem, name, newDirectory) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.name(name);
        _this.newDirectory(newDirectory);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_move_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The name of directory. */
    az_storage_fs_directory_move_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The new directory name the users want to move to. The value must have the following format: "{filesystem}/{directory}/{subdirectory}". */
    az_storage_fs_directory_move_command_builder.prototype.newDirectory = function (value) {
        this.setFlag("--new-directory", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_move_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_move_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_move_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_move_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_move_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_move_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_move_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_directory_move_command_builder;
}(base_1.CommandBuilder));
/**
 * Show properties of a directory in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs directory show --file-system
 *                              --name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--query-examples]
 *                              [--sas-token]
 *                              [--subscription]
 *                              [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} name The name of directory.
 */
var az_storage_fs_directory_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_directory_show_command_builder, _super);
    function az_storage_fs_directory_show_command_builder(commandPath, resultDataTypeName, fileSystem, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_directory_show_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The name of directory. */
    az_storage_fs_directory_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_directory_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_directory_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_directory_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_directory_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_directory_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_directory_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_directory_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_directory_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_directory_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata, standard HTTP properties, and system properties for the file.
 *
 * Syntax:
 * ```
 * az storage fs file metadata show --file-system
 *                                  --path
 *                                  [--account-key]
 *                                  [--account-name]
 *                                  [--auth-mode {key, login}]
 *                                  [--connection-string]
 *                                  [--query-examples]
 *                                  [--sas-token]
 *                                  [--subscription]
 *                                  [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_metadata_show_command_builder, _super);
    function az_storage_fs_file_metadata_show_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_metadata_show_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_metadata_show_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_metadata_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_file_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_file_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets one or more user-defined name-value pairs for the specified file system.
 *
 * Syntax:
 * ```
 * az storage fs file metadata update --file-system
 *                                    --metadata
 *                                    --path
 *                                    [--account-key]
 *                                    [--account-name]
 *                                    [--auth-mode {key, login}]
 *                                    [--connection-string]
 *                                    [--sas-token]
 *                                    [--subscription]
 *                                    [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} metadata Metadata in space-separated key=value pairs. This overwrites any existing metadata.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_metadata_update_command_builder, _super);
    function az_storage_fs_file_metadata_update_command_builder(commandPath, resultDataTypeName, fileSystem, metadata, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.metadata(metadata);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_metadata_update_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_fs_file_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_metadata_update_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_metadata_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_file_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Append content to a file in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file append --content
 *                           --file-system
 *                           --path
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} content Content to be appended to file.
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_append_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_append_command_builder, _super);
    function az_storage_fs_file_append_command_builder(commandPath, resultDataTypeName, content, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.content(content);
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** Content to be appended to file. */
    az_storage_fs_file_append_command_builder.prototype.content = function (value) {
        this.setFlag("--content", value);
        return this;
    };
    /** File system name. */
    az_storage_fs_file_append_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_append_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_append_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_append_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_append_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_append_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_append_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_append_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_append_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_file_append_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a new file in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file create --file-system
 *                           --path
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--content-cache-control]
 *                           [--content-disposition]
 *                           [--content-encoding]
 *                           [--content-language]
 *                           [--content-md5]
 *                           [--content-type]
 *                           [--metadata]
 *                           [--permissions]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 *                           [--umask]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_create_command_builder, _super);
    function az_storage_fs_file_create_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_create_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_create_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_create_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_fs_file_create_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_fs_file_create_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_fs_file_create_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_fs_file_create_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_fs_file_create_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_fs_file_create_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_fs_file_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#levels-of-permission">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#levels-of-permission</a>. */
    az_storage_fs_file_create_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created. The resulting permission is given by p & ^u, where p is the permission and u is the umask. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#umask">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#umask</a>. */
    az_storage_fs_file_create_command_builder.prototype.umask = function (value) {
        this.setFlag("--umask", value);
        return this;
    };
    return az_storage_fs_file_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a file in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file delete --file-system
 *                           --path
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 *                           [--yes]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_delete_command_builder, _super);
    function az_storage_fs_file_delete_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_delete_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_delete_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** Do not prompt for confirmation. */
    az_storage_fs_file_delete_command_builder.prototype.yes = function (value) {
        this.setFlag("--yes", value);
        return this;
    };
    return az_storage_fs_file_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Download a file from the specified path in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file download --file-system
 *                             --path
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--connection-string]
 *                             [--destination]
 *                             [--overwrite {false, true}]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_download_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_download_command_builder, _super);
    function az_storage_fs_file_download_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_download_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_download_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_download_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_download_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_download_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_download_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The local file where the file or folder will be downloaded to. The source filename will be used if not specified. */
    az_storage_fs_file_download_command_builder.prototype.destination = function (value) {
        this.setFlag("--destination", value);
        return this;
    };
    /** Overwrite an existing file when specified. Default value is false. */
    az_storage_fs_file_download_command_builder.prototype.overwrite = function (value) {
        this.setFlag("--overwrite", value.toString());
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_download_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_download_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_download_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_file_download_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a file in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file exists --file-system
 *                           --path
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_exists_command_builder, _super);
    function az_storage_fs_file_exists_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_exists_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_exists_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_exists_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_file_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * List files and directories in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file list --file-system
 *                         [--account-key]
 *                         [--account-name]
 *                         [--auth-mode {key, login}]
 *                         [--connection-string]
 *                         [--exclude-dir]
 *                         [--marker]
 *                         [--num-results]
 *                         [--path]
 *                         [--query-examples]
 *                         [--recursive {false, true}]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 */
var az_storage_fs_file_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_list_command_builder, _super);
    function az_storage_fs_file_list_command_builder(commandPath, resultDataTypeName, fileSystem) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_list_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** List only files in the given file system. */
    az_storage_fs_file_list_command_builder.prototype.excludeDir = function (value) {
        this.setFlag("--exclude-dir", value);
        return this;
    };
    /** An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object. If specified, this generator will begin returning results from this point. */
    az_storage_fs_file_list_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** Specify the maximum number of results to return. If the request does not specify num_results or specifies a value greater than 5,000, the server will return up to 5,000 items. */
    az_storage_fs_file_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** Filter the results to return only paths under the specified path. */
    az_storage_fs_file_list_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_file_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Look into sub-directories recursively when set to true. */
    az_storage_fs_file_list_command_builder.prototype.recursive = function (value) {
        this.setFlag("--recursive", value.toString());
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_file_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Move a file in ADLS Gen2 Account.
 *
 * Syntax:
 * ```
 * az storage fs file move --file-system
 *                         --new-path
 *                         --path
 *                         [--account-key]
 *                         [--account-name]
 *                         [--auth-mode {key, login}]
 *                         [--connection-string]
 *                         [--content-cache-control]
 *                         [--content-disposition]
 *                         [--content-encoding]
 *                         [--content-language]
 *                         [--content-md5]
 *                         [--content-type]
 *                         [--sas-token]
 *                         [--subscription]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} newPath The new path the users want to move to. The value must have the following format: "{filesystem}/{directory}/{subdirectory}/{file}".
 * @param {string} path The original file path users want to move in a file system.
 */
var az_storage_fs_file_move_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_move_command_builder, _super);
    function az_storage_fs_file_move_command_builder(commandPath, resultDataTypeName, fileSystem, newPath, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.newPath(newPath);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_move_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The new path the users want to move to. The value must have the following format: "{filesystem}/{directory}/{subdirectory}/{file}". */
    az_storage_fs_file_move_command_builder.prototype.newPath = function (value) {
        this.setFlag("--new-path", value);
        return this;
    };
    /** The original file path users want to move in a file system. */
    az_storage_fs_file_move_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_move_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_move_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_move_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_move_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_fs_file_move_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_fs_file_move_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_fs_file_move_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_fs_file_move_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_fs_file_move_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_fs_file_move_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_move_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_move_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_fs_file_move_command_builder;
}(base_1.CommandBuilder));
/**
 * Show properties of file in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file show --file-system
 *                         --path
 *                         [--account-key]
 *                         [--account-name]
 *                         [--auth-mode {key, login}]
 *                         [--connection-string]
 *                         [--query-examples]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 */
var az_storage_fs_file_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_show_command_builder, _super);
    function az_storage_fs_file_show_command_builder(commandPath, resultDataTypeName, fileSystem, path) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_show_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_show_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_file_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_file_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Upload a file to a file path in ADLS Gen2 file system.
 *
 * Syntax:
 * ```
 * az storage fs file upload --file-system
 *                           --path
 *                           --source
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--content-cache-control]
 *                           [--content-disposition]
 *                           [--content-encoding]
 *                           [--content-language]
 *                           [--content-md5]
 *                           [--content-type]
 *                           [--if-match]
 *                           [--if-modified-since]
 *                           [--if-none-match]
 *                           [--if-unmodified-since]
 *                           [--metadata]
 *                           [--overwrite {false, true}]
 *                           [--permissions]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 *                           [--umask]
 * ```
 *
 * @param {string} fileSystem File system name.
 * @param {string} path The file path in a file system.
 * @param {string} source Path of the local file to upload as the file content.
 */
var az_storage_fs_file_upload_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_file_upload_command_builder, _super);
    function az_storage_fs_file_upload_command_builder(commandPath, resultDataTypeName, fileSystem, path, source) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.fileSystem(fileSystem);
        _this.path(path);
        _this.source(source);
        return _this;
    }
    /** File system name. */
    az_storage_fs_file_upload_command_builder.prototype.fileSystem = function (value) {
        this.setFlag("--file-system", value);
        return this;
    };
    /** The file path in a file system. */
    az_storage_fs_file_upload_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Path of the local file to upload as the file content. */
    az_storage_fs_file_upload_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_file_upload_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_file_upload_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_file_upload_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_file_upload_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The cache control string. */
    az_storage_fs_file_upload_command_builder.prototype.contentCacheControl = function (value) {
        this.setFlag("--content-cache-control", value);
        return this;
    };
    /** Conveys additional information about how to process the response payload, and can also be used to attach additional metadata. */
    az_storage_fs_file_upload_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** The content encoding type. */
    az_storage_fs_file_upload_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** The content language. */
    az_storage_fs_file_upload_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** The content's MD5 hash. */
    az_storage_fs_file_upload_command_builder.prototype.contentMd5 = function (value) {
        this.setFlag("--content-md5", value);
        return this;
    };
    /** The content MIME type. */
    az_storage_fs_file_upload_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag matches the value specified. */
    az_storage_fs_file_upload_command_builder.prototype.ifMatch = function (value) {
        this.setFlag("--if-match", value);
        return this;
    };
    /** A Commence only if modified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_fs_file_upload_command_builder.prototype.ifModifiedSince = function (value) {
        this.setFlag("--if-modified-since", value);
        return this;
    };
    /** An ETag value, or the wildcard character (\*). Specify this header to perform the operation only if the resource's ETag does not match the value specified. */
    az_storage_fs_file_upload_command_builder.prototype.ifNoneMatch = function (value) {
        this.setFlag("--if-none-match", value);
        return this;
    };
    /** A Commence only if unmodified since supplied UTC datetime (Y-m-d'T'H:M'Z'). */
    az_storage_fs_file_upload_command_builder.prototype.ifUnmodifiedSince = function (value) {
        this.setFlag("--if-unmodified-since", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_fs_file_upload_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Overwrite an existing file when specified. */
    az_storage_fs_file_upload_command_builder.prototype.overwrite = function (value) {
        this.setFlag("--overwrite", value.toString());
        return this;
    };
    /** POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#levels-of-permission">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#levels-of-permission</a>. */
    az_storage_fs_file_upload_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_file_upload_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_file_upload_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_file_upload_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created. The resulting permission is given by p & ^u, where p is the permission and u is the umask. For more information, please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#umask">https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-access-control#umask</a>. */
    az_storage_fs_file_upload_command_builder.prototype.umask = function (value) {
        this.setFlag("--umask", value);
        return this;
    };
    return az_storage_fs_file_upload_command_builder;
}(base_1.CommandBuilder));
/**
 * Return all user-defined metadata for the specified file system.
 *
 * Syntax:
 * ```
 * az storage fs metadata show --name
 *                             [--account-key]
 *                             [--account-name]
 *                             [--auth-mode {key, login}]
 *                             [--connection-string]
 *                             [--query-examples]
 *                             [--sas-token]
 *                             [--subscription]
 *                             [--timeout]
 * ```
 *
 * @param {string} name File system name.
 */
var az_storage_fs_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_metadata_show_command_builder, _super);
    function az_storage_fs_metadata_show_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_metadata_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_metadata_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets one or more user-defined name-value pairs for the specified file system.
 *
 * Syntax:
 * ```
 * az storage fs metadata update --metadata
 *                               --name
 *                               [--account-key]
 *                               [--account-name]
 *                               [--auth-mode {key, login}]
 *                               [--connection-string]
 *                               [--sas-token]
 *                               [--subscription]
 *                               [--timeout]
 * ```
 *
 * @param {string} metadata Metadata in space-separated key=value pairs. This overwrites any existing metadata.
 * @param {string} name File system name.
 */
var az_storage_fs_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_metadata_update_command_builder, _super);
    function az_storage_fs_metadata_update_command_builder(commandPath, resultDataTypeName, metadata, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.metadata(metadata);
        _this.name(name);
        return _this;
    }
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_fs_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** File system name. */
    az_storage_fs_metadata_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_metadata_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create file system for Azure Data Lake Storage Gen2 account.
 *
 * Syntax:
 * ```
 * az storage fs create --name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--auth-mode {key, login}]
 *                      [--connection-string]
 *                      [--metadata]
 *                      [--public-access {file, filesystem, off}]
 *                      [--sas-token]
 *                      [--subscription]
 *                      [--timeout]
 * ```
 *
 * @param {string} name File system name.
 */
var az_storage_fs_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_create_command_builder, _super);
    function az_storage_fs_create_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_create_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_fs_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Specify whether data in the file system may be accessed publicly and the level of access. */
    az_storage_fs_create_command_builder.prototype.publicAccess = function (value) {
        this.setFlag("--public-access", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a file system in ADLS Gen2 account.
 *
 * Syntax:
 * ```
 * az storage fs delete --name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--auth-mode {key, login}]
 *                      [--connection-string]
 *                      [--sas-token]
 *                      [--subscription]
 *                      [--timeout]
 *                      [--yes]
 * ```
 *
 * @param {string} name File system name.
 */
var az_storage_fs_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_delete_command_builder, _super);
    function az_storage_fs_delete_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** Do not prompt for confirmation. */
    az_storage_fs_delete_command_builder.prototype.yes = function (value) {
        this.setFlag("--yes", value);
        return this;
    };
    return az_storage_fs_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a file system in ADLS Gen2 account.
 *
 * Syntax:
 * ```
 * az storage fs exists --name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--auth-mode {key, login}]
 *                      [--connection-string]
 *                      [--sas-token]
 *                      [--subscription]
 *                      [--timeout]
 * ```
 *
 * @param {string} name File system name.
 */
var az_storage_fs_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_exists_command_builder, _super);
    function az_storage_fs_exists_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_exists_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * List file systems in ADLS Gen2 account.
 *
 * Syntax:
 * ```
 * az storage fs list [--account-key]
 *                    [--account-name]
 *                    [--auth-mode {key, login}]
 *                    [--connection-string]
 *                    [--include-metadata {false, true}]
 *                    [--prefix]
 *                    [--query-examples]
 *                    [--sas-token]
 *                    [--subscription]
 * ```
 */
var az_storage_fs_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_list_command_builder, _super);
    function az_storage_fs_list_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specify that file system metadata be returned in the response. The default value is "False". */
    az_storage_fs_list_command_builder.prototype.includeMetadata = function (value) {
        this.setFlag("--include-metadata", value.toString());
        return this;
    };
    /** Filter the results to return only file systems whose names begin with the specified prefix. */
    az_storage_fs_list_command_builder.prototype.prefix = function (value) {
        this.setFlag("--prefix", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_fs_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Show properties of file system in ADLS Gen2 account.
 *
 * Syntax:
 * ```
 * az storage fs show --name
 *                    [--account-key]
 *                    [--account-name]
 *                    [--auth-mode {key, login}]
 *                    [--connection-string]
 *                    [--query-examples]
 *                    [--sas-token]
 *                    [--subscription]
 *                    [--timeout]
 * ```
 *
 * @param {string} name File system name.
 */
var az_storage_fs_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_fs_show_command_builder, _super);
    function az_storage_fs_show_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** File system name. */
    az_storage_fs_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_fs_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_fs_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_fs_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_fs_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_fs_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_fs_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_fs_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_fs_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_fs_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Turn off logging for a storage account.
 *
 * Syntax:
 * ```
 * az storage logging off [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--services]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 */
var az_storage_logging_off_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_logging_off_command_builder, _super);
    function az_storage_logging_off_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_logging_off_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_logging_off_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_logging_off_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_logging_off_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The storage services from which to retrieve logging info: (b)lob (q)ueue (t)able. Can be combined. */
    az_storage_logging_off_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_logging_off_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_logging_off_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_logging_off_command_builder;
}(base_1.CommandBuilder));
/**
 * Show logging settings for a storage account.
 *
 * Syntax:
 * ```
 * az storage logging show [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--query-examples]
 *                         [--sas-token]
 *                         [--services]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 */
var az_storage_logging_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_logging_show_command_builder, _super);
    function az_storage_logging_show_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_logging_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_logging_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_logging_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_logging_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_logging_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The storage services from which to retrieve logging info: (b)lob (q)ueue (t)able. Can be combined. */
    az_storage_logging_show_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_logging_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_logging_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_logging_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update logging settings for a storage account.
 *
 * Syntax:
 * ```
 * az storage logging update --log
 *                           --retention
 *                           --services
 *                           [--account-key]
 *                           [--account-name]
 *                           [--connection-string]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 *                           [--version]
 * ```
 *
 * @param {string} log The operations for which to enable logging: (r)ead (w)rite (d)elete. Can be combined.
 * @param {string} retention Number of days for which to retain logs. 0 to disable.
 * @param {string} services The storage service(s) for which to update logging info: (b)lob (q)ueue (t)able. Can be combined.
 */
var az_storage_logging_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_logging_update_command_builder, _super);
    function az_storage_logging_update_command_builder(commandPath, resultDataTypeName, log, retention, services) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.log(log);
        _this.retention(retention);
        _this.services(services);
        return _this;
    }
    /** The operations for which to enable logging: (r)ead (w)rite (d)elete. Can be combined. */
    az_storage_logging_update_command_builder.prototype.log = function (value) {
        this.setFlag("--log", value);
        return this;
    };
    /** Number of days for which to retain logs. 0 to disable. */
    az_storage_logging_update_command_builder.prototype.retention = function (value) {
        this.setFlag("--retention", value);
        return this;
    };
    /** The storage service(s) for which to update logging info: (b)lob (q)ueue (t)able. Can be combined. */
    az_storage_logging_update_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_logging_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_logging_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_logging_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_logging_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_logging_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_logging_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** Version of the logging schema. */
    az_storage_logging_update_command_builder.prototype.version = function (value) {
        this.setFlag("--version", value);
        return this;
    };
    return az_storage_logging_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Deletes all messages from the specified queue.
 *
 * Syntax:
 * ```
 * az storage message clear --queue-name
 *                          [--account-key]
 *                          [--account-name]
 *                          [--auth-mode {key, login}]
 *                          [--connection-string]
 *                          [--sas-token]
 *                          [--subscription]
 *                          [--timeout]
 * ```
 *
 * @param {string} queueName The queue name.
 */
var az_storage_message_clear_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_message_clear_command_builder, _super);
    function az_storage_message_clear_command_builder(commandPath, resultDataTypeName, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.queueName(queueName);
        return _this;
    }
    /** The queue name. */
    az_storage_message_clear_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_message_clear_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_message_clear_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_message_clear_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_message_clear_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_message_clear_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_message_clear_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_message_clear_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_message_clear_command_builder;
}(base_1.CommandBuilder));
/**
 * Deletes the specified message.
 *
 * Syntax:
 * ```
 * az storage message delete --id
 *                           --pop-receipt
 *                           --queue-name
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} id The message id identifying the message to delete.
 * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the get_messages() or update_message().
 * @param {string} queueName The queue name.
 */
var az_storage_message_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_message_delete_command_builder, _super);
    function az_storage_message_delete_command_builder(commandPath, resultDataTypeName, id, popReceipt, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.id(id);
        _this.popReceipt(popReceipt);
        _this.queueName(queueName);
        return _this;
    }
    /** The message id identifying the message to delete. */
    az_storage_message_delete_command_builder.prototype.id = function (value) {
        this.setFlag("--id", value);
        return this;
    };
    /** A valid pop receipt value returned from an earlier call to the get_messages() or update_message(). */
    az_storage_message_delete_command_builder.prototype.popReceipt = function (value) {
        this.setFlag("--pop-receipt", value);
        return this;
    };
    /** The queue name. */
    az_storage_message_delete_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_message_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_message_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_message_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_message_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_message_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_message_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_message_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_message_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Retrieves one or more messages from the front of the queue.
 *
 * Syntax:
 * ```
 * az storage message get --queue-name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--auth-mode {key, login}]
 *                        [--connection-string]
 *                        [--num-messages]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 *                        [--visibility-timeout]
 * ```
 *
 * @param {string} queueName The queue name.
 */
var az_storage_message_get_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_message_get_command_builder, _super);
    function az_storage_message_get_command_builder(commandPath, resultDataTypeName, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.queueName(queueName);
        return _this;
    }
    /** The queue name. */
    az_storage_message_get_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_message_get_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_message_get_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_message_get_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_message_get_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By default, a single message is retrieved from the queue with this operation. */
    az_storage_message_get_command_builder.prototype.numMessages = function (value) {
        this.setFlag("--num-messages", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_message_get_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_message_get_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_message_get_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 1 second, and cannot be larger than 7 days. The visibility timeout of a message can be set to a value later than the expiry time. */
    az_storage_message_get_command_builder.prototype.visibilityTimeout = function (value) {
        this.setFlag("--visibility-timeout", value);
        return this;
    };
    return az_storage_message_get_command_builder;
}(base_1.CommandBuilder));
/**
 * Retrieves one or more messages from the front of the queue, but does not alter the visibility of the message.
 *
 * Syntax:
 * ```
 * az storage message peek --queue-name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--auth-mode {key, login}]
 *                         [--connection-string]
 *                         [--num-messages]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} queueName The queue name.
 */
var az_storage_message_peek_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_message_peek_command_builder, _super);
    function az_storage_message_peek_command_builder(commandPath, resultDataTypeName, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.queueName(queueName);
        return _this;
    }
    /** The queue name. */
    az_storage_message_peek_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_message_peek_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_message_peek_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_message_peek_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_message_peek_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A nonzero integer value that specifies the number of messages to peek from the queue, up to a maximum of 32. By default, a single message is peeked from the queue with this operation. */
    az_storage_message_peek_command_builder.prototype.numMessages = function (value) {
        this.setFlag("--num-messages", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_message_peek_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_message_peek_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_message_peek_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_message_peek_command_builder;
}(base_1.CommandBuilder));
/**
 * Adds a new message to the back of the message queue.
 *
 * Syntax:
 * ```
 * az storage message put --content
 *                        --queue-name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--auth-mode {key, login}]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--time-to-live]
 *                        [--timeout]
 *                        [--visibility-timeout]
 * ```
 *
 * @param {string} content Message content, up to 64KB in size.
 * @param {string} queueName The queue name.
 */
var az_storage_message_put_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_message_put_command_builder, _super);
    function az_storage_message_put_command_builder(commandPath, resultDataTypeName, content, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.content(content);
        _this.queueName(queueName);
        return _this;
    }
    /** Message content, up to 64KB in size. */
    az_storage_message_put_command_builder.prototype.content = function (value) {
        this.setFlag("--content", value);
        return this;
    };
    /** The queue name. */
    az_storage_message_put_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_message_put_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_message_put_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_message_put_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_message_put_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_message_put_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_message_put_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Specifies the time-to-live interval for the message, in seconds. The time-to-live may be any positive number or -1 for infinity. If this parameter is omitted, the default time-to-live is 7 days. */
    az_storage_message_put_command_builder.prototype.timeToLive = function (value) {
        this.setFlag("--time-to-live", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_message_put_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    /** If not specified, the default value is 0. Specifies the new visibility timeout value, in seconds, relative to server time. The value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. visibility_timeout should be set to a value smaller than the time-to-live value. */
    az_storage_message_put_command_builder.prototype.visibilityTimeout = function (value) {
        this.setFlag("--visibility-timeout", value);
        return this;
    };
    return az_storage_message_put_command_builder;
}(base_1.CommandBuilder));
/**
 * Updates the visibility timeout of a message.
 *
 * Syntax:
 * ```
 * az storage message update --id
 *                           --pop-receipt
 *                           --queue-name
 *                           --visibility-timeout
 *                           [--account-key]
 *                           [--account-name]
 *                           [--auth-mode {key, login}]
 *                           [--connection-string]
 *                           [--content]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} id The message id identifying the message to update.
 * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the get_messages() or update_message() operation.
 * @param {string} queueName The queue name.
 * @param {string} visibilityTimeout Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. A message can be updated until it has been deleted or has expired.
 */
var az_storage_message_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_message_update_command_builder, _super);
    function az_storage_message_update_command_builder(commandPath, resultDataTypeName, id, popReceipt, queueName, visibilityTimeout) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.id(id);
        _this.popReceipt(popReceipt);
        _this.queueName(queueName);
        _this.visibilityTimeout(visibilityTimeout);
        return _this;
    }
    /** The message id identifying the message to update. */
    az_storage_message_update_command_builder.prototype.id = function (value) {
        this.setFlag("--id", value);
        return this;
    };
    /** A valid pop receipt value returned from an earlier call to the get_messages() or update_message() operation. */
    az_storage_message_update_command_builder.prototype.popReceipt = function (value) {
        this.setFlag("--pop-receipt", value);
        return this;
    };
    /** The queue name. */
    az_storage_message_update_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. A message can be updated until it has been deleted or has expired. */
    az_storage_message_update_command_builder.prototype.visibilityTimeout = function (value) {
        this.setFlag("--visibility-timeout", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_message_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_message_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_message_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_message_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Message content, up to 64KB in size. */
    az_storage_message_update_command_builder.prototype.content = function (value) {
        this.setFlag("--content", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_message_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_message_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_message_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_message_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Show metrics settings for a storage account.
 *
 * Syntax:
 * ```
 * az storage metrics show [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--interval {both, hour, minute}]
 *                         [--query-examples]
 *                         [--sas-token]
 *                         [--services]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 */
var az_storage_metrics_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_metrics_show_command_builder, _super);
    function az_storage_metrics_show_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_metrics_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_metrics_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_metrics_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Filter the set of metrics to retrieve by time interval. */
    az_storage_metrics_show_command_builder.prototype.interval = function (value) {
        this.setFlag("--interval", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_metrics_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_metrics_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined. */
    az_storage_metrics_show_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_metrics_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_metrics_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_metrics_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Update metrics settings for a storage account.
 *
 * Syntax:
 * ```
 * az storage metrics update --retention
 *                           --services
 *                           [--account-key]
 *                           [--account-name]
 *                           [--api {false, true}]
 *                           [--connection-string]
 *                           [--hour {false, true}]
 *                           [--minute {false, true}]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} retention Number of days for which to retain metrics. 0 to disable. Applies to both hour and minute metrics if both are specified.
 * @param {string} services The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined.
 */
var az_storage_metrics_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_metrics_update_command_builder, _super);
    function az_storage_metrics_update_command_builder(commandPath, resultDataTypeName, retention, services) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.retention(retention);
        _this.services(services);
        return _this;
    }
    /** Number of days for which to retain metrics. 0 to disable. Applies to both hour and minute metrics if both are specified. */
    az_storage_metrics_update_command_builder.prototype.retention = function (value) {
        this.setFlag("--retention", value);
        return this;
    };
    /** The storage services from which to retrieve metrics info: (b)lob (q)ueue (t)able. Can be combined. */
    az_storage_metrics_update_command_builder.prototype.services = function (value) {
        this.setFlag("--services", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_metrics_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_metrics_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Specify whether to include API in metrics. Applies to both hour and minute metrics if both are specified. Must be specified if hour or minute metrics are enabled and being updated. */
    az_storage_metrics_update_command_builder.prototype.api = function (value) {
        this.setFlag("--api", value.toString());
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_metrics_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Update the hourly metrics. */
    az_storage_metrics_update_command_builder.prototype.hour = function (value) {
        this.setFlag("--hour", value.toString());
        return this;
    };
    /** Update the by-minute metrics. */
    az_storage_metrics_update_command_builder.prototype.minute = function (value) {
        this.setFlag("--minute", value.toString());
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_metrics_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_metrics_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_metrics_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_metrics_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Retrieves user-defined metadata and queue properties on the specified queue.
 *
 * Syntax:
 * ```
 * az storage queue metadata show --name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--query-examples]
 *                                [--sas-token]
 *                                [--subscription]
 *                                [--timeout]
 * ```
 *
 * @param {string} name The queue name.
 */
var az_storage_queue_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_metadata_show_command_builder, _super);
    function az_storage_queue_metadata_show_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The queue name. */
    az_storage_queue_metadata_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_metadata_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_queue_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_queue_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_queue_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets user-defined metadata on the specified queue.
 *
 * Syntax:
 * ```
 * az storage queue metadata update --name
 *                                  [--account-key]
 *                                  [--account-name]
 *                                  [--auth-mode {key, login}]
 *                                  [--connection-string]
 *                                  [--metadata]
 *                                  [--sas-token]
 *                                  [--subscription]
 *                                  [--timeout]
 * ```
 *
 * @param {string} name The queue name.
 */
var az_storage_queue_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_metadata_update_command_builder, _super);
    function az_storage_queue_metadata_update_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The queue name. */
    az_storage_queue_metadata_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_metadata_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_queue_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_queue_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_queue_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a stored access policy on the containing object.
 *
 * Syntax:
 * ```
 * az storage queue policy create --name
 *                                --queue-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--expiry]
 *                                [--permissions]
 *                                [--sas-token]
 *                                [--start]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} queueName The queue name.
 */
var az_storage_queue_policy_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_policy_create_command_builder, _super);
    function az_storage_queue_policy_create_command_builder(commandPath, resultDataTypeName, name, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.queueName(queueName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_queue_policy_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The queue name. */
    az_storage_queue_policy_create_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_policy_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_policy_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_policy_create_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_policy_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_queue_policy_create_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined. */
    az_storage_queue_policy_create_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_policy_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_queue_policy_create_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_policy_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_queue_policy_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage queue policy delete --name
 *                                --queue-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--sas-token]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} queueName The queue name.
 */
var az_storage_queue_policy_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_policy_delete_command_builder, _super);
    function az_storage_queue_policy_delete_command_builder(commandPath, resultDataTypeName, name, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.queueName(queueName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_queue_policy_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The queue name. */
    az_storage_queue_policy_delete_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_policy_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_policy_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_policy_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_policy_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_policy_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_policy_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_queue_policy_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * List stored access policies on a containing object.
 *
 * Syntax:
 * ```
 * az storage queue policy list --queue-name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--query-examples]
 *                              [--sas-token]
 *                              [--subscription]
 * ```
 *
 * @param {string} queueName The queue name.
 */
var az_storage_queue_policy_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_policy_list_command_builder, _super);
    function az_storage_queue_policy_list_command_builder(commandPath, resultDataTypeName, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.queueName(queueName);
        return _this;
    }
    /** The queue name. */
    az_storage_queue_policy_list_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_policy_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_policy_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_policy_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_policy_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_queue_policy_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_policy_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_policy_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_queue_policy_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Show a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage queue policy show --name
 *                              --queue-name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--auth-mode {key, login}]
 *                              [--connection-string]
 *                              [--query-examples]
 *                              [--sas-token]
 *                              [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} queueName The queue name.
 */
var az_storage_queue_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_policy_show_command_builder, _super);
    function az_storage_queue_policy_show_command_builder(commandPath, resultDataTypeName, name, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.queueName(queueName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_queue_policy_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The queue name. */
    az_storage_queue_policy_show_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_policy_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_policy_show_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_policy_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_queue_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_policy_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_queue_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Set a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage queue policy update --name
 *                                --queue-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--auth-mode {key, login}]
 *                                [--connection-string]
 *                                [--expiry]
 *                                [--permissions]
 *                                [--sas-token]
 *                                [--start]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} queueName The queue name.
 */
var az_storage_queue_policy_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_policy_update_command_builder, _super);
    function az_storage_queue_policy_update_command_builder(commandPath, resultDataTypeName, name, queueName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.queueName(queueName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_queue_policy_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The queue name. */
    az_storage_queue_policy_update_command_builder.prototype.queueName = function (value) {
        this.setFlag("--queue-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_policy_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_policy_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_policy_update_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_policy_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_queue_policy_update_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Can be combined. */
    az_storage_queue_policy_update_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_policy_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_queue_policy_update_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_policy_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_queue_policy_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates a queue under the given account.
 *
 * Syntax:
 * ```
 * az storage queue create --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--auth-mode {key, login}]
 *                         [--connection-string]
 *                         [--fail-on-exist]
 *                         [--metadata]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The queue name.
 */
var az_storage_queue_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_create_command_builder, _super);
    function az_storage_queue_create_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The queue name. */
    az_storage_queue_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_create_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specifies whether to throw an exception if the queue already exists. */
    az_storage_queue_create_command_builder.prototype.failOnExist = function (value) {
        this.setFlag("--fail-on-exist", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_queue_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_queue_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_queue_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Deletes the specified queue and any messages it contains.
 *
 * Syntax:
 * ```
 * az storage queue delete --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--auth-mode {key, login}]
 *                         [--connection-string]
 *                         [--fail-not-exist]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The queue name.
 */
var az_storage_queue_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_delete_command_builder, _super);
    function az_storage_queue_delete_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The queue name. */
    az_storage_queue_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_delete_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specifies whether to throw an exception if the queue doesn't exist. */
    az_storage_queue_delete_command_builder.prototype.failNotExist = function (value) {
        this.setFlag("--fail-not-exist", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_queue_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_queue_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns a boolean indicating whether the queue exists.
 *
 * Syntax:
 * ```
 * az storage queue exists --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--auth-mode {key, login}]
 *                         [--connection-string]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The queue name.
 */
var az_storage_queue_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_exists_command_builder, _super);
    function az_storage_queue_exists_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The queue name. */
    az_storage_queue_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_exists_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_queue_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_queue_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * Generates a shared access signature for the queue.
 *
 * Syntax:
 * ```
 * az storage queue generate-sas --name
 *                               [--account-key]
 *                               [--account-name]
 *                               [--connection-string]
 *                               [--expiry]
 *                               [--https-only]
 *                               [--ip]
 *                               [--permissions]
 *                               [--policy-name]
 *                               [--start]
 *                               [--subscription]
 * ```
 *
 * @param {string} name The queue name.
 */
var az_storage_queue_generate_sas_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_generate_sas_command_builder, _super);
    function az_storage_queue_generate_sas_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The queue name. */
    az_storage_queue_generate_sas_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_generate_sas_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_generate_sas_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_generate_sas_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value. */
    az_storage_queue_generate_sas_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted. */
    az_storage_queue_generate_sas_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value);
        return this;
    };
    /** Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses. */
    az_storage_queue_generate_sas_command_builder.prototype.ip = function (value) {
        this.setFlag("--ip", value);
        return this;
    };
    /** The permissions the SAS grants. Allowed values: (a)dd (p)rocess (r)ead (u)pdate. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined. */
    az_storage_queue_generate_sas_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** The name of a stored access policy within the share's ACL. */
    az_storage_queue_generate_sas_command_builder.prototype.policyName = function (value) {
        this.setFlag("--policy-name", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request. */
    az_storage_queue_generate_sas_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_generate_sas_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_queue_generate_sas_command_builder;
}(base_1.CommandBuilder));
/**
 * List queues in a storage account.
 *
 * Syntax:
 * ```
 * az storage queue list [--account-key]
 *                       [--account-name]
 *                       [--auth-mode {key, login}]
 *                       [--connection-string]
 *                       [--include-metadata]
 *                       [--marker]
 *                       [--num-results]
 *                       [--prefix]
 *                       [--query-examples]
 *                       [--sas-token]
 *                       [--subscription]
 *                       [--timeout]
 * ```
 */
var az_storage_queue_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_list_command_builder, _super);
    function az_storage_queue_list_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_list_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specifies that container metadata be returned in the response. */
    az_storage_queue_list_command_builder.prototype.includeMetadata = function (value) {
        this.setFlag("--include-metadata", value);
        return this;
    };
    /** An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped. */
    az_storage_queue_list_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** The maximum number of queues to return. */
    az_storage_queue_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** Filters the results to return only queues with names that begin with the specified prefix. */
    az_storage_queue_list_command_builder.prototype.prefix = function (value) {
        this.setFlag("--prefix", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_queue_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_queue_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_queue_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Retrieves statistics related to replication for the Queue service.
 *
 * Syntax:
 * ```
 * az storage queue stats [--account-key]
 *                        [--account-name]
 *                        [--auth-mode {key, login}]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 */
var az_storage_queue_stats_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_queue_stats_command_builder, _super);
    function az_storage_queue_stats_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_queue_stats_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_queue_stats_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The mode in which to run the command. "login" mode will directly use your login credentials for the authentication. The legacy "key" mode will attempt to query for an account key if no authentication parameters for the account are provided. Environment variable: AZURE_STORAGE_AUTH_MODE. */
    az_storage_queue_stats_command_builder.prototype.authMode = function (value) {
        this.setFlag("--auth-mode", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_queue_stats_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_queue_stats_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_queue_stats_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_queue_stats_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_queue_stats_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata for the specified share.
 *
 * Syntax:
 * ```
 * az storage share metadata show --name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--query-examples]
 *                                [--sas-token]
 *                                [--snapshot]
 *                                [--subscription]
 *                                [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_metadata_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_metadata_show_command_builder, _super);
    function az_storage_share_metadata_show_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_metadata_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_metadata_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_metadata_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_metadata_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_share_metadata_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_metadata_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_share_metadata_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_metadata_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_metadata_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_metadata_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets one or more user-defined name-value pairs for the specified share.
 *
 * Syntax:
 * ```
 * az storage share metadata update --name
 *                                  [--account-key]
 *                                  [--account-name]
 *                                  [--connection-string]
 *                                  [--metadata]
 *                                  [--sas-token]
 *                                  [--subscription]
 *                                  [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_metadata_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_metadata_update_command_builder, _super);
    function az_storage_share_metadata_update_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_metadata_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_metadata_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_metadata_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_metadata_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_share_metadata_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_metadata_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_metadata_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_metadata_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_metadata_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a stored access policy on the containing object.
 *
 * Syntax:
 * ```
 * az storage share policy create --name
 *                                --share-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--expiry]
 *                                [--permissions]
 *                                [--sas-token]
 *                                [--start]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} shareName The file share name.
 */
var az_storage_share_policy_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_policy_create_command_builder, _super);
    function az_storage_share_policy_create_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_share_policy_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_policy_create_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_policy_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_policy_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_policy_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_share_policy_create_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined. */
    az_storage_share_policy_create_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_policy_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_share_policy_create_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_policy_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_policy_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage share policy delete --name
 *                                --share-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--sas-token]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} shareName The file share name.
 */
var az_storage_share_policy_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_policy_delete_command_builder, _super);
    function az_storage_share_policy_delete_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_share_policy_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_policy_delete_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_policy_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_policy_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_policy_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_policy_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_policy_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_policy_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * List stored access policies on a containing object.
 *
 * Syntax:
 * ```
 * az storage share policy list --share-name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--connection-string]
 *                              [--query-examples]
 *                              [--sas-token]
 *                              [--subscription]
 * ```
 *
 * @param {string} shareName The file share name.
 */
var az_storage_share_policy_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_policy_list_command_builder, _super);
    function az_storage_share_policy_list_command_builder(commandPath, resultDataTypeName, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.shareName(shareName);
        return _this;
    }
    /** The file share name. */
    az_storage_share_policy_list_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_policy_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_policy_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_policy_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_share_policy_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_policy_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_policy_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_policy_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Show a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage share policy show --name
 *                              --share-name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--connection-string]
 *                              [--query-examples]
 *                              [--sas-token]
 *                              [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} shareName The file share name.
 */
var az_storage_share_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_policy_show_command_builder, _super);
    function az_storage_share_policy_show_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_share_policy_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_policy_show_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_policy_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_policy_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_share_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_policy_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Set a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage share policy update --name
 *                                --share-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--expiry]
 *                                [--permissions]
 *                                [--sas-token]
 *                                [--start]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} shareName The file share name.
 */
var az_storage_share_policy_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_policy_update_command_builder, _super);
    function az_storage_share_policy_update_command_builder(commandPath, resultDataTypeName, name, shareName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.shareName(shareName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_share_policy_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_policy_update_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_policy_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_policy_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_policy_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_share_policy_update_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Allowed values: (d)elete (l)ist (r)ead (w)rite. Can be combined. */
    az_storage_share_policy_update_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_policy_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_share_policy_update_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_policy_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_policy_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a new Azure file share under the specified storage account.
 *
 * Syntax:
 * ```
 * az storage share-rm create --name
 *                            --storage-account
 *                            [--access-tier {Cool, Hot, Premium, TransactionOptimized}]
 *                            [--enabled-protocols {NFS, SMB}]
 *                            [--metadata]
 *                            [--quota]
 *                            [--resource-group]
 *                            [--root-squash {AllSquash, NoRootSquash, RootSquash}]
 *                            [--subscription]
 * ```
 *
 * @param {string} name The file share name.
 * @param {string} storageAccount The name or ID of the storage account.
 */
var az_storage_share_rm_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_create_command_builder, _super);
    function az_storage_share_rm_create_command_builder(commandPath, resultDataTypeName, name, storageAccount) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.storageAccount(storageAccount);
        return _this;
    }
    /** The file share name. */
    az_storage_share_rm_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The name or ID of the storage account. */
    az_storage_share_rm_create_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. */
    az_storage_share_rm_create_command_builder.prototype.accessTier = function (value) {
        this.setFlag("--access-tier", value);
        return this;
    };
    /** Immutable property for file shares protocol. NFS protocol will be only available for premium file shares (file shares in the FileStorage account type). */
    az_storage_share_rm_create_command_builder.prototype.enabledProtocols = function (value) {
        this.setFlag("--enabled-protocols", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs that is associated with the share. This overwrites any existing metadata. */
    az_storage_share_rm_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** The maximum size of the share in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. */
    az_storage_share_rm_create_command_builder.prototype.quota = function (value) {
        this.setFlag("--quota", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_create_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Reduction of the access rights for the remote superuser. */
    az_storage_share_rm_create_command_builder.prototype.rootSquash = function (value) {
        this.setFlag("--root-squash", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_rm_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete the specified Azure file share.
 *
 * Syntax:
 * ```
 * az storage share-rm delete [--ids]
 *                            [--name]
 *                            [--resource-group]
 *                            [--storage-account]
 *                            [--subscription]
 *                            [--yes]
 * ```
 */
var az_storage_share_rm_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_delete_command_builder, _super);
    function az_storage_share_rm_delete_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_share_rm_delete_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_rm_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_delete_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The name or ID of the storage account. */
    az_storage_share_rm_delete_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Do not prompt for confirmation. */
    az_storage_share_rm_delete_command_builder.prototype.yes = function (value) {
        this.setFlag("--yes", value);
        return this;
    };
    return az_storage_share_rm_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of an Azure file share.
 *
 * Syntax:
 * ```
 * az storage share-rm exists [--ids]
 *                            [--name]
 *                            [--resource-group]
 *                            [--storage-account]
 *                            [--subscription]
 * ```
 */
var az_storage_share_rm_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_exists_command_builder, _super);
    function az_storage_share_rm_exists_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_share_rm_exists_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_rm_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_exists_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The name or ID of the storage account. */
    az_storage_share_rm_exists_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_rm_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * List the Azure file shares under the specified storage account.
 *
 * Syntax:
 * ```
 * az storage share-rm list --storage-account
 *                          [--include-deleted]
 *                          [--query-examples]
 *                          [--resource-group]
 *                          [--subscription]
 * ```
 *
 * @param {string} storageAccount The name or ID of the storage account.
 */
var az_storage_share_rm_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_list_command_builder, _super);
    function az_storage_share_rm_list_command_builder(commandPath, resultDataTypeName, storageAccount) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.storageAccount(storageAccount);
        return _this;
    }
    /** The name or ID of the storage account. */
    az_storage_share_rm_list_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Include soft deleted file shares when specified. */
    az_storage_share_rm_list_command_builder.prototype.includeDeleted = function (value) {
        this.setFlag("--include-deleted", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_share_rm_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_list_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_rm_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Restore a file share within a valid retention days if share soft delete is enabled.
 *
 * Syntax:
 * ```
 * az storage share-rm restore --deleted-version
 *                             [--ids]
 *                             [--name]
 *                             [--resource-group]
 *                             [--restored-name]
 *                             [--storage-account]
 *                             [--subscription]
 * ```
 *
 * @param {string} deletedVersion Identify the version of the deleted share that will be restored.
 */
var az_storage_share_rm_restore_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_restore_command_builder, _super);
    function az_storage_share_rm_restore_command_builder(commandPath, resultDataTypeName, deletedVersion) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.deletedVersion(deletedVersion);
        return _this;
    }
    /** Identify the version of the deleted share that will be restored. */
    az_storage_share_rm_restore_command_builder.prototype.deletedVersion = function (value) {
        this.setFlag("--deleted-version", value);
        return this;
    };
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_share_rm_restore_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The file share name. Identify the name of the deleted share that will be restored. */
    az_storage_share_rm_restore_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_restore_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** A new file share name to be restored. If not specified, deleted share name will be used. */
    az_storage_share_rm_restore_command_builder.prototype.restoredName = function (value) {
        this.setFlag("--restored-name", value);
        return this;
    };
    /** The name or ID of the storage account. */
    az_storage_share_rm_restore_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_restore_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_rm_restore_command_builder;
}(base_1.CommandBuilder));
/**
 * Show the properties for a specified Azure file share.
 *
 * Syntax:
 * ```
 * az storage share-rm show [--expand]
 *                          [--ids]
 *                          [--name]
 *                          [--query-examples]
 *                          [--resource-group]
 *                          [--storage-account]
 *                          [--subscription]
 * ```
 */
var az_storage_share_rm_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_show_command_builder, _super);
    function az_storage_share_rm_show_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Optional, used to expand the properties within share's properties. */
    az_storage_share_rm_show_command_builder.prototype.expand = function (value) {
        this.setFlag("--expand", value);
        return this;
    };
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_share_rm_show_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_rm_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_share_rm_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_show_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The name or ID of the storage account. */
    az_storage_share_rm_show_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_rm_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Get the usage bytes of the data stored on the share.
 *
 * Syntax:
 * ```
 * az storage share-rm stats [--ids]
 *                           [--name]
 *                           [--resource-group]
 *                           [--storage-account]
 *                           [--subscription]
 * ```
 */
var az_storage_share_rm_stats_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_stats_command_builder, _super);
    function az_storage_share_rm_stats_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_share_rm_stats_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_rm_stats_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_stats_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** The name or ID of the storage account. */
    az_storage_share_rm_stats_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_stats_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_rm_stats_command_builder;
}(base_1.CommandBuilder));
/**
 * Update the properties for an Azure file share.
 *
 * Syntax:
 * ```
 * az storage share-rm update [--access-tier {Cool, Hot, Premium, TransactionOptimized}]
 *                            [--add]
 *                            [--force-string]
 *                            [--ids]
 *                            [--metadata]
 *                            [--name]
 *                            [--quota]
 *                            [--remove]
 *                            [--resource-group]
 *                            [--root-squash {AllSquash, NoRootSquash, RootSquash}]
 *                            [--set]
 *                            [--storage-account]
 *                            [--subscription]
 * ```
 */
var az_storage_share_rm_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_rm_update_command_builder, _super);
    function az_storage_share_rm_update_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. */
    az_storage_share_rm_update_command_builder.prototype.accessTier = function (value) {
        this.setFlag("--access-tier", value);
        return this;
    };
    /** Add an object to a list of objects by specifying a path and key value pairs.  Example: --add property.listProperty <key=value, string or JSON string>. */
    az_storage_share_rm_update_command_builder.prototype.add = function (value) {
        this.setFlag("--add", value);
        return this;
    };
    /** When using 'set' or 'add', preserve string literals instead of attempting to convert to JSON. */
    az_storage_share_rm_update_command_builder.prototype.forceString = function (value) {
        this.setFlag("--force-string", value);
        return this;
    };
    /** One or more resource IDs (space-delimited). It should be a complete resource ID containing all information of 'Resource Id' arguments. You should provide either --ids or other 'Resource Id' arguments. */
    az_storage_share_rm_update_command_builder.prototype.ids = function (value) {
        this.setFlag("--ids", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs that is associated with the share. This overwrites any existing metadata. */
    az_storage_share_rm_update_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** The file share name. */
    az_storage_share_rm_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The maximum size of the share in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. */
    az_storage_share_rm_update_command_builder.prototype.quota = function (value) {
        this.setFlag("--quota", value);
        return this;
    };
    /** Remove a property or an element from a list.  Example: --remove property.list <indexToRemove> OR --remove propertyToRemove. */
    az_storage_share_rm_update_command_builder.prototype.remove = function (value) {
        this.setFlag("--remove", value);
        return this;
    };
    /** Name of resource group. You can configure the default group using `az configure --defaults group=<name>`. */
    az_storage_share_rm_update_command_builder.prototype.resourceGroup = function (value) {
        this.setFlag("--resource-group", value);
        return this;
    };
    /** Reduction of the access rights for the remote superuser. */
    az_storage_share_rm_update_command_builder.prototype.rootSquash = function (value) {
        this.setFlag("--root-squash", value);
        return this;
    };
    /** Update an object by specifying a property path and value to set.  Example: --set property1.property2=<value>. */
    az_storage_share_rm_update_command_builder.prototype.set = function (value) {
        this.setFlag("--set", value);
        return this;
    };
    /** The name or ID of the storage account. */
    az_storage_share_rm_update_command_builder.prototype.storageAccount = function (value) {
        this.setFlag("--storage-account", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_rm_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_rm_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates a new share under the specified account.
 *
 * Syntax:
 * ```
 * az storage share create --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--fail-on-exist]
 *                         [--metadata]
 *                         [--quota]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_create_command_builder, _super);
    function az_storage_share_create_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specify whether to throw an exception when the share exists. False by default. */
    az_storage_share_create_command_builder.prototype.failOnExist = function (value) {
        this.setFlag("--fail-on-exist", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_share_create_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). */
    az_storage_share_create_command_builder.prototype.quota = function (value) {
        this.setFlag("--quota", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Marks the specified share for deletion.
 *
 * Syntax:
 * ```
 * az storage share delete --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--delete-snapshots {include}]
 *                         [--fail-not-exist]
 *                         [--sas-token]
 *                         [--snapshot]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_delete_command_builder, _super);
    function az_storage_share_delete_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specify the deletion strategy when the share has snapshots. */
    az_storage_share_delete_command_builder.prototype.deleteSnapshots = function (value) {
        this.setFlag("--delete-snapshots", value);
        return this;
    };
    /** Specify whether to throw an exception when the share doesn't exist. False by default. */
    az_storage_share_delete_command_builder.prototype.failNotExist = function (value) {
        this.setFlag("--fail-not-exist", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. Specify this argument to delete a specific snapshot only. delete_snapshots must be None if this is specified. */
    az_storage_share_delete_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Check for the existence of a file share.
 *
 * Syntax:
 * ```
 * az storage share exists --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--sas-token]
 *                         [--snapshot]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_exists_command_builder, _super);
    function az_storage_share_exists_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_share_exists_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * Generates a shared access signature for the share.
 *
 * Syntax:
 * ```
 * az storage share generate-sas --name
 *                               [--account-key]
 *                               [--account-name]
 *                               [--cache-control]
 *                               [--connection-string]
 *                               [--content-disposition]
 *                               [--content-encoding]
 *                               [--content-language]
 *                               [--content-type]
 *                               [--expiry]
 *                               [--https-only]
 *                               [--ip]
 *                               [--permissions]
 *                               [--policy-name]
 *                               [--start]
 *                               [--subscription]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_generate_sas_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_generate_sas_command_builder, _super);
    function az_storage_share_generate_sas_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_generate_sas_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_generate_sas_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_generate_sas_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Response header value for Cache-Control when resource is accessed using this shared access signature. */
    az_storage_share_generate_sas_command_builder.prototype.cacheControl = function (value) {
        this.setFlag("--cache-control", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_generate_sas_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Response header value for Content-Disposition when resource is accessed using this shared access signature. */
    az_storage_share_generate_sas_command_builder.prototype.contentDisposition = function (value) {
        this.setFlag("--content-disposition", value);
        return this;
    };
    /** Response header value for Content-Encoding when resource is accessed using this shared access signature. */
    az_storage_share_generate_sas_command_builder.prototype.contentEncoding = function (value) {
        this.setFlag("--content-encoding", value);
        return this;
    };
    /** Response header value for Content-Language when resource is accessed using this shared access signature. */
    az_storage_share_generate_sas_command_builder.prototype.contentLanguage = function (value) {
        this.setFlag("--content-language", value);
        return this;
    };
    /** Response header value for Content-Type when resource is accessed using this shared access signature. */
    az_storage_share_generate_sas_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value. */
    az_storage_share_generate_sas_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted. */
    az_storage_share_generate_sas_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value);
        return this;
    };
    /** Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses. */
    az_storage_share_generate_sas_command_builder.prototype.ip = function (value) {
        this.setFlag("--ip", value);
        return this;
    };
    /** The permissions the SAS grants. Allowed values: (d)elete (l)ist (r)ead (w)rite. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined. */
    az_storage_share_generate_sas_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** The name of a stored access policy within the share's ACL. */
    az_storage_share_generate_sas_command_builder.prototype.policyName = function (value) {
        this.setFlag("--policy-name", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request. */
    az_storage_share_generate_sas_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_generate_sas_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_share_generate_sas_command_builder;
}(base_1.CommandBuilder));
/**
 * List the file shares in a storage account.
 *
 * Syntax:
 * ```
 * az storage share list [--account-key]
 *                       [--account-name]
 *                       [--connection-string]
 *                       [--include-metadata]
 *                       [--include-snapshots]
 *                       [--marker]
 *                       [--num-results]
 *                       [--prefix]
 *                       [--query-examples]
 *                       [--sas-token]
 *                       [--subscription]
 *                       [--timeout]
 * ```
 */
var az_storage_share_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_list_command_builder, _super);
    function az_storage_share_list_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specifies that share metadata be returned in the response. */
    az_storage_share_list_command_builder.prototype.includeMetadata = function (value) {
        this.setFlag("--include-metadata", value);
        return this;
    };
    /** Specifies that share snapshots be returned in the response. */
    az_storage_share_list_command_builder.prototype.includeSnapshots = function (value) {
        this.setFlag("--include-snapshots", value);
        return this;
    };
    /** An opaque continuation token. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped. */
    az_storage_share_list_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** Specify the maximum number to return. If the request does not specify num_results, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remaining of the results. Provide "\*" to return all. */
    az_storage_share_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** Filters the results to return only shares whose names begin with the specified prefix. */
    az_storage_share_list_command_builder.prototype.prefix = function (value) {
        this.setFlag("--prefix", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_share_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns all user-defined metadata and system properties for the specified share.
 *
 * Syntax:
 * ```
 * az storage share show --name
 *                       [--account-key]
 *                       [--account-name]
 *                       [--connection-string]
 *                       [--query-examples]
 *                       [--sas-token]
 *                       [--snapshot]
 *                       [--subscription]
 *                       [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_show_command_builder, _super);
    function az_storage_share_show_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_share_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** A string that represents the snapshot version, if applicable. */
    az_storage_share_show_command_builder.prototype.snapshot = function (value) {
        this.setFlag("--snapshot", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_show_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates a snapshot of an existing share under the specified account.
 *
 * Syntax:
 * ```
 * az storage share snapshot --name
 *                           [--account-key]
 *                           [--account-name]
 *                           [--connection-string]
 *                           [--metadata]
 *                           [--quota]
 *                           [--sas-token]
 *                           [--subscription]
 *                           [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_snapshot_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_snapshot_command_builder, _super);
    function az_storage_share_snapshot_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_snapshot_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_snapshot_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_snapshot_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_snapshot_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Metadata in space-separated key=value pairs. This overwrites any existing metadata. */
    az_storage_share_snapshot_command_builder.prototype.metadata = function (value) {
        this.setFlag("--metadata", value);
        return this;
    };
    /** Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). */
    az_storage_share_snapshot_command_builder.prototype.quota = function (value) {
        this.setFlag("--quota", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_snapshot_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_snapshot_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_snapshot_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_snapshot_command_builder;
}(base_1.CommandBuilder));
/**
 * Gets the approximate size of the data stored on the share, rounded up to the nearest gigabyte.
 *
 * Syntax:
 * ```
 * az storage share stats --name
 *                        [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_stats_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_stats_command_builder, _super);
    function az_storage_share_stats_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_stats_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_stats_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_stats_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_stats_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_stats_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_stats_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_stats_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_stats_command_builder;
}(base_1.CommandBuilder));
/**
 * Sets service-defined properties for the specified share.
 *
 * Syntax:
 * ```
 * az storage share update --name
 *                         --quota
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The file share name.
 * @param {string} quota Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5 TB (5120 GB).
 */
var az_storage_share_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_update_command_builder, _super);
    function az_storage_share_update_command_builder(commandPath, resultDataTypeName, name, quota) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.quota(quota);
        return _this;
    }
    /** The file share name. */
    az_storage_share_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Specifies the maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5 TB (5120 GB). */
    az_storage_share_update_command_builder.prototype.quota = function (value) {
        this.setFlag("--quota", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_share_update_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_share_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a URI to access a file share.
 *
 * Syntax:
 * ```
 * az storage share url --name
 *                      [--account-key]
 *                      [--account-name]
 *                      [--connection-string]
 *                      [--protocol {http, https}]
 *                      [--sas-token]
 *                      [--subscription]
 *                      [--unc]
 * ```
 *
 * @param {string} name The file share name.
 */
var az_storage_share_url_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_share_url_command_builder, _super);
    function az_storage_share_url_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The file share name. */
    az_storage_share_url_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_share_url_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_share_url_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_share_url_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Protocol to use. */
    az_storage_share_url_command_builder.prototype.protocol = function (value) {
        this.setFlag("--protocol", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_share_url_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_share_url_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Output UNC network path. */
    az_storage_share_url_command_builder.prototype.unc = function (value) {
        this.setFlag("--unc", value);
        return this;
    };
    return az_storage_share_url_command_builder;
}(base_1.CommandBuilder));
/**
 * Create a stored access policy on the containing object.
 *
 * Syntax:
 * ```
 * az storage table policy create --name
 *                                --table-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--expiry]
 *                                [--permissions]
 *                                [--sas-token]
 *                                [--start]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} tableName The container name.
 */
var az_storage_table_policy_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_policy_create_command_builder, _super);
    function az_storage_table_policy_create_command_builder(commandPath, resultDataTypeName, name, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.tableName(tableName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_table_policy_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The container name. */
    az_storage_table_policy_create_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_policy_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_policy_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_policy_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_table_policy_create_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined. */
    az_storage_table_policy_create_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_policy_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_table_policy_create_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_policy_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_table_policy_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage table policy delete --name
 *                                --table-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--sas-token]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} tableName The container name.
 */
var az_storage_table_policy_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_policy_delete_command_builder, _super);
    function az_storage_table_policy_delete_command_builder(commandPath, resultDataTypeName, name, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.tableName(tableName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_table_policy_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The container name. */
    az_storage_table_policy_delete_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_policy_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_policy_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_policy_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_policy_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_policy_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_table_policy_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * List stored access policies on a containing object.
 *
 * Syntax:
 * ```
 * az storage table policy list --table-name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--connection-string]
 *                              [--query-examples]
 *                              [--sas-token]
 *                              [--subscription]
 * ```
 *
 * @param {string} tableName The container name.
 */
var az_storage_table_policy_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_policy_list_command_builder, _super);
    function az_storage_table_policy_list_command_builder(commandPath, resultDataTypeName, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.tableName(tableName);
        return _this;
    }
    /** The container name. */
    az_storage_table_policy_list_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_policy_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_policy_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_policy_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_table_policy_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_policy_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_policy_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_table_policy_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Show a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage table policy show --name
 *                              --table-name
 *                              [--account-key]
 *                              [--account-name]
 *                              [--connection-string]
 *                              [--query-examples]
 *                              [--sas-token]
 *                              [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} tableName The container name.
 */
var az_storage_table_policy_show_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_policy_show_command_builder, _super);
    function az_storage_table_policy_show_command_builder(commandPath, resultDataTypeName, name, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.tableName(tableName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_table_policy_show_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The container name. */
    az_storage_table_policy_show_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_policy_show_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_policy_show_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_policy_show_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_table_policy_show_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_policy_show_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_policy_show_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_table_policy_show_command_builder;
}(base_1.CommandBuilder));
/**
 * Set a stored access policy on a containing object.
 *
 * Syntax:
 * ```
 * az storage table policy update --name
 *                                --table-name
 *                                [--account-key]
 *                                [--account-name]
 *                                [--connection-string]
 *                                [--expiry]
 *                                [--permissions]
 *                                [--sas-token]
 *                                [--start]
 *                                [--subscription]
 * ```
 *
 * @param {string} name The stored access policy name.
 * @param {string} tableName The container name.
 */
var az_storage_table_policy_update_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_policy_update_command_builder, _super);
    function az_storage_table_policy_update_command_builder(commandPath, resultDataTypeName, name, tableName) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        _this.tableName(tableName);
        return _this;
    }
    /** The stored access policy name. */
    az_storage_table_policy_update_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The container name. */
    az_storage_table_policy_update_command_builder.prototype.tableName = function (value) {
        this.setFlag("--table-name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_policy_update_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_policy_update_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_policy_update_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Expiration UTC datetime in (Y-m-d'T'H:M:S'Z'). */
    az_storage_table_policy_update_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Can be combined. */
    az_storage_table_policy_update_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_policy_update_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Start UTC datetime (Y-m-d'T'H:M:S'Z'). Defaults to time of request. */
    az_storage_table_policy_update_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_policy_update_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_table_policy_update_command_builder;
}(base_1.CommandBuilder));
/**
 * Creates a new table in the storage account.
 *
 * Syntax:
 * ```
 * az storage table create --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--fail-on-exist]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The name of the table to create. The table name may contain only alphanumeric characters and cannot begin with a numeric character. It is case-insensitive and must be from 3 to 63 characters long.
 */
var az_storage_table_create_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_create_command_builder, _super);
    function az_storage_table_create_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The name of the table to create. The table name may contain only alphanumeric characters and cannot begin with a numeric character. It is case-insensitive and must be from 3 to 63 characters long. */
    az_storage_table_create_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_create_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_create_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_create_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Throw an exception if the table already exists. */
    az_storage_table_create_command_builder.prototype.failOnExist = function (value) {
        this.setFlag("--fail-on-exist", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_create_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_create_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_table_create_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_table_create_command_builder;
}(base_1.CommandBuilder));
/**
 * Deletes the specified table and any data it contains.
 *
 * Syntax:
 * ```
 * az storage table delete --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--fail-not-exist]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The name of the table to delete.
 */
var az_storage_table_delete_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_delete_command_builder, _super);
    function az_storage_table_delete_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The name of the table to delete. */
    az_storage_table_delete_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_delete_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_delete_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_delete_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specifies whether to throw an exception if the table doesn't exist. */
    az_storage_table_delete_command_builder.prototype.failNotExist = function (value) {
        this.setFlag("--fail-not-exist", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_delete_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_delete_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_table_delete_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_table_delete_command_builder;
}(base_1.CommandBuilder));
/**
 * Returns a boolean indicating whether the table exists.
 *
 * Syntax:
 * ```
 * az storage table exists --name
 *                         [--account-key]
 *                         [--account-name]
 *                         [--connection-string]
 *                         [--sas-token]
 *                         [--subscription]
 *                         [--timeout]
 * ```
 *
 * @param {string} name The name of table to check for existence.
 */
var az_storage_table_exists_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_exists_command_builder, _super);
    function az_storage_table_exists_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The name of table to check for existence. */
    az_storage_table_exists_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_exists_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_exists_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_exists_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_exists_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_exists_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_table_exists_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_table_exists_command_builder;
}(base_1.CommandBuilder));
/**
 * Generates a shared access signature for the table.
 *
 * Syntax:
 * ```
 * az storage table generate-sas --name
 *                               [--account-key]
 *                               [--account-name]
 *                               [--connection-string]
 *                               [--end-pk]
 *                               [--end-rk]
 *                               [--expiry]
 *                               [--https-only]
 *                               [--ip]
 *                               [--permissions]
 *                               [--policy-name]
 *                               [--start]
 *                               [--start-pk]
 *                               [--start-rk]
 *                               [--subscription]
 * ```
 *
 * @param {string} name The name of the table to create a SAS token for.
 */
var az_storage_table_generate_sas_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_generate_sas_command_builder, _super);
    function az_storage_table_generate_sas_command_builder(commandPath, resultDataTypeName, name) {
        var _this = _super.call(this, commandPath, resultDataTypeName) || this;
        _this.name(name);
        return _this;
    }
    /** The name of the table to create a SAS token for. */
    az_storage_table_generate_sas_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_generate_sas_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_generate_sas_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_generate_sas_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The maximum partition key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed. */
    az_storage_table_generate_sas_command_builder.prototype.endPk = function (value) {
        this.setFlag("--end-pk", value);
        return this;
    };
    /** The maximum row key accessible with this shared access signature. endpk must accompany endrk. Key values are inclusive. If omitted, there is no upper bound on the table entities that can be accessed. */
    az_storage_table_generate_sas_command_builder.prototype.endRk = function (value) {
        this.setFlag("--end-rk", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes invalid. Do not use if a stored access policy is referenced with --id that specifies this value. */
    az_storage_table_generate_sas_command_builder.prototype.expiry = function (value) {
        this.setFlag("--expiry", value);
        return this;
    };
    /** Only permit requests made with the HTTPS protocol. If omitted, requests from both the HTTP and HTTPS protocol are permitted. */
    az_storage_table_generate_sas_command_builder.prototype.httpsOnly = function (value) {
        this.setFlag("--https-only", value);
        return this;
    };
    /** Specifies the IP address or range of IP addresses from which to accept requests. Supports only IPv4 style addresses. */
    az_storage_table_generate_sas_command_builder.prototype.ip = function (value) {
        this.setFlag("--ip", value);
        return this;
    };
    /** The permissions the SAS grants. Allowed values: (r)ead/query (a)dd (u)pdate (d)elete. Do not use if a stored access policy is referenced with --id that specifies this value. Can be combined. */
    az_storage_table_generate_sas_command_builder.prototype.permissions = function (value) {
        this.setFlag("--permissions", value);
        return this;
    };
    /** The name of a stored access policy within the table's ACL. */
    az_storage_table_generate_sas_command_builder.prototype.policyName = function (value) {
        this.setFlag("--policy-name", value);
        return this;
    };
    /** Specifies the UTC datetime (Y-m-d'T'H:M'Z') at which the SAS becomes valid. Do not use if a stored access policy is referenced with --id that specifies this value. Defaults to the time of the request. */
    az_storage_table_generate_sas_command_builder.prototype.start = function (value) {
        this.setFlag("--start", value);
        return this;
    };
    /** The minimum partition key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed. */
    az_storage_table_generate_sas_command_builder.prototype.startPk = function (value) {
        this.setFlag("--start-pk", value);
        return this;
    };
    /** The minimum row key accessible with this shared access signature. startpk must accompany startrk. Key values are inclusive. If omitted, there is no lower bound on the table entities that can be accessed. */
    az_storage_table_generate_sas_command_builder.prototype.startRk = function (value) {
        this.setFlag("--start-rk", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_generate_sas_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_table_generate_sas_command_builder;
}(base_1.CommandBuilder));
/**
 * List tables in a storage account.
 *
 * Syntax:
 * ```
 * az storage table list [--account-key]
 *                       [--account-name]
 *                       [--connection-string]
 *                       [--marker]
 *                       [--num-results]
 *                       [--query-examples]
 *                       [--sas-token]
 *                       [--subscription]
 *                       [--timeout]
 * ```
 */
var az_storage_table_list_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_list_command_builder, _super);
    function az_storage_table_list_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_list_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_list_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_list_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** An opaque continuation object. This value can be retrieved from the next_marker field of a previous generator object if num_results was specified and that generator has finished enumerating results. If specified, this generator will begin returning results from the point where the previous generator stopped. */
    az_storage_table_list_command_builder.prototype.marker = function (value) {
        this.setFlag("--marker", value);
        return this;
    };
    /** The maximum number of tables to return. */
    az_storage_table_list_command_builder.prototype.numResults = function (value) {
        this.setFlag("--num-results", value);
        return this;
    };
    /** Recommend JMESPath string for you. You can copy one of the query and paste it after --query parameter within double quotation marks to see the results. You can add one or more positional keywords so that we can give suggestions based on these key words. */
    az_storage_table_list_command_builder.prototype.queryExamples = function (value) {
        this.setFlag("--query-examples", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_list_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_list_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_table_list_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_table_list_command_builder;
}(base_1.CommandBuilder));
/**
 * Retrieves statistics related to replication for the Table service.
 *
 * Syntax:
 * ```
 * az storage table stats [--account-key]
 *                        [--account-name]
 *                        [--connection-string]
 *                        [--sas-token]
 *                        [--subscription]
 *                        [--timeout]
 * ```
 */
var az_storage_table_stats_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_table_stats_command_builder, _super);
    function az_storage_table_stats_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_table_stats_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_table_stats_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_table_stats_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_table_stats_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_table_stats_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    /** Request timeout in seconds. Applies to each call to the service. */
    az_storage_table_stats_command_builder.prototype.timeout = function (value) {
        this.setFlag("--timeout", value);
        return this;
    };
    return az_storage_table_stats_command_builder;
}(base_1.CommandBuilder));
/**
 * Copy files or directories to or from Azure storage.
 *
 * Syntax:
 * ```
 * az storage copy [--account-key]
 *                 [--account-name]
 *                 [--blob-type {AppendBlob, BlockBlob, PageBlob}]
 *                 [--connection-string]
 *                 [--content-type]
 *                 [--destination]
 *                 [--destination-account-name]
 *                 [--destination-blob]
 *                 [--destination-container]
 *                 [--destination-file-path]
 *                 [--destination-local-path]
 *                 [--destination-share]
 *                 [--exclude-path]
 *                 [--exclude-pattern]
 *                 [--follow-symlinks]
 *                 [--include-path]
 *                 [--include-pattern]
 *                 [--preserve-s2s-access-tier {false, true}]
 *                 [--put-md5]
 *                 [--recursive]
 *                 [--sas-token]
 *                 [--source]
 *                 [--source-account-key]
 *                 [--source-account-name]
 *                 [--source-blob]
 *                 [--source-connection-string]
 *                 [--source-container]
 *                 [--source-file-path]
 *                 [--source-local-path]
 *                 [--source-sas]
 *                 [--source-share]
 *                 [--subscription]
 * ```
 */
var az_storage_copy_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_copy_command_builder, _super);
    function az_storage_copy_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_copy_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name of copy destination. */
    az_storage_copy_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** The type of blob at the destination. */
    az_storage_copy_command_builder.prototype.blobType = function (value) {
        this.setFlag("--blob-type", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_copy_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** Specify content type of the file. */
    az_storage_copy_command_builder.prototype.contentType = function (value) {
        this.setFlag("--content-type", value);
        return this;
    };
    /** The path/url of copy destination. It can be a local path, an url to azure storage server. If you provide destination parameter here, you do not need to provide arguments in copy destination arguments group and copy destination arguments will be deprecated in future. */
    az_storage_copy_command_builder.prototype.destination = function (value) {
        this.setFlag("--destination", value);
        return this;
    };
    /** Storage account name of copy destination. */
    az_storage_copy_command_builder.prototype.destinationAccountName = function (value) {
        this.setFlag("--destination-account-name", value);
        return this;
    };
    /** Blob name in blob container of copy destination storage account. */
    az_storage_copy_command_builder.prototype.destinationBlob = function (value) {
        this.setFlag("--destination-blob", value);
        return this;
    };
    /** Container name of copy destination storage account. */
    az_storage_copy_command_builder.prototype.destinationContainer = function (value) {
        this.setFlag("--destination-container", value);
        return this;
    };
    /** File path in file share of copy destination storage account. */
    az_storage_copy_command_builder.prototype.destinationFilePath = function (value) {
        this.setFlag("--destination-file-path", value);
        return this;
    };
    /** The path/url of copy destination. It can be a local path, an url to azure storage server. If you provide destination parameter here, you do not need to provide arguments in copy destination arguments group and copy destination arguments will be deprecated in future. */
    az_storage_copy_command_builder.prototype.destinationLocalPath = function (value) {
        this.setFlag("--destination-local-path", value);
        return this;
    };
    /** File share name of copy destination storage account. */
    az_storage_copy_command_builder.prototype.destinationShare = function (value) {
        this.setFlag("--destination-share", value);
        return this;
    };
    /** Exclude these paths. This option does not support wildcard characters (\*). Checks relative path prefix. For example: myFolder;myFolder/subDirName/file.pdf. */
    az_storage_copy_command_builder.prototype.excludePath = function (value) {
        this.setFlag("--exclude-path", value);
        return this;
    };
    /** Exclude these files where the name matches the pattern list. For example: \*.jpg;\*.pdf;exactName. This option supports wildcard characters (\*). */
    az_storage_copy_command_builder.prototype.excludePattern = function (value) {
        this.setFlag("--exclude-pattern", value);
        return this;
    };
    /** Follow symbolic links when uploading from local file system. */
    az_storage_copy_command_builder.prototype.followSymlinks = function (value) {
        this.setFlag("--follow-symlinks", value);
        return this;
    };
    /** Include only these paths. This option does not support wildcard characters (\*). Checks relative path prefix. For example:myFolder;myFolder/subDirName/file.pdf. */
    az_storage_copy_command_builder.prototype.includePath = function (value) {
        this.setFlag("--include-path", value);
        return this;
    };
    /** Include only these files where the name matches the pattern list. For example: \*.jpg;\*.pdf;exactName. This option supports wildcard characters (\*). */
    az_storage_copy_command_builder.prototype.includePattern = function (value) {
        this.setFlag("--include-pattern", value);
        return this;
    };
    /** Preserve access tier during service to service copy. Please refer to <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers">https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers</a> to ensure destination storage account support setting access tier. In the cases that setting access tier is not supported, please use `--preserve-s2s-access-tier false` to bypass copying access tier. (Default true). */
    az_storage_copy_command_builder.prototype.preserveS2SAccessTier = function (value) {
        this.setFlag("--preserve-s2s-access-tier", value.toString());
        return this;
    };
    /** Create an MD5 hash of each file, and save the hash as the Content-MD5 property of the destination blob/file.Only available when uploading. */
    az_storage_copy_command_builder.prototype.putMd5 = function (value) {
        this.setFlag("--put-md5", value);
        return this;
    };
    /** Look into sub-directories recursively. */
    az_storage_copy_command_builder.prototype.recursive = function (value) {
        this.setFlag("--recursive", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_copy_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The path/url of copy source. It can be a local path, an url to azure storage server or AWS S3 buckets. If you provide source parameter here, you do not need to provide arguments in copy source arguments group and copy source arguments will be deprecated in future. */
    az_storage_copy_command_builder.prototype.source = function (value) {
        this.setFlag("--source", value);
        return this;
    };
    /** Account key of copy source storage account. Must be used in conjunction with source storage account name. */
    az_storage_copy_command_builder.prototype.sourceAccountKey = function (value) {
        this.setFlag("--source-account-key", value);
        return this;
    };
    /** Account name of copy source storage account. */
    az_storage_copy_command_builder.prototype.sourceAccountName = function (value) {
        this.setFlag("--source-account-name", value);
        return this;
    };
    /** Blob name in blob container of copy source storage account. */
    az_storage_copy_command_builder.prototype.sourceBlob = function (value) {
        this.setFlag("--source-blob", value);
        return this;
    };
    /** Connection string of source storage account. */
    az_storage_copy_command_builder.prototype.sourceConnectionString = function (value) {
        this.setFlag("--source-connection-string", value);
        return this;
    };
    /** Container name of copy source storage account. */
    az_storage_copy_command_builder.prototype.sourceContainer = function (value) {
        this.setFlag("--source-container", value);
        return this;
    };
    /** File path in file share of copy source storage account. */
    az_storage_copy_command_builder.prototype.sourceFilePath = function (value) {
        this.setFlag("--source-file-path", value);
        return this;
    };
    /** The path/url of copy source. It can be a local path, an url to azure storage server or AWS S3 buckets. If you provide source parameter here, you do not need to provide arguments in copy source arguments group and copy source arguments will be deprecated in future. */
    az_storage_copy_command_builder.prototype.sourceLocalPath = function (value) {
        this.setFlag("--source-local-path", value);
        return this;
    };
    /** Shared Access Signature (SAS) token of copy source. Must be used in conjunction with source storage account name. */
    az_storage_copy_command_builder.prototype.sourceSas = function (value) {
        this.setFlag("--source-sas", value);
        return this;
    };
    /** File share name of copy source storage account. */
    az_storage_copy_command_builder.prototype.sourceShare = function (value) {
        this.setFlag("--source-share", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_copy_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_copy_command_builder;
}(base_1.CommandBuilder));
/**
 * Delete blobs or files from Azure Storage.
 *
 * Syntax:
 * ```
 * az storage remove [--account-key]
 *                   [--account-name]
 *                   [--connection-string]
 *                   [--container-name]
 *                   [--exclude-path]
 *                   [--exclude-pattern]
 *                   [--include-path]
 *                   [--include-pattern]
 *                   [--name]
 *                   [--path]
 *                   [--recursive]
 *                   [--sas-token]
 *                   [--share-name]
 *                   [--subscription]
 * ```
 */
var az_storage_remove_command_builder = /** @class */ (function (_super) {
    __extends(az_storage_remove_command_builder, _super);
    function az_storage_remove_command_builder(commandPath, resultDataTypeName) {
        return _super.call(this, commandPath, resultDataTypeName) || this;
    }
    /** Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY. */
    az_storage_remove_command_builder.prototype.accountKey = function (value) {
        this.setFlag("--account-key", value);
        return this;
    };
    /** Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit. */
    az_storage_remove_command_builder.prototype.accountName = function (value) {
        this.setFlag("--account-name", value);
        return this;
    };
    /** Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING. */
    az_storage_remove_command_builder.prototype.connectionString = function (value) {
        this.setFlag("--connection-string", value);
        return this;
    };
    /** The container name. */
    az_storage_remove_command_builder.prototype.containerName = function (value) {
        this.setFlag("--container-name", value);
        return this;
    };
    /** Exclude these paths. This option does not support wildcard characters (\*). Checks relative path prefix. For example: myFolder;myFolder/subDirName/file.pdf. */
    az_storage_remove_command_builder.prototype.excludePath = function (value) {
        this.setFlag("--exclude-path", value);
        return this;
    };
    /** Exclude these files where the name matches the pattern list. For example: \*.jpg;\*.pdf;exactName. This option supports wildcard characters (\*). */
    az_storage_remove_command_builder.prototype.excludePattern = function (value) {
        this.setFlag("--exclude-pattern", value);
        return this;
    };
    /** Include only these paths. This option does not support wildcard characters (\*). Checks relative path prefix. For example:myFolder;myFolder/subDirName/file.pdf. */
    az_storage_remove_command_builder.prototype.includePath = function (value) {
        this.setFlag("--include-path", value);
        return this;
    };
    /** Include only these files where the name matches the pattern list. For example: \*.jpg;\*.pdf;exactName. This option supports wildcard characters (\*). */
    az_storage_remove_command_builder.prototype.includePattern = function (value) {
        this.setFlag("--include-pattern", value);
        return this;
    };
    /** The blob name. */
    az_storage_remove_command_builder.prototype.name = function (value) {
        this.setFlag("--name", value);
        return this;
    };
    /** The path to the file within the file share. */
    az_storage_remove_command_builder.prototype.path = function (value) {
        this.setFlag("--path", value);
        return this;
    };
    /** Look into sub-directories recursively. */
    az_storage_remove_command_builder.prototype.recursive = function (value) {
        this.setFlag("--recursive", value);
        return this;
    };
    /** A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN. */
    az_storage_remove_command_builder.prototype.sasToken = function (value) {
        this.setFlag("--sas-token", value);
        return this;
    };
    /** The file share name. */
    az_storage_remove_command_builder.prototype.shareName = function (value) {
        this.setFlag("--share-name", value);
        return this;
    };
    /** Name or ID of subscription. You can configure the default subscription using `az account set -s NAME_OR_ID`. */
    az_storage_remove_command_builder.prototype.subscription = function (value) {
        this.setFlag("--subscription", value);
        return this;
    };
    return az_storage_remove_command_builder;
}(base_1.CommandBuilder));
